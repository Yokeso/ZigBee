///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        25/Mar/2021  12:55:39 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\Source\Smart_homeRC522.c            /
//    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func      /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\毕设\CC2530-smart_home\ /
//                          Projects\zstack\Utilities\Smart_home\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO   /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\ /
//                          Projects\zstack\Utilities\Smart_home\Source\Smart /
//                          _homeRC522.c -D xHAL_UART=TRUE -D xHAL_UART_TEST  /
//                          -D xPOWER_SAVING -lC D:\毕设\CC2530-smart_home\Pr /
//                          ojects\zstack\Utilities\Smart_home\CC2530DB\EndDe /
//                          viceSBRC522\List\ -lA D:\毕设\CC2530-smart_home\P /
//                          rojects\zstack\Utilities\Smart_home\CC2530DB\EndD /
//                          eviceSBRC522\List\ --diag_suppress Pe001,Pa010    /
//                          -o D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\EndDeviceSBRC522\Obj\   /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\Source\ -I              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\   /
//                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\include\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530SB\ -I        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\include\ -I D:\毕设\CC2530-smart_home\Project /
//                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\. /
//                          .\..\Components\mac\high_level\ -I                /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\ -I               /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\ -I D:\毕设\CC2530-smart_home\Projects\zstack\ /
//                          Utilities\Smart_home\CC2530DB\..\..\..\..\..\Comp /
//                          onents\osal\include\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          services\saddr\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\af\ -I D:\毕设\CC2530-smart_home\Projects\z /
//                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\. /
//                          .\Components\stack\nwk\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sapi\ -I D:\毕设\CC2530-smart_home\Projects /
//                          \zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\ -I                      /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sys\ -I D:\毕设\CC2530-smart_home\Projects\ /
//                          zstack\Utilities\Smart_home\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\zdo\ -I                       /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\ -I D:\毕设\CC2530-smart_home\Projects\zstac /
//                          k\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\ -Ohz                           /
//    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\EndDeviceSBRC522\List\Smar /
//                          t_homeRC522.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Smart_homeRC522

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Smart_home_CHECK_EVT?relay,0203H
        FUNCTION ??Smart_home_CallBack?relay,0203H
        PUBLIC ??Smart_home_Init?relay
        FUNCTION ??Smart_home_Init?relay,0203H
        PUBLIC ??Smart_home_ProcessEvent?relay
        FUNCTION ??Smart_home_ProcessEvent?relay,0203H
        FUNCTION ??Smart_home_Send?relay,0203H
        PUBLIC Coordinator_DstAddr
        PUBLIC Coordinator_Msg
        PUBLIC Humit_NwkState
        FUNCTION Smart_home_CHECK_EVT,021203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION Smart_home_CallBack,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Smart_home_ClusterList_IN
        PUBLIC Smart_home_ClusterList_OUT
        PUBLIC Smart_home_Init
        FUNCTION Smart_home_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC Smart_home_ProcessEvent
        FUNCTION Smart_home_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        FUNCTION Smart_home_Send,021203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC Smart_home_SimpleDesc
        PUBLIC Smart_home_TaskID
        PUBLIC Smart_home_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
HalRc522Init        SYMBOL "HalRc522Init"
PcdReset            SYMBOL "PcdReset"
PcdAntennaOn        SYMBOL "PcdAntennaOn"
osal_start_reload_timer SYMBOL "osal_start_reload_timer"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_mem_free       SYMBOL "osal_mem_free"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
AF_DataRequest      SYMBOL "AF_DataRequest"
PcdRequest          SYMBOL "PcdRequest"
PcdAnticoll         SYMBOL "PcdAnticoll"
osal_memcpy         SYMBOL "osal_memcpy"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalRc522Init?relay SYMBOL "?relay", HalRc522Init
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??PcdAntennaOn?relay SYMBOL "?relay", PcdAntennaOn
??PcdAnticoll?relay SYMBOL "?relay", PcdAnticoll
??PcdRequest?relay  SYMBOL "?relay", PcdRequest
??PcdReset?relay    SYMBOL "?relay", PcdReset
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_reload_timer?relay SYMBOL "?relay", osal_start_reload_timer
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
Smart_home_Init     SYMBOL "Smart_home_Init"
??Smart_home_Init?relay SYMBOL "?relay", Smart_home_Init
Smart_home_ProcessEvent SYMBOL "Smart_home_ProcessEvent"
??Smart_home_ProcessEvent?relay SYMBOL "?relay", Smart_home_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalRc522Init
        FUNCTION HalRc522Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdReset
        FUNCTION PcdReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdAntennaOn
        FUNCTION PcdAntennaOn,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_reload_timer
        FUNCTION osal_start_reload_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdRequest
        FUNCTION PcdRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdAnticoll
        FUNCTION PcdAnticoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalRc522Init?relay
        FUNCTION ??HalRc522Init?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??PcdAntennaOn?relay
        FUNCTION ??PcdAntennaOn?relay,00H
        EXTERN ??PcdAnticoll?relay
        FUNCTION ??PcdAnticoll?relay,00H
        EXTERN ??PcdRequest?relay
        FUNCTION ??PcdRequest?relay,00H
        EXTERN ??PcdReset?relay
        FUNCTION ??PcdReset?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_reload_timer?relay
        FUNCTION ??osal_start_reload_timer?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H

// D:\毕设\CC2530-smart_home\Projects\zstack\Utilities\Smart_home\Source\Smart_homeRC522.c
//    1 /*******************************************************************
//    2   文件名：Smart_homeRC522.c
//    3   作 者： 柳成林
//    4   功 能： 红外释电功能节点，实现对人员的检测，收集红外信
//    5           息并发送给传感器
//    6   更新日志(2021)
//    7   3.24
//    8   + 新增 设置输入输出簇
//    9          Smart_home_HandleKeys()      //按键控制
//   10          Smart_home_ProcessMSGCmd();  //输入控制函数 
//   11          Smart_home_CHECK_EVT();      //设备事件检测
//   12   + 修改 Smart_home_ProcessEvt()      //事件处理函数
//   13          Smart_home_Init()            //初始化函数
//   14          Smart_home_Send()            //信息发送函数
//   15 
//   16 
//   17 使用事件 
//   18      SMART_HOME_SEND_MSG_EVT(发送数据)
//   19      SMART_HOME_MATCHRSP_EVT(描述符匹配)
//   20      SMART_HOME_HALCHECK_EVT(管脚检查)
//   21    
//   22 *********************************************************************/
//   23 /*********************************************************************
//   24  * INCLUDES
//   25  */
//   26 
//   27 #include "AF.h"
//   28 #include "OnBoard.h"
//   29 #include "OSAL_Tasks.h"
//   30 #include "Smart_home.h"
//   31 #include "ZDApp.h"
//   32 #include "ZDObject.h"
//   33 #include "ZDProfile.h"
//   34 
//   35 #include "hal_drivers.h"
//   36 #include "hal_key.h"
//   37 
//   38 #include "hal_led.h"
//   39 #include "hal_uart.h"
//   40 #include "hal_rc522.h"
//   41 
//   42 /*********************************************************************
//   43  * MACROS
//   44  */
//   45 //3.23  屏幕显示的小bug
//   46 #define SMART_HOME_SEND_DELAY   500
//   47 #define SMART_HOME_CHECK_DELAY  100
//   48 #define SMART_HOME_MATCH_DELAY  1000
//   49 
//   50 #define ALARM_MAX_CNT           2    //几次检测到相同后报警，防止误报
//   51 /*********************************************************************
//   52  * CONSTANTS
//   53  */
//   54 
//   55 #if !defined( SERIAL_APP_PORT )
//   56 #define SERIAL_APP_PORT  0
//   57 #endif
//   58 
//   59 #if !defined( SERIAL_APP_BAUD )
//   60 #define SERIAL_APP_BAUD  HAL_UART_BR_38400
//   61 //#define SERIAL_APP_BAUD  HAL_UART_BR_115200
//   62 #endif
//   63 
//   64 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   65 #if !defined( SERIAL_APP_THRESH )
//   66 #define SERIAL_APP_THRESH  64
//   67 #endif
//   68 
//   69 #if !defined( SERIAL_APP_RX_SZ )
//   70 #define SERIAL_APP_RX_SZ  128
//   71 #endif
//   72 
//   73 #if !defined( SERIAL_APP_TX_SZ )
//   74 #define SERIAL_APP_TX_SZ  128
//   75 #endif
//   76 
//   77 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   78 #if !defined( SERIAL_APP_IDLE )
//   79 #define SERIAL_APP_IDLE  6
//   80 #endif
//   81 
//   82 // Loopback Rx bytes to Tx for throughput testing.
//   83 #if !defined( SERIAL_APP_LOOPBACK )
//   84 #define SERIAL_APP_LOOPBACK  FALSE
//   85 #endif
//   86 
//   87 // This is the max byte count per OTA message.
//   88 #if !defined( SERIAL_APP_TX_MAX )
//   89 #define SERIAL_APP_TX_MAX  80
//   90 #endif
//   91 
//   92 #define SERIAL_APP_RSP_CNT  4
//   93 
//   94 //3.21 设置输入输出簇
//   95 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   96 const cId_t Smart_home_ClusterList_IN[1] =
Smart_home_ClusterList_IN:
        DW 3
//   97 {
//   98   Smart_home_CLUSTERID_RFIDMSG        //继电器接收的消息控制命令
//   99 };
//  100 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  101 const cId_t Smart_home_ClusterList_OUT[1] =
Smart_home_ClusterList_OUT:
        DW 3
//  102 {
//  103   Smart_home_CLUSTERID_RFIDMSG         //继电器发送的状态信息
//  104 };
//  105 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  106 const SimpleDescriptionFormat_t Smart_home_SimpleDesc =
Smart_home_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 9
        DATA16
        DW Smart_home_ClusterList_IN
        DATA8
        DB 3
        DATA16
        DW Smart_home_ClusterList_OUT
//  107 {
//  108   Smart_home_ENDPOINT,              //  int   Endpoint;
//  109   Smart_home_PROFID,                //  uint16 AppProfId[2];
//  110   Smart_home_DEVICEID,              //  uint16 AppDeviceId[2];
//  111   Smart_home_DEVICE_VERSION,        //  int   AppDevVer:4;
//  112   Smart_home_FLAGS,                 //  int   AppFlags:4;
//  113   Smart_home_MAX_INCLUSTERS,          //  byte  AppNumInClusters;
//  114   (cId_t *)Smart_home_ClusterList_IN,  //  byte *pAppInClusterList;
//  115   Smart_home_MAX_OUTCLUSTERS ,          //  byte  AppNumOutClusters;
//  116   (cId_t *)Smart_home_ClusterList_OUT   //  byte *pAppOutClusterList;
//  117 };
//  118 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  119 const endPointDesc_t Smart_home_epDesc =
Smart_home_epDesc:
        DB 1
        DATA16
        DW Smart_home_TaskID
        DW Smart_home_SimpleDesc
        DATA8
        DB 0
//  120 {
//  121   Smart_home_ENDPOINT,
//  122  &Smart_home_TaskID,
//  123   (SimpleDescriptionFormat_t *)&Smart_home_SimpleDesc,
//  124   noLatencyReqs
//  125 };
//  126 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 afAddrType_t Coordinator_DstAddr;
Coordinator_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  128 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 devStates_t Humit_NwkState;
Humit_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  130 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 static uint8 RFIDBuf[5];
RFIDBuf:
        DS 5
        REQUIRE __INIT_XDATA_Z
//  132 
//  133 /*********************************************************************
//  134  * TYPEDEFS
//  135  */
//  136 
//  137 /*********************************************************************
//  138  * GLOBAL VARIABLES
//  139  */
//  140 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 Smart_home_TaskID;    // Task ID for internal task/event processing.
Smart_home_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 byte Coordinator_Msg[RFIDMSG_LEN];
Coordinator_Msg:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  143 
//  144 /*********************************************************************
//  145  * EXTERNAL VARIABLES
//  146  */
//  147 
//  148 /*********************************************************************
//  149  * EXTERNAL FUNCTIONS
//  150  */
//  151 
//  152 /*********************************************************************
//  153  * LOCAL VARIABLES
//  154  */
//  155 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 static byte Smart_home_MsgID;  // This is the unique message ID (counter)
Smart_home_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  157 
//  158 
//  159 /*********************************************************************
//  160  * LOCAL FUNCTIONS
//  161  */
//  162 
//  163 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  164 static void Smart_home_HandleKeys( uint8 shift, uint8 keys );
//  165 static void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  166 static void Smart_home_Send(void);
//  167 static void Smart_home_Resp(void);
//  168 static void Smart_home_CHECK_EVT(void);
//  169 static void Smart_home_CallBack(uint8 port, uint8 event);
//  170 
//  171 /*********************************************************************
//  172  * @fn      Smart_home_Init
//  173  *
//  174  * @brief   This is called during OSAL tasks' initialization.
//  175  *
//  176  * @param   task_id - the Task ID assigned by OSAL.
//  177  *
//  178  * @return  none
//  179  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 void Smart_home_Init( uint8 task_id )
Smart_home_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Smart_home_Init
        CODE
//  181 {
        FUNCALL Smart_home_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalRc522Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, PcdReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, PcdAntennaOn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  182   halUARTCfg_t uartConfig;
//  183 
//  184   Smart_home_TaskID = task_id;
        MOV     DPTR,#Smart_home_TaskID
        MOVX    @DPTR,A
//  185   Smart_home_MsgID = 0;
        MOV     DPTR,#Smart_home_MsgID
        CLR     A
        MOVX    @DPTR,A
//  186 
//  187   // Register the endpoint/interface description with the AF
//  188   afRegister( (endPointDesc_t *)&Smart_home_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Smart_home_epDesc & 0xff
        MOV     R3,#(Smart_home_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  189 
//  190   // Register for all key events - This app will handle all key events
//  191   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  192   
//  193   //串口配置
//  194   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  195   uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  196   uartConfig.flowControl          = TRUE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  197   uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  198   uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  199   uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  200   uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  201   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  202   uartConfig.callBackFunc         = Smart_home_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??Smart_home_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??Smart_home_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  203   HalUARTOpen (SERIAL_APP_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  204 
//  205   //初始化向协调器发送的地址
//  206   Coordinator_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Coordinator_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  207   Coordinator_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  208   Coordinator_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Coordinator_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  209   
//  210   
//  211   ZDO_RegisterForZDOMsg( Smart_home_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  212   ZDO_RegisterForZDOMsg( Smart_home_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  213   
//  214   HalRc522Init();
        ; Setup parameters for call to function HalRc522Init
        LCALL   ??HalRc522Init?relay
//  215   PcdReset();     // 复位RC522
        ; Setup parameters for call to function PcdReset
        LCALL   ??PcdReset?relay
//  216   PcdAntennaOn(); // 开启天线发射 
        ; Setup parameters for call to function PcdAntennaOn
        LCALL   ??PcdAntennaOn?relay
//  217   
//  218   // 周期性查询两个传感器的管脚
//  219   osal_start_reload_timer( Smart_home_TaskID, SMART_HOME_HALCHECK_EVT, 
//  220                                                SMART_HOME_CHECK_DELAY );
        ; Setup parameters for call to function osal_start_reload_timer
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x40
        LCALL   ?Subroutine1 & 0xFFFF
//  221   
//  222   // 打开定时器，描述符匹配事件
//  223   osal_start_reload_timer( Smart_home_TaskID, SMART_HOME_MATCHRSP_EVT, 
//  224                                                SMART_HOME_SEND_DELAY );
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function osal_start_reload_timer
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x8
        LCALL   ?Subroutine1 & 0xFFFF
//  225 }
??CrossCallReturnLabel_5:
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  226 
//  227 /*********************************************************************
//  228  * @fn      Smart_home_ProcessEvent
//  229  *
//  230  * @brief   Generic Application Task event processor.
//  231  *
//  232  * @param   task_id  - The OSAL assigned task ID.
//  233  * @param   events   - Bit map of events to process.
//  234  *
//  235  * @return  Event flags of all unprocessed events.
//  236  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  237 UINT16 Smart_home_ProcessEvent( uint8 task_id, UINT16 events )
Smart_home_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Smart_home_ProcessEvent
        CODE
//  238 {
        FUNCALL Smart_home_ProcessEvent, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_CHECK_EVT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  239   (void)task_id;  // Intentionally unreferenced parameter
//  240   
//  241   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??Smart_home_ProcessEvent_0 & 0xFFFF
//  242   {
//  243     afIncomingMSGPacket_t *MSGpkt;
//  244 
//  245     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID )) )
//  246     {
//  247       switch ( MSGpkt->hdr.event )
//  248       {
//  249       case ZDO_CB_MSG:
//  250         Smart_home_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  251         break;
//  252           
//  253       case KEY_CHANGE:
//  254         Smart_home_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  255         break;
//  256 
//  257       case AF_INCOMING_MSG_CMD:
//  258         Smart_home_ProcessMSGCmd( MSGpkt );
//  259         break;
//  260 
//  261       default:
//  262         break;
//  263       }
//  264 
//  265       osal_msg_deallocate( (uint8 *)MSGpkt );
//  266     }
//  267 
//  268     return ( events ^ SYS_EVENT_MSG );
//  269   }
//  270   
//  271   // 描述匹配事件
//  272   if ( events & SMART_HOME_MATCHRSP_EVT )
        MOV     A,R6
        ANL     A,#0x8
        JNZ     $+5
        LJMP    ??Smart_home_ProcessEvent_1 & 0xFFFF
//  273   {
//  274      zAddrType_t dstAddr;
//  275      dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  276      dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  277      
//  278      ZDP_MatchDescReq( &dstAddr, 
//  279                         NWK_BROADCAST_SHORTADDR,
//  280                         Smart_home_PROFID,
//  281                         Smart_home_MAX_OUTCLUSTERS, 
//  282                         (cId_t *)Smart_home_ClusterList_IN,
//  283                         Smart_home_MAX_INCLUSTERS, 
//  284                         (cId_t *)Smart_home_ClusterList_OUT,
//  285                         FALSE );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,#Smart_home_ClusterList_OUT & 0xff
        MOV     ?V0 + 1,#(Smart_home_ClusterList_OUT >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x9
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#Smart_home_ClusterList_IN & 0xff
        MOV     ?V0 + 1,#(Smart_home_ClusterList_IN >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x3
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
//  286 
//  287     // Return unprocessed events
//  288     return (events ^ SMART_HOME_MATCHRSP_EVT);
        MOV     A,R6
        XRL     A,#0x8
??Smart_home_ProcessEvent_2:
        MOV     R2,A
        MOV     A,R7
??Smart_home_ProcessEvent_3:
        MOV     R3,A
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
//  289   }
??Smart_home_ProcessEvent_5:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xd3
        JNZ     ??Smart_home_ProcessEvent_6
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??Smart_home_ProcessEvent_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??Smart_home_ProcessEvent_7:
        JNZ     ??Smart_home_ProcessEvent_6
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??Smart_home_ProcessEvent_6
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_6
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_6
        MOV     DPTR,#Coordinator_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#Coordinator_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Coordinator_DstAddr + 9
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        ; Setup parameters for call to function osal_start_reload_timer
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x1
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
??Smart_home_ProcessEvent_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_msg_deallocate?relay
??Smart_home_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??Smart_home_ProcessEvent_5 & 0xFFFF
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??Smart_home_ProcessEvent_3 & 0xFFFF
//  290 
//  291   if ( events & SMART_HOME_SEND_MSG_EVT )
??Smart_home_ProcessEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_ProcessEvent_8
//  292   {
//  293     Smart_home_Send();
        ; Setup parameters for call to function Smart_home_Send
        LCALL   ??Smart_home_Send?relay
//  294     return ( events ^ SMART_HOME_SEND_MSG_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??Smart_home_ProcessEvent_2 & 0xFFFF
//  295   }
//  296 
//  297   if ( events & SMART_HOME_BINDRSP_EVT )
??Smart_home_ProcessEvent_8:
        ANL     A,#0x20
        JZ      ??Smart_home_ProcessEvent_9
//  298   {
//  299     Smart_home_Resp();
//  300     return ( events ^ SMART_HOME_BINDRSP_EVT );
        MOV     A,R6
        XRL     A,#0x20
        MOV     R2,A
        SJMP    ??Smart_home_ProcessEvent_4
//  301   }
//  302     
//  303   if ( events & SMART_HOME_HALCHECK_EVT )
??Smart_home_ProcessEvent_9:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??Smart_home_ProcessEvent_10
//  304   {
//  305     Smart_home_CHECK_EVT();
        ; Setup parameters for call to function Smart_home_CHECK_EVT
        LCALL   ??Smart_home_CHECK_EVT?relay
//  306     return ( events ^ SMART_HOME_HALCHECK_EVT );
        MOV     A,R6
        XRL     A,#0x40
        LJMP    ??Smart_home_ProcessEvent_2 & 0xFFFF
//  307   }
//  308   
//  309   return ( 0 );  // Discard unknown events.
??Smart_home_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Smart_home_ProcessEvent_4:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  310 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R3,#0x0
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_reload_timer?relay
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  311 
//  312 /*********************************************************************
//  313  * @fn      Smart_home_ProcessZDOMsgs()
//  314  *
//  315  * @brief   Process response messages
//  316  *
//  317  * @param   none
//  318  *
//  319  * @return  none
//  320  */
//  321 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  322 {
//  323   switch ( inMsg->clusterID )
//  324   {
//  325     case End_Device_Bind_rsp:
//  326       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  327       {
//  328 #if (HAL_UART == TRUE)
//  329         HalUARTWrite(HAL_UART_PORT_0, "Bind Success!\n",   strlen("Bind Success!\n"));
//  330 #endif
//  331       }
//  332       break;
//  333     
//  334     case Match_Desc_rsp:
//  335       ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  336       if ( pRsp )
//  337       {
//  338         if ( pRsp->status == ZSuccess && pRsp->cnt )
//  339         {
//  340           // 此处存储绑定对方的地址信息用于发送
//  341           Coordinator_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  342           Coordinator_DstAddr.addr.shortAddr = pRsp->nwkAddr;
//  343           // Take the first endpoint, Can be changed to search through endpoints
//  344           Coordinator_DstAddr.endPoint = pRsp->epList[0];  // ok
//  345           // 匹配成功，关闭描述符匹配事件定时器
//  346           osal_stop_timerEx( Smart_home_TaskID, SMART_HOME_MATCHRSP_EVT );
//  347   
//  348 #if (HAL_UART == TRUE)
//  349           HalUARTWrite(HAL_UART_PORT_0, "Match Success!\n",   strlen("Match Success!\n"));
//  350 #endif
//  351           // 开启定时发送数据给协调器的事件
//  352           osal_start_reload_timer( Smart_home_TaskID, SMART_HOME_SEND_MSG_EVT, 
//  353                                    SMART_HOME_SEND_DELAY );
//  354         }
//  355     
//  356         osal_mem_free( pRsp );
//  357       }
//  358       break;
//  359       
//  360     default:
//  361       break;
//  362   }
//  363   
//  364 }
//  365 
//  366 /*********************************************************************
//  367  * @fn      Smart_home_HandleKeys
//  368  *
//  369  * @brief   Handles all key events for this device.
//  370  *
//  371  * @param   shift - true if in shift/alt.
//  372  * @param   keys  - bit field for key events.
//  373  *
//  374  * @return  none
//  375  */
//  376 void Smart_home_HandleKeys( uint8 shift, uint8 keys )
//  377 {
//  378   
//  379   if ( keys & HAL_KEY_SW_5 )
//  380   {
//  381   }
//  382 
//  383 }
//  384 
//  385 /*********************************************************************
//  386  * @fn      Smart_home_ProcessMSGCmd
//  387  *
//  388  * @brief   Data message processor callback. This function processes
//  389  *          any incoming data - probably from other devices. Based
//  390  *          on the cluster ID, perform the intended action.
//  391  *
//  392  * @param   pkt - pointer to the incoming message packet
//  393  *
//  394  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  395  *          FALSE otherwise.
//  396  */
//  397 void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
//  398 {
//  399   uint8 mode;
//  400   
//  401   switch ( pkt->clusterId )
//  402   {
//  403     case Smart_home_CLUSTERID_RFIDMSG:
//  404     {    
//  405       break;
//  406     } 
//  407     // Could receive control messages in the future.
//  408     default:
//  409       break;
//  410   }
//  411 }
//  412 
//  413 /*********************************************************************
//  414  * @fn      Smart_home_Send
//  415  *
//  416  * @brief   Send data OTA.
//  417  *
//  418  * @param   none
//  419  *
//  420  * @return  none
//  421  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  422 static void Smart_home_Send(void)
Smart_home_Send:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function Smart_home_Send
        CODE
//  423 {
        FUNCALL Smart_home_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  424   uint16 i;
//  425   uint8 tmp; 
//  426   
//  427   do{
//  428     // put the sequence number in the message
//  429     tmp = HI_UINT8( Smart_home_MsgID );
??Smart_home_Send_0:
        MOV     DPTR,#Smart_home_MsgID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
//  430     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Send_1
        MOV     R0,#0x30
        SJMP    ??Smart_home_Send_2
??Smart_home_Send_1:
        MOV     R0,#0x37
//  431     Coordinator_Msg[2] = tmp;
??Smart_home_Send_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 2
        MOVX    @DPTR,A
//  432     tmp = LO_UINT8( Smart_home_MsgID );
        MOV     DPTR,#Smart_home_MsgID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
//  433     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Send_3
        MOV     R0,#0x30
        SJMP    ??Smart_home_Send_4
??Smart_home_Send_3:
        MOV     R0,#0x37
//  434     Coordinator_Msg[3] = tmp;
??Smart_home_Send_4:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 3
        MOVX    @DPTR,A
//  435     
//  436     // 发送给协调器命令 
//  437     Coordinator_Msg[4] = RFIDBuf[0];   //卡类型
        MOV     DPTR,#RFIDBuf
        MOVX    A,@DPTR
        MOV     DPTR,#Coordinator_Msg + 4
        MOVX    @DPTR,A
//  438     Coordinator_Msg[5] = RFIDBuf[1];   //四字节数据
        MOV     DPTR,#RFIDBuf + 1
        MOVX    A,@DPTR
        MOV     DPTR,#Coordinator_Msg + 5
        MOVX    @DPTR,A
//  439     Coordinator_Msg[6] = RFIDBuf[2];
        MOV     DPTR,#RFIDBuf + 2
        MOVX    A,@DPTR
        MOV     DPTR,#Coordinator_Msg + 6
        MOVX    @DPTR,A
//  440     Coordinator_Msg[7] = RFIDBuf[3];
        MOV     DPTR,#RFIDBuf + 3
        MOVX    A,@DPTR
        MOV     DPTR,#Coordinator_Msg + 7
        MOVX    @DPTR,A
//  441     Coordinator_Msg[8] = RFIDBuf[4];
        MOV     DPTR,#RFIDBuf + 4
        MOVX    A,@DPTR
        MOV     DPTR,#Coordinator_Msg + 8
        MOVX    @DPTR,A
//  442     
//  443     tmp = AF_DataRequest( &Coordinator_DstAddr,                         
//  444                           (endPointDesc_t *)&Smart_home_epDesc,                  
//  445                            Smart_home_CLUSTERID_RFIDMSG,
//  446                            RFIDMSG_LEN,                 
//  447                            Coordinator_Msg,                    
//  448                           &Smart_home_MsgID,                       
//  449                            AF_DISCV_ROUTE,                     
//  450                            AF_DEFAULT_RADIUS );
//  451   }while (afStatus_SUCCESS == tmp);   
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#Smart_home_MsgID & 0xff
        MOV     ?V0 + 1,#(Smart_home_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#Coordinator_Msg & 0xff
        MOV     ?V0 + 1,#(Coordinator_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x9
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#Smart_home_epDesc & 0xff
        MOV     R5,#(Smart_home_epDesc >> 8) & 0xff
        MOV     R2,#Coordinator_DstAddr & 0xff
        MOV     R3,#(Coordinator_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??Smart_home_Send_0 & 0xFFFF
//  452   
//  453   // 发送成功后清除报警信息
//  454   for (i = 0; i < 5; i++)
//  455   {
//  456     RFIDBuf[i] = 0;
        CLR     A
        MOV     DPTR,#RFIDBuf
        MOV     R0,#0x5
??Smart_home_Send_5:
        MOVX    @DPTR,A
        INC     DPTR
        DJNZ    R0,??Smart_home_Send_5
//  457   } 
//  458 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  459 
//  460 /*********************************************************************
//  461  * @fn      Smart_home_Resp
//  462  *
//  463  * @brief   Send data OTA.
//  464  *
//  465  * @param   none
//  466  *
//  467  * @return  none
//  468  */
//  469 static void Smart_home_Resp(void)
//  470 {
//  471   /*
//  472   if (afStatus_SUCCESS != AF_DataRequest(&Smart_home_RxAddr,
//  473                                          (endPointDesc_t *)&Smart_home_epDesc,
//  474                                           Smart_home_CLUSTERID2,
//  475                                           SERIAL_APP_RSP_CNT, Smart_home_RspBuf,
//  476                                          &Smart_home_MsgID, 0, AF_DEFAULT_RADIUS))
//  477   {
//  478     osal_set_event(Smart_home_TaskID, SMART_HOME_BINDRSP_EVT);
//  479   }
//  480   */
//  481 }
//  482 
//  483 
//  484 /*********************************************************************
//  485  * @fn      Smart_home_CHECK_EVT()
//  486  *
//  487  * @brief   Send data OTA.
//  488  *
//  489  * @param   none
//  490  *
//  491  * @return  none
//  492  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  493 static void Smart_home_CHECK_EVT(void)
Smart_home_CHECK_EVT:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Smart_home_CHECK_EVT
        CODE
//  494 {
        FUNCALL Smart_home_CHECK_EVT, PcdRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_CHECK_EVT, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_CHECK_EVT, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_CHECK_EVT, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_CHECK_EVT, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_CHECK_EVT, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_CHECK_EVT, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  495   static uint8 Temp[2];
//  496   static char dispBuf[20], dataTemp[4];
//  497    
//  498   // PICC_REQALL：寻天线区内全部卡
//  499   if(PcdRequest(PICC_REQALL, Temp) == MI_OK)
        ; Setup parameters for call to function PcdRequest
        MOV     R2,#??Temp & 0xff
        MOV     R3,#(??Temp >> 8) & 0xff
        MOV     R1,#0x52
        LCALL   ??PcdRequest?relay
        MOV     A,R1
        JNZ     ??Smart_home_CHECK_EVT_0
//  500   {     
//  501     if(Temp[0] == 0x04 && Temp[1] == 0x00)        // 读取卡类型
        MOV     DPTR,#??Temp
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Smart_home_CHECK_EVT_1
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??Smart_home_CHECK_EVT_0
//  502     {
//  503       RFIDBuf[0] = 0x01;
        MOV     DPTR,#RFIDBuf
        MOV     A,#0x1
        LCALL   ?Subroutine0 & 0xFFFF
//  504       if(PcdAnticoll((uint8 *)dataTemp) == MI_OK) // 读取卡ID
??CrossCallReturnLabel_0:
        JNZ     ??Smart_home_CHECK_EVT_0
//  505       { 
//  506         osal_memcpy((char *)(RFIDBuf+1), dataTemp, 4);
??Smart_home_CHECK_EVT_2:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#??dataTemp & 0xff
        MOV     ?V0 + 1,#(??dataTemp >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#(RFIDBuf + 1) & 0xff
        MOV     R3,#((RFIDBuf + 1) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        SJMP    ??Smart_home_CHECK_EVT_0
//  507       } 
//  508     }
//  509     else if(Temp[0] == 0x02 && Temp[1] == 0x00)   // 读取卡类型
??Smart_home_CHECK_EVT_1:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??Smart_home_CHECK_EVT_3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??Smart_home_CHECK_EVT_0
//  510     {
//  511       RFIDBuf[0] = 0x02;
        MOV     DPTR,#RFIDBuf
        MOV     A,#0x2
//  512       if(PcdAnticoll((uint8 *)dataTemp) == MI_OK) // 读取卡ID
//  513       { 
//  514         osal_memcpy((char *)(RFIDBuf+1), dataTemp, 4);
//  515       }
//  516     }
??Smart_home_CHECK_EVT_4:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        JNZ     ??Smart_home_CHECK_EVT_0
        SJMP    ??Smart_home_CHECK_EVT_2
//  517     else if(Temp[0] == 0x44 && Temp[1] == 0x00)   // 读取卡类型
??Smart_home_CHECK_EVT_3:
        MOVX    A,@DPTR
        XRL     A,#0x44
        JNZ     ??Smart_home_CHECK_EVT_5
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??Smart_home_CHECK_EVT_6
//  518     {
//  519       RFIDBuf[0] = 0x03;
        MOV     DPTR,#RFIDBuf
        MOV     A,#0x3
        SJMP    ??Smart_home_CHECK_EVT_4
//  520       if(PcdAnticoll((uint8 *)dataTemp) == MI_OK) // 读取卡ID
//  521       { 
//  522         osal_memcpy((char *)(RFIDBuf+1), dataTemp, 4);
//  523       }
//  524     }
//  525     else if(Temp[0] == 0x08 && Temp[1] == 0x00)   // 读取卡类型
??Smart_home_CHECK_EVT_5:
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??Smart_home_CHECK_EVT_0
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??Smart_home_CHECK_EVT_0
//  526     {
//  527       RFIDBuf[0] = 0x04; 
        MOV     DPTR,#RFIDBuf
        MOV     A,#0x4
        LCALL   ?Subroutine0 & 0xFFFF
//  528       if(PcdAnticoll((uint8 *)dataTemp) == MI_OK) // 读取卡ID
//  529       { 
//  530         osal_memcpy((char *)(RFIDBuf+1), dataTemp, 4);
//  531       }
//  532     }
??CrossCallReturnLabel_2:
        JNZ     ??Smart_home_CHECK_EVT_0
        SJMP    ??Smart_home_CHECK_EVT_2
??Smart_home_CHECK_EVT_6:
        XRL     A,#0x3
        JNZ     ??Smart_home_CHECK_EVT_0
//  533     else if(Temp[0] == 0x44 && Temp[1] == 0x03)   // 读取卡类型
//  534     {
//  535       RFIDBuf[0] = 0x05;
        MOV     DPTR,#RFIDBuf
        MOV     A,#0x5
        LCALL   ?Subroutine0 & 0xFFFF
//  536       if(PcdAnticoll((uint8 *)dataTemp) == MI_OK) // 读取卡ID
//  537       { 
//  538         osal_memcpy((char *)(RFIDBuf+1), dataTemp, 4);
//  539       }
//  540     } 
//  541           
//  542 
//  543   }
??CrossCallReturnLabel_3:
        JZ      ??Smart_home_CHECK_EVT_2
//  544 }
??Smart_home_CHECK_EVT_0:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function PcdAnticoll
        ; Setup parameters for call to function PcdAnticoll
        ; Setup parameters for call to function PcdAnticoll
        ; Setup parameters for call to function PcdAnticoll
        MOV     R2,#??dataTemp & 0xff
        MOV     R3,#(??dataTemp >> 8) & 0xff
        LCALL   ??PcdAnticoll?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Temp:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
??dataTemp:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  545 
//  546 /*********************************************************************
//  547  * @fn      Smart_home_CallBack
//  548  *
//  549  * @brief   Send data OTA.
//  550  *
//  551  * @param   port - UART port.
//  552  * @param   event - the UART port event flag.
//  553  *
//  554  * @return  none
//  555  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  556 static void Smart_home_CallBack(uint8 port, uint8 event)
Smart_home_CallBack:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function Smart_home_CallBack
        CODE
//  557 {
        ; Saved register size: 0
        ; Auto size: 0
//  558 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock13

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_CHECK_EVT?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_CHECK_EVT

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_CallBack

        END
//  559 
//  560 /*********************************************************************
//  561 *********************************************************************/
// 
// 894 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//  22 bytes in segment XDATA_ROM_C
//  35 bytes in segment XDATA_Z
// 
// 924 bytes of CODE  memory
//  22 bytes of CONST memory
//  35 bytes of XDATA memory
//
//Errors: none
//Warnings: 4
