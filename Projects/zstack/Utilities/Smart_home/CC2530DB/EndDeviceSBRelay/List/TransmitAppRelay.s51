///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        22/Mar/2021  21:32:50 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\Source\TransmitAppRelay.c     /
//    Command line       =  -f "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\Tools\CC253 /
//                          0DB\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func  /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜ /
//                          Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530- /
//                          2.5.1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg"            /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x02000000         /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜ /
//                          Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530- /
//                          2.5.1a_EB\Projects\zstack\MY_BOARD\Exp4\Source\Tr /
//                          ansmitAppRelay.c" -D HAL_UART=TRUE -D             /
//                          HAL_UART_TEST -D xPOWER_SAVING -lC                /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\EndDeviceSBRelay\Lis /
//                          t\" -lA "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ /
//                          ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Proje /
//                          cts\zstack\MY_BOARD\Exp4\CC2530DB\EndDeviceSBRela /
//                          y\List\" --diag_suppress Pe001,Pa010 -o           /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\EndDeviceSBRelay\Obj /
//                          \" -e --no_code_motion --debug --core=plain       /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\" -I                 /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\Source\" -I       /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\ZMain\TI253 /
//                          0DB\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆Ω /
//                          Ã®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Proj /
//                          ects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\" -I                      /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\target\CC2530SB\" -I                    /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\include\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜ /
//                          Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530- /
//                          2.5.1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\" -I     /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\low_level\srf04\" -I                    /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\low_level\srf04\single_chip\" -I        /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mt\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ  /
//                          µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB /
//                          \Projects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\..\ /
//                          ..\..\Components\osal\include\" -I                /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\saddr\" -I                         /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\sdata\" -I                         /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\af\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬ /
//                          Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5 /
//                          .1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\nwk\" -I             /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sapi\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ /
//                          ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2 /
//                          .5.1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\" -I           /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sys\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯ /
//                          ¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2. /
//                          5.1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\" -I            /
//                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03     /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compo /
//                          nents\zmac\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫ /
//                          œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_ /
//                          EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\f8w\" -Ohz                /
//    List file          =  D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      /
//                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\z /
//                          stack\MY_BOARD\Exp4\CC2530DB\EndDeviceSBRelay\Lis /
//                          t\TransmitAppRelay.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME TransmitAppRelay

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??TransmitApp_CallBack?relay,0203H
        PUBLIC ??TransmitApp_HandleKeys?relay
        FUNCTION ??TransmitApp_HandleKeys?relay,0203H
        PUBLIC ??TransmitApp_Init?relay
        FUNCTION ??TransmitApp_Init?relay,0203H
        PUBLIC ??TransmitApp_MessageMSGCB?relay
        FUNCTION ??TransmitApp_MessageMSGCB?relay,0203H
        PUBLIC ??TransmitApp_ProcessEvent?relay
        FUNCTION ??TransmitApp_ProcessEvent?relay,0203H
        PUBLIC ??TransmitApp_ProcessZDOMsgs?relay
        FUNCTION ??TransmitApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??TransmitApp_SendTheMessage?relay
        FUNCTION ??TransmitApp_SendTheMessage?relay,0203H
        FUNCTION TransmitApp_CallBack,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC TransmitApp_DstAddr
        PUBLIC TransmitApp_HandleKeys
        FUNCTION TransmitApp_HandleKeys,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TransmitApp_InClusterList
        PUBLIC TransmitApp_Init
        FUNCTION TransmitApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC TransmitApp_MessageMSGCB
        FUNCTION TransmitApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC TransmitApp_Msg
        PUBLIC TransmitApp_OutClusterList
        PUBLIC TransmitApp_ProcessEvent
        FUNCTION TransmitApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC TransmitApp_ProcessZDOMsgs
        FUNCTION TransmitApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC TransmitApp_SendTheMessage
        FUNCTION TransmitApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC TransmitApp_SimpleDesc
        PUBLIC TransmitApp_TaskID
        PUBLIC TransmitApp_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
HalRelayCtl         SYMBOL "HalRelayCtl"
osal_start_reload_timer SYMBOL "osal_start_reload_timer"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
HalUARTWrite        SYMBOL "HalUARTWrite"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_mem_free       SYMBOL "osal_mem_free"
HalLedSet           SYMBOL "HalLedSet"
HalRelayStatus      SYMBOL "HalRelayStatus"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalRelayCtl?relay SYMBOL "?relay", HalRelayCtl
??HalRelayStatus?relay SYMBOL "?relay", HalRelayStatus
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_reload_timer?relay SYMBOL "?relay", osal_start_reload_timer
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
TransmitApp_HandleKeys SYMBOL "TransmitApp_HandleKeys"
??TransmitApp_HandleKeys?relay SYMBOL "?relay", TransmitApp_HandleKeys
TransmitApp_Init    SYMBOL "TransmitApp_Init"
??TransmitApp_Init?relay SYMBOL "?relay", TransmitApp_Init
TransmitApp_MessageMSGCB SYMBOL "TransmitApp_MessageMSGCB"
??TransmitApp_MessageMSGCB?relay SYMBOL "?relay", TransmitApp_MessageMSGCB
TransmitApp_ProcessEvent SYMBOL "TransmitApp_ProcessEvent"
??TransmitApp_ProcessEvent?relay SYMBOL "?relay", TransmitApp_ProcessEvent
TransmitApp_ProcessZDOMsgs SYMBOL "TransmitApp_ProcessZDOMsgs"
??TransmitApp_ProcessZDOMsgs?relay SYMBOL "?relay", TransmitApp_ProcessZDOMsgs
TransmitApp_SendTheMessage SYMBOL "TransmitApp_SendTheMessage"
??TransmitApp_SendTheMessage?relay SYMBOL "?relay", TransmitApp_SendTheMessage

        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalRelayCtl
        FUNCTION HalRelayCtl,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_reload_timer
        FUNCTION osal_start_reload_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalRelayStatus
        FUNCTION HalRelayStatus,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalRelayCtl?relay
        FUNCTION ??HalRelayCtl?relay,00H
        EXTERN ??HalRelayStatus?relay
        FUNCTION ??HalRelayStatus?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_reload_timer?relay
        FUNCTION ??osal_start_reload_timer?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H

// D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zstack\MY_BOARD\Exp4\Source\TransmitAppRelay.c
//    1 /*******************************************************************************
//    2   Œƒ º˛ √˚£∫TransmitAppRelay.c
//    3   ◊˜    ’ﬂ£∫ƒœæ©∞≤Â∑≤©—–µÁ◊”ø∆ºº”–œﬁπ´Àæ
//    4   ¥¥Ω® ±º‰£∫2013.9.20
//    5   –ﬁ∏ƒ ±º‰£∫2020.12.22
//    6   IAR ∞Ê±æ£∫IAR for 8051 V8.10.1
//    7   ≤‚ ‘∆ΩÃ®£∫Sensor MotherBoard V2.3
//    8 
//    9   Àµ    √˜£∫
//   10   1°¢≥Ã–Úµƒ«˝∂ØŒƒº˛‘⁄hal_relay.c°£
//   11 
//   12   2°¢±æ≤ø∑÷µƒ≥Ã–Ú π”√¡À“‘œ¬µƒ±‡“Î—°œÓ£∫
//   13      HAL_UART=TRUE
//   14      HAL_UART_TEST
//   15      xPOWER_SAVING (∏√—°œÓ√ª”–¥Úø™)
//   16      
//   17      HAL_UART_TEST «Œ™”√ªß‘ˆº”µƒ±‡“Î—°œÓ£¨∏√—°œÓ÷˜“™ «Œ™¡ÀΩ‚æˆ‘⁄√ª”–LCDµƒ…Ë±∏…œ
//   18      π€≤ÏZ-Stack ‰≥ˆµƒœ‘ æ ˝æ›°£‘⁄”–LCDµƒ…Ë±∏…œ¥Úø™LCD_SUPPORTEDø…“‘π€≤ÏÕ¯¬ÁIDµ»
//   19      “ª–©ª˘±æµƒ–≈œ¢£¨¥Úø™’‚∏ˆ±‡“Î—°œÓ£¨”–¿‡À∆µƒ–ßπ˚°£ø…ΩË÷˙¥Æø⁄œ‘ æ“ª–©‘≠±æ‘⁄LCD
//   20      …œœ‘ æµƒ–≈œ¢£¨»Áπ˚¥Æø⁄”–∆‰À˚”√Õæ£¨ø…Õ®π˝πÿ±’¥À±‡“Î—°œÓ¿¥πÿ±’¥Æø⁄ ‰≥ˆµƒ ˝æ›°£
//   21      
//   22      xPOWER_SAVING—°œÓ «÷’∂À…Ë±∏(EndDevice)ø…“‘¥Úø™µƒ±‡“Î—°œÓ°£
//   23 
//   24   3°¢≥Ã–Ú π”√¡À“‘œ¬¡Ω∏ˆ ¬º˛£∫
//   25      TRANSMITAPP_SEND_MSG_EVT(∑¢ÀÕ ˝æ›)
//   26      TRANSMITAPP_MATCHRSP_EVT(√Ë ˆ∑˚∆•≈‰)
//   27 
//   28   4°¢∞¥º¸¥¶¿Ì∫Ø ˝‘⁄TransmitApp_HandleKeys( byte shift, byte keys )£¨
//   29      ±æ≤ø∑÷≥Ã–Ú π”√¡À∞¥º¸SW5£¨∞¥º¸ µœ÷¡À¿Îœﬂ«Èøˆœ¬µƒºÃµÁ∆˜øÿ÷∆π¶ƒ‹°£
//   30 
//   31   5°¢…Ë±∏◊‘∂Øº”»ÎÕ¯¬Á£¨Õ®π˝√Ë ˆ∑˚∆•≈‰ ¬º˛∂‘ƒø±Í…Ë±∏µƒÕ¯¬Áµÿ÷∑Ω¯––≤È—Ø£¨µ±∆•≈‰≥…
//   32      π¶∫Û£¨πÿ±’∏√ ¬º˛µƒ∂® ±∆˜£¨±£¥Êƒø±Í…Ë±∏µƒÕ¯¬Áµÿ÷∑£¨Ω”◊≈¥Úø™∑¢ÀÕ ˝æ› ¬º˛£¨÷‹
//   33      ∆⁄–‘µÿ∑¢ÀÕ ˝æ›°£∑¢ÀÕ ˝æ›µƒ ±º‰º‰∏Ù”…∫Í∂®“ÂTRANSMITAPP_SEND_DELAY…Ë÷√£¨–ﬁ∏ƒ
//   34      ¥À∫Í∂®“Âº¥ø…–ﬁ∏ƒ…Ë±∏∑¢ÀÕ ˝æ›µƒ÷‹∆⁄°£
//   35      ◊¢“‚£∫…Ë±∏∑¢ÀÕ ˝æ›µƒ÷‹∆⁄”Î–≠µ˜∆˜µƒ¿ÎœﬂºÏ≤‚π¶ƒ‹ «πÿ¡™µƒ£¨»Áπ˚¥À¥¶µƒ∑¢ÀÕº‰∏Ù
//   36       ±º‰π˝≥§(¥Û”⁄6s)£¨ƒ«√¥–≠µ˜∆˜æÕª·»œ∂®…Ë±∏¿Îœﬂ°£“Ú¥À£¨–ﬁ∏ƒ ±º‰º‰∏Ù–Ë“™”Î–≠µ˜
//   37      ∆˜µƒ¿ÎœﬂºÏ≤‚π¶ƒ‹–≠µ˜“ª÷¬°£
//   38 *******************************************************************************/
//   39 
//   40 /*******************************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "OSAL.h"
//   44 #include "AF.h"
//   45 #include "ZDObject.h"
//   46 #include "ZDProfile.h"
//   47 
//   48 #include "TransmitApp.h"
//   49 #include "OnBoard.h"
//   50 
//   51 #include "DebugTrace.h"
//   52 
//   53 #include <string.h>
//   54 
//   55 /* HAL */
//   56 #include "hal_led.h"
//   57 #include "hal_key.h"
//   58 #include "hal_uart.h"
//   59 #include "hal_relay.h"
//   60 
//   61 /*******************************************************************************
//   62  * MACROS
//   63  */
//   64 #define TRANSMITAPP_SEND_DELAY   1000
//   65 #define TRANSMITAPP_MATCH_DELAY  1000
//   66 
//   67 // Send with or without APS ACKs
//   68 #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
//   69 
//   70 /*******************************************************************************
//   71  * TYPEDEFS
//   72  */
//   73 
//   74 /*******************************************************************************
//   75  * GLOBAL VARIABLES
//   76  */
//   77 
//   78 // This is the buffer that is sent out as data.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   79 byte TransmitApp_Msg[ TRANSMITAPP_RELAY_DATA_LEN ];
TransmitApp_Msg:
        DS 5
        REQUIRE __INIT_XDATA_Z
//   80 
//   81 // This is the Cluster ID List and should be filled with Application
//   82 // specific cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   83 const cId_t TransmitApp_InClusterList[1] =
TransmitApp_InClusterList:
        DW 10
//   84 {
//   85   TRANSMITAPP_CLUSTERID_RELAYCTLMSG      // ºÃµÁ∆˜Ω” ’µƒøÿ÷∆√¸¡ÓID
//   86 };
//   87 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   88 const cId_t TransmitApp_OutClusterList[1] =
TransmitApp_OutClusterList:
        DW 8
//   89 {
//   90   TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG   // ºÃµÁ∆˜…œ±®◊¥Ã¨–≈œ¢√¸¡ÓID
//   91 };
//   92 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   93 const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
TransmitApp_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 8
        DATA16
        DW TransmitApp_InClusterList
        DATA8
        DB 3
        DATA16
        DW TransmitApp_OutClusterList
//   94 {
//   95   TRANSMITAPP_ENDPOINT,                  //  int    Endpoint;
//   96   TRANSMITAPP_PROFID,                    //  uint16 AppProfId[2];
//   97   TRANSMITAPP_DEVICEID,                  //  uint16 AppDeviceId[2];
//   98   TRANSMITAPP_DEVICE_VERSION,            //  int    AppDevVer:4;
//   99   TRANSMITAPP_FLAGS,                     //  int    AppFlags:4;
//  100   TRANSMITAPP_MAX_INCLUSTERS,            //  byte   AppNumInClusters;
//  101   (cId_t *)TransmitApp_InClusterList,    //  byte   *pAppInClusterList;
//  102   TRANSMITAPP_MAX_OUTCLUSTERS,           //  byte   AppNumOutClusters;
//  103   (cId_t *)TransmitApp_OutClusterList    //  byte   *pAppOutClusterList;
//  104 };
//  105 
//  106 // This is the Endpoint/Interface description.  It is defined here, but
//  107 // filled-in in TransmitApp_Init().  Another way to go would be to fill
//  108 // in the structure here and make it a "const" (in code space).  The
//  109 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  110 endPointDesc_t TransmitApp_epDesc;
TransmitApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  111 
//  112 /*******************************************************************************
//  113  * EXTERNAL VARIABLES
//  114  */
//  115 
//  116 /*******************************************************************************
//  117  * EXTERNAL FUNCTIONS
//  118  */
//  119 
//  120 /*******************************************************************************
//  121  * LOCAL VARIABLES
//  122  */
//  123 #if (HAL_UART == TRUE)
//  124 #if !defined( SERIAL_APP_PORT )
//  125 #define SERIAL_APP_PORT  0
//  126 #endif
//  127 
//  128 #if !defined( SERIAL_APP_BAUD )
//  129 #define SERIAL_APP_BAUD  HAL_UART_BR_38400
//  130 #endif
//  131 
//  132 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  133 #if !defined( SERIAL_APP_THRESH )
//  134 #define SERIAL_APP_THRESH  64
//  135 #endif
//  136 
//  137 #if !defined( SERIAL_APP_RX_SZ )
//  138 #define SERIAL_APP_RX_SZ  128
//  139 #endif
//  140 
//  141 #if !defined( SERIAL_APP_TX_SZ )
//  142 #define SERIAL_APP_TX_SZ  128
//  143 #endif
//  144 
//  145 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  146 #if !defined( SERIAL_APP_IDLE )
//  147 #define SERIAL_APP_IDLE  6
//  148 #endif
//  149 
//  150 // Loopback Rx bytes to Tx for throughput testing.
//  151 #if !defined( SERIAL_APP_LOOPBACK )
//  152 #define SERIAL_APP_LOOPBACK  FALSE
//  153 #endif
//  154 
//  155 // This is the max byte count per OTA message.
//  156 #if !defined( SERIAL_APP_TX_MAX )
//  157 #define SERIAL_APP_TX_MAX  80
//  158 #endif
//  159 #endif // HAL_UART == TURE
//  160 
//  161 // Task ID for event processing - received when TransmitApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  162 byte TransmitApp_TaskID;
TransmitApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  163 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 static byte TransmitApp_TransID;  // This is the unique message ID (counter)
TransmitApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  165 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 afAddrType_t TransmitApp_DstAddr;
TransmitApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  167 
//  168 /*******************************************************************************
//  169  * LOCAL FUNCTIONS
//  170  */
//  171 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  172 void TransmitApp_HandleKeys( byte shift, byte keys );
//  173 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  174 void TransmitApp_SendTheMessage( void );
//  175 void TransmitApp_CallBack(uint8 port, uint8 event);
//  176 
//  177 /*******************************************************************************
//  178  * NETWORK LAYER CALLBACKS
//  179  */
//  180 
//  181 /*******************************************************************************
//  182  * PUBLIC FUNCTIONS
//  183  */
//  184 
//  185 /*******************************************************************************
//  186  * @fn      TransmitApp_Init
//  187  *
//  188  * @brief   Initialization function for the Generic App Task.
//  189  *          This is called during initialization and should contain
//  190  *          any application specific initialization (ie. hardware
//  191  *          initialization/setup, table initialization, power up
//  192  *          notificaiton ... ).
//  193  *
//  194  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  195  *                    used to send messages and set timers.
//  196  *
//  197  * @return  none
//  198  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 void TransmitApp_Init( byte task_id )
TransmitApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function TransmitApp_Init
        CODE
//  200 {
        FUNCALL TransmitApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, HalRelayCtl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  201   uint16 i;
//  202   
//  203 #if (HAL_UART == TRUE)
//  204   halUARTCfg_t uartConfig;
//  205   
//  206   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  207   uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  208   uartConfig.flowControl          = FALSE;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  209   uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  210   uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  211   uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  212   uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  213   uartConfig.intEnable            = FALSE;             // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  214   uartConfig.callBackFunc         = TransmitApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??TransmitApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??TransmitApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  215   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  216 #endif
//  217     
//  218   TransmitApp_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    @DPTR,A
//  219   TransmitApp_TransID = 0;   
        MOV     DPTR,#TransmitApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  220   
//  221   // Device hardware initialization can be added here or in main() (Zmain.c).
//  222   // If the hardware is application specific - add it here.
//  223   // If the hardware is other parts of the device add it in main().
//  224   
//  225   TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#TransmitApp_DstAddr + 8
        MOVX    @DPTR,A
//  226   TransmitApp_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  227   TransmitApp_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#TransmitApp_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  228     
//  229   // Fill out the endpoint description.
//  230   TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
        MOV     DPTR,#TransmitApp_epDesc
        INC     A
        MOVX    @DPTR,A
//  231   TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
        INC     DPTR
        MOV     A,#TransmitApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  232   TransmitApp_epDesc.simpleDesc
//  233           = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
        INC     DPTR
        MOV     A,#TransmitApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  234   TransmitApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  235   
//  236   // Register the endpoint/interface description with the AF
//  237   afRegister( &TransmitApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#TransmitApp_epDesc & 0xff
        MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  238   
//  239   // Register for all key events - This app will handle all key events
//  240   RegisterForKeys( TransmitApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  241  
//  242   // Generate the data
//  243   for (i = 0; i < TRANSMITAPP_RELAY_DATA_LEN; i++)
//  244   {
//  245     TransmitApp_Msg[i] = 0;
        CLR     A
        MOV     DPTR,#TransmitApp_Msg
        MOV     R0,#0x5
??TransmitApp_Init_0:
        MOVX    @DPTR,A
        INC     DPTR
        DJNZ    R0,??TransmitApp_Init_0
//  246   }
//  247   
//  248   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  249   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  250   
//  251   // ≥ı ºªØºÃµÁ∆˜£¨¡Ω∏ˆ∂º¥¶”⁄πÿ±’◊¥Ã¨
//  252   HalRelayCtl(0x11);
        ; Setup parameters for call to function HalRelayCtl
        MOV     R1,#0x11
        LCALL   ??HalRelayCtl?relay
//  253   
//  254   // ¥Úø™∂® ±∆˜£¨√Ë ˆ∑˚∆•≈‰ ¬º˛
//  255   osal_start_reload_timer( TransmitApp_TaskID, TRANSMITAPP_MATCHRSP_EVT, 
//  256                                                TRANSMITAPP_MATCH_DELAY );
        ; Setup parameters for call to function osal_start_reload_timer
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_reload_timer?relay
//  257 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  258 
//  259 /*******************************************************************************
//  260  * @fn      TransmitApp_ProcessEvent
//  261  *
//  262  * @brief   Generic Application Task event processor.  This function
//  263  *          is called to process all events for the task.  Events
//  264  *          include timers, messages and any other user defined events.
//  265  *
//  266  * @param   task_id  - The OSAL assigned task ID.
//  267  * @param   events - events to process.  This is a bit map and can
//  268  *                   contain more than one event.
//  269  *
//  270  * @return  none
//  271  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  272 UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
TransmitApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function TransmitApp_ProcessEvent
        CODE
//  273 {
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  274   afIncomingMSGPacket_t *MSGpkt;
//  275   afDataConfirm_t *afDataConfirm;
//  276   (void)task_id;  // Intentionally unreferenced parameter
//  277 
//  278   // Data Confirmation message fields
//  279   ZStatus_t sentStatus;
//  280   byte sentEP;
//  281 
//  282   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??TransmitApp_ProcessEvent_0
//  283   {
//  284     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??TransmitApp_ProcessEvent_1
//  285     while ( MSGpkt )
//  286     {
//  287       switch ( MSGpkt->hdr.event )
//  288       {
//  289         case ZDO_CB_MSG:
//  290           TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  291           break;
//  292 
//  293         case KEY_CHANGE:
//  294           TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  295           break;
//  296 
//  297         case AF_DATA_CONFIRM_CMD:
//  298           // This message is received as a confirmation of a data packet sent.
//  299           // The status is of ZStatus_t type [defined in ZComDef.h]
//  300           // The message fields are defined in AF.h
//  301           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  302           sentEP = afDataConfirm->endpoint;
//  303           sentStatus = afDataConfirm->hdr.status;
//  304           break;
//  305 
//  306         case AF_INCOMING_MSG_CMD:
//  307           TransmitApp_MessageMSGCB( MSGpkt );
??TransmitApp_ProcessEvent_2:
        ; Setup parameters for call to function TransmitApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??TransmitApp_MessageMSGCB?relay
//  308           break;
//  309 
//  310         case ZDO_STATE_CHANGE:
//  311           break;
//  312 
//  313         default:
//  314           break;
//  315       }
//  316 
//  317       // Release the memory
//  318       osal_msg_deallocate( (uint8 *)MSGpkt );
??TransmitApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  319 
//  320       // Next
//  321       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??TransmitApp_ProcessEvent_1:
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??TransmitApp_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??TransmitApp_ProcessEvent_2
        ADD     A,#0x5a
        JZ      ??TransmitApp_ProcessEvent_5
        ADD     A,#-0x13
        JNZ     ??TransmitApp_ProcessEvent_3
        ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??TransmitApp_ProcessZDOMsgs?relay
        SJMP    ??TransmitApp_ProcessEvent_3
??TransmitApp_ProcessEvent_5:
        ; Setup parameters for call to function TransmitApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??TransmitApp_HandleKeys?relay
        SJMP    ??TransmitApp_ProcessEvent_3
//  322     }
//  323 
//  324     // Squash compiler warnings until values are used.
//  325     (void)sentStatus;
//  326     (void)sentEP;
//  327 
//  328     // Return unprocessed events
//  329     return (events ^ SYS_EVENT_MSG);
??TransmitApp_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??TransmitApp_ProcessEvent_6
//  330   }
//  331 
//  332   // Send a message out
//  333   if ( events & TRANSMITAPP_SEND_MSG_EVT )
??TransmitApp_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_ProcessEvent_7
//  334   {
//  335       TransmitApp_SendTheMessage();
        ; Setup parameters for call to function TransmitApp_SendTheMessage
        LCALL   ??TransmitApp_SendTheMessage?relay
//  336 
//  337     // Return unprocessed events
//  338     return (events ^ TRANSMITAPP_SEND_MSG_EVT);
        MOV     A,?V0 + 0
        XRL     A,#0x1
??TransmitApp_ProcessEvent_8:
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??TransmitApp_ProcessEvent_6
//  339   }
//  340   
//  341   // √Ë ˆ∆•≈‰ ¬º˛
//  342   if ( events & TRANSMITAPP_MATCHRSP_EVT )
??TransmitApp_ProcessEvent_7:
        ANL     A,#0x8
        JZ      ??TransmitApp_ProcessEvent_9
//  343   {
//  344      zAddrType_t dstAddr;
//  345      dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  346      dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  347      
//  348      ZDP_MatchDescReq( &dstAddr, 
//  349                         NWK_BROADCAST_SHORTADDR,
//  350                         TRANSMITAPP_PROFID,
//  351                         TRANSMITAPP_MAX_OUTCLUSTERS, 
//  352                         (cId_t *)TransmitApp_OutClusterList,
//  353                         TRANSMITAPP_MAX_INCLUSTERS, 
//  354                         (cId_t *)TransmitApp_InClusterList,
//  355                         FALSE );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 2,#TransmitApp_InClusterList & 0xff
        MOV     ?V0 + 3,#(TransmitApp_InClusterList >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x8
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 2,#TransmitApp_OutClusterList & 0xff
        MOV     ?V0 + 3,#(TransmitApp_OutClusterList >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 2,#0x5
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,#0x3
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  356 
//  357     // Return unprocessed events
//  358     return (events ^ TRANSMITAPP_MATCHRSP_EVT);
        MOV     A,?V0 + 0
        XRL     A,#0x8
        SJMP    ??TransmitApp_ProcessEvent_8
//  359   }
//  360 
//  361   // Discard unknown events
//  362   return 0;
??TransmitApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??TransmitApp_ProcessEvent_6:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  363 }
//  364 
//  365 /*******************************************************************************
//  366  * @fn      TransmitApp_ProcessZDOMsgs()
//  367  *
//  368  * @brief   Process response messages
//  369  *
//  370  * @param   none
//  371  *
//  372  * @return  none
//  373  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
TransmitApp_ProcessZDOMsgs:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function TransmitApp_ProcessZDOMsgs
        CODE
//  375 {
        FUNCALL TransmitApp_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  376   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_2
        CODE
//  377   {
//  378     case End_Device_Bind_rsp:
//  379       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??TransmitApp_ProcessZDOMsgs_1:
        MOV     A,R2
        ADD     A,#0x13
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??TransmitApp_ProcessZDOMsgs_2 & 0xFFFF
//  380       {
//  381 #if (HAL_UART == TRUE)
//  382         HalUARTWrite(HAL_UART_PORT_0, "Bind Success!\n",   strlen("Bind Success!\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Bind Success!\\n">` & 0xff
        MOV     R3,#(`?<Constant "Bind Success!\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??TransmitApp_ProcessZDOMsgs_2
//  383 #endif
//  384       }
//  385       break;
//  386     
//  387     case Match_Desc_rsp:
//  388       ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??TransmitApp_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  389       if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??TransmitApp_ProcessZDOMsgs_2
//  390       {
//  391         if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessZDOMsgs_3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??TransmitApp_ProcessZDOMsgs_3
//  392         {
//  393           // ¥À¥¶¥Ê¥¢∞Û∂®∂‘∑Ωµƒµÿ÷∑–≈œ¢”√”⁄∑¢ÀÕ
//  394           TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#TransmitApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  395           TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#TransmitApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  396           // Take the first endpoint, Can be changed to search through endpoints
//  397           TransmitApp_DstAddr.endPoint = pRsp->epList[0];  // ok
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#TransmitApp_DstAddr + 9
        MOVX    @DPTR,A
//  398           // ∆•≈‰≥…π¶£¨πÿ±’√Ë ˆ∑˚∆•≈‰ ¬º˛∂® ±∆˜
//  399           osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_MATCHRSP_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  400   
//  401 #if (HAL_UART == TRUE)
//  402           HalUARTWrite(HAL_UART_PORT_0, "Match Success!\n",   strlen("Match Success!\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Match Success!\\n">` & 0xff
        MOV     R3,#(`?<Constant "Match Success!\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  403 #endif
//  404           // ø™∆Ù∂® ±∑¢ÀÕ ˝æ›∏¯–≠µ˜∆˜µƒ ¬º˛
//  405           osal_start_reload_timer( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT, 
//  406                                    TRANSMITAPP_SEND_DELAY );
        ; Setup parameters for call to function osal_start_reload_timer
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_reload_timer?relay
//  407         }
//  408     
//  409         osal_mem_free( pRsp );
??TransmitApp_ProcessZDOMsgs_3:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        CFI EndBlock cfiBlock3
//  410       }
//  411       break;
//  412       
//  413     default:
//  414       break;
//  415   }
//  416 }
??TransmitApp_ProcessZDOMsgs_2:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  417 
//  418 /*******************************************************************************
//  419  * @fn      TransmitApp_HandleKeys
//  420  *
//  421  * @brief   Handles all key events for this device.
//  422  *
//  423  * @param   shift - true if in shift/alt.
//  424  * @param   keys - bit field for key events. 
//  425  *
//  426  * @return  none
//  427  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  428 void TransmitApp_HandleKeys( byte shift, byte keys )
TransmitApp_HandleKeys:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function TransmitApp_HandleKeys
        CODE
//  429 {   
        FUNCALL TransmitApp_HandleKeys, HalRelayCtl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
//  430   static uint8 relayStatusCnt;
//  431   uint8 relayCmd;
//  432   
//  433   if ( keys & HAL_KEY_SW_5 )
        MOV     C,0xE0 /* A   */.2
        JNC     ??TransmitApp_HandleKeys_0
//  434   {
//  435     relayStatusCnt++;
//  436     // ºÃµÁ∆˜”–Àƒ÷÷◊¥Ã¨
//  437     relayStatusCnt = relayStatusCnt % 4;
        MOV     DPTR,#??relayStatusCnt
        MOVX    A,@DPTR
        INC     A
        ANL     A,#0x3
        MOVX    @DPTR,A
//  438     
//  439     switch(relayStatusCnt)
        JZ      ??TransmitApp_HandleKeys_1
        DEC     A
        JZ      ??TransmitApp_HandleKeys_2
        DEC     A
        JZ      ??TransmitApp_HandleKeys_3
        DEC     A
        JZ      ??TransmitApp_HandleKeys_4
        SJMP    ??TransmitApp_HandleKeys_5
//  440     {
//  441       case 0:
//  442         relayCmd = 0x01;  // K1ø™£¨K2√ª”–≤Ÿ◊˜(◊¥Ã¨±£≥÷≤ª±‰)
??TransmitApp_HandleKeys_1:
        MOV     R1,#0x1
//  443         break;
        SJMP    ??TransmitApp_HandleKeys_5
//  444       case 1:
//  445         relayCmd = 0x02;  // K1πÿ£¨K2√ª”–≤Ÿ◊˜(◊¥Ã¨±£≥÷≤ª±‰)
??TransmitApp_HandleKeys_2:
        MOV     R1,#0x2
//  446         break;
        SJMP    ??TransmitApp_HandleKeys_5
//  447       case 2:
//  448         relayCmd = 0x20;  // K1≤ª±‰£¨K2ø™
??TransmitApp_HandleKeys_3:
        MOV     R1,#0x20
//  449         break;
        SJMP    ??TransmitApp_HandleKeys_5
//  450       case 3:
//  451         relayCmd = 0x10;  // K1≤ª±‰£¨K2πÿ
??TransmitApp_HandleKeys_4:
        MOV     R1,#0x10
//  452         break;
//  453       default:
//  454         break;
//  455     }
//  456     
//  457     // ∑¢ÀÕºÃµÁ∆˜øÿ÷∆√¸¡Ó
//  458     HalRelayCtl(relayCmd);
??TransmitApp_HandleKeys_5:
        ; Setup parameters for call to function HalRelayCtl
        LCALL   ??HalRelayCtl?relay
//  459   }
//  460 }
??TransmitApp_HandleKeys_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock5

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??relayStatusCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  461 
//  462 /*******************************************************************************
//  463  * @fn      TransmitApp_MessageMSGCB
//  464  *
//  465  * @brief   Data message processor callback.  This function processes
//  466  *          any incoming data - probably from other devices.  So, based
//  467  *          on cluster ID, perform the intended action.
//  468  *
//  469  * @param   none
//  470  *
//  471  * @return  none
//  472  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  473 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
TransmitApp_MessageMSGCB:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function TransmitApp_MessageMSGCB
        CODE
//  474 {
        FUNCALL TransmitApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_MessageMSGCB, HalRelayCtl
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  475   uint8 mode;
//  476   
//  477   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??TransmitApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??TransmitApp_MessageMSGCB_0:
        JNZ     ??TransmitApp_MessageMSGCB_1
//  478   {
//  479     case TRANSMITAPP_CLUSTERID_RELAYCTLMSG:
//  480     {
//  481       //  ’µΩµƒºÃµÁ∆˜øÿ÷∆√¸¡Ó
//  482       mode = pkt->cmd.Data[4];
        MOV     A,R2
        ADD     A,#0x22
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  483       HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  484       HalRelayCtl(mode);
        ; Setup parameters for call to function HalRelayCtl
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalRelayCtl?relay
//  485       // ≤‚ ‘ ’µΩµƒ√¸¡Ó
//  486 #if (HAL_UART == TRUE)
//  487       HalUARTWrite(HAL_UART_PORT_0, & mode,  1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  488 #endif      
//  489       break;
//  490     } 
//  491     // Could receive control messages in the future.
//  492     default:
//  493       break;
//  494   }
//  495 }
??TransmitApp_MessageMSGCB_1:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond8) CFA_SP SP+-5
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 1)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  496 
//  497 /*******************************************************************************
//  498  * @fn      TransmitApp_SendTheMessage
//  499  *
//  500  * @brief   Send "the" message.
//  501  *
//  502  * @param   none
//  503  *
//  504  * @return  none
//  505  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  506 void TransmitApp_SendTheMessage( void )
TransmitApp_SendTheMessage:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function TransmitApp_SendTheMessage
        CODE
//  507 {
        FUNCALL TransmitApp_SendTheMessage, HalRelayStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  508   uint8 tmp;
//  509   
//  510   do {
//  511       // put the sequence number in the message
//  512       tmp = HI_UINT8( TransmitApp_TransID );
??TransmitApp_SendTheMessage_0:
        MOV     DPTR,#TransmitApp_TransID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
//  513       tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??TransmitApp_SendTheMessage_1
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendTheMessage_2
??TransmitApp_SendTheMessage_1:
        MOV     R0,#0x37
//  514       TransmitApp_Msg[2] = tmp;
??TransmitApp_SendTheMessage_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#TransmitApp_Msg + 2
        MOVX    @DPTR,A
//  515       tmp = LO_UINT8( TransmitApp_TransID );
        MOV     DPTR,#TransmitApp_TransID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
//  516       tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??TransmitApp_SendTheMessage_3
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendTheMessage_4
??TransmitApp_SendTheMessage_3:
        MOV     R0,#0x37
//  517       TransmitApp_Msg[3] = tmp;
??TransmitApp_SendTheMessage_4:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#TransmitApp_Msg + 3
        MOVX    @DPTR,A
//  518   
//  519       // ≤È—ØºÃµÁ∆˜µ±«∞◊¥Ã¨
//  520       TransmitApp_Msg[4] = HalRelayStatus();
        ; Setup parameters for call to function HalRelayStatus
        LCALL   ??HalRelayStatus?relay
        MOV     A,R1
        MOV     DPTR,#TransmitApp_Msg + 4
        MOVX    @DPTR,A
//  521       
//  522       tmp = AF_DataRequest( &TransmitApp_DstAddr,                  \ 
//  523                             &TransmitApp_epDesc,                   \ 
//  524                              TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG, \ 
//  525                              TRANSMITAPP_RELAY_DATA_LEN,           \ 
//  526                              TransmitApp_Msg,                      \ 
//  527                             &TransmitApp_TransID,                  \ 
//  528                              TRANSMITAPP_TX_OPTIONS,               \ 
//  529                              AF_DEFAULT_RADIUS );
//  530 
//  531   } while (afStatus_SUCCESS == tmp);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
        MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TransmitApp_DstAddr & 0xff
        MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JZ      ??TransmitApp_SendTheMessage_0
//  532 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock10
//  533 
//  534 /*********************************************************************
//  535  * @fn      TransmitApp_CallBack
//  536  *
//  537  * @brief   ¥Æø⁄ªÿµ˜∫Ø ˝.
//  538  *
//  539  * @param   port - UART port.
//  540  * @param   event - the UART port event flag.
//  541  *
//  542  * @return  none
//  543  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  544 static void TransmitApp_CallBack(uint8 port, uint8 event)
TransmitApp_CallBack:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function TransmitApp_CallBack
        CODE
//  545 {
        ; Saved register size: 0
        ; Auto size: 0
//  546 
//  547 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock11

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_CallBack

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Bind Success!\\n">`:
        DB "Bind Success!\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Match Success!\\n">`:
        DB "Match Success!\012"

        END
// 
// 957 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//  47 bytes in segment XDATA_ROM_C
//  26 bytes in segment XDATA_Z
// 
// 999 bytes of CODE  memory
//  47 bytes of CONST memory
//  26 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
