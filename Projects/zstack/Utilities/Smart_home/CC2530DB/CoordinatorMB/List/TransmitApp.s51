///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        06/May/2021  15:26:10 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\Source\TransmitApp.c                /
//    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1003                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\ /
//                          Projects\zstack\Utilities\Smart_home\Source\Trans /
//                          mitApp.c -D LCD_SUPPORTED -D ZDO_COORDINATOR -D   /
//                          xNV_RESTORE -D HAL_UART=TRUE -D xNV_INIT -D       /
//                          xREFLECTOR -D xHAL_UART_TEST -lC                  /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\ -lA    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\Source\ -I              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\   /
//                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\include\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530MB\ -I        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\include\ -I D:\毕设\CC2530-smart_home\Project /
//                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\. /
//                          .\..\Components\mac\high_level\ -I                /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\ -I               /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\ -I D:\毕设\CC2530-smart_home\Projects\zstack\ /
//                          Utilities\Smart_home\CC2530DB\..\..\..\..\..\Comp /
//                          onents\osal\include\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          services\saddr\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\af\ -I D:\毕设\CC2530-smart_home\Projects\z /
//                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\. /
//                          .\Components\stack\nwk\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sapi\ -I D:\毕设\CC2530-smart_home\Projects /
//                          \zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\ -I                      /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sys\ -I D:\毕设\CC2530-smart_home\Projects\ /
//                          zstack\Utilities\Smart_home\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\zdo\ -I                       /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\ -I D:\毕设\CC2530-smart_home\Projects\zstac /
//                          k\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\ -Ohz                           /
//    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\Transmi /
//                          tApp.s51                                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME TransmitApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Smart_home_Display?relay,0203H
        PUBLIC ??Smart_home_Motor_cmd?relay
        FUNCTION ??Smart_home_Motor_cmd?relay,0203H
        PUBLIC ??TransmitAPP_CallBack?relay
        FUNCTION ??TransmitAPP_CallBack?relay,0203H
        PUBLIC ??TransmitApp_DeviceNWKCheck?relay
        FUNCTION ??TransmitApp_DeviceNWKCheck?relay,0203H
        PUBLIC ??TransmitApp_DisplayResults?relay
        FUNCTION ??TransmitApp_DisplayResults?relay,0203H
        PUBLIC ??TransmitApp_HandleKeys?relay
        FUNCTION ??TransmitApp_HandleKeys?relay,0203H
        PUBLIC ??TransmitApp_Init?relay
        FUNCTION ??TransmitApp_Init?relay,0203H
        PUBLIC ??TransmitApp_MessageMSGCB?relay
        FUNCTION ??TransmitApp_MessageMSGCB?relay,0203H
        PUBLIC ??TransmitApp_ProcessEvent?relay
        FUNCTION ??TransmitApp_ProcessEvent?relay,0203H
        PUBLIC ??TransmitApp_ProcessZDOMsgs?relay
        FUNCTION ??TransmitApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??TransmitApp_SendToMotorMSG?relay
        FUNCTION ??TransmitApp_SendToMotorMSG?relay,0203H
        PUBLIC ??TransmitApp_SendToRelayMSG?relay
        FUNCTION ??TransmitApp_SendToRelayMSG?relay,0203H
        PUBLIC Humit
        PUBLIC RfID
        FUNCTION Smart_home_Display,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Smart_home_Motor_cmd
        FUNCTION Smart_home_Motor_cmd,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TempLight
        PUBLIC TransmitAPP_CallBack
        FUNCTION TransmitAPP_CallBack,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC TransmitApp_DeviceNWKCheck
        FUNCTION TransmitApp_DeviceNWKCheck,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC TransmitApp_DisplayResults
        FUNCTION TransmitApp_DisplayResults,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 228, STACK
        PUBLIC TransmitApp_DstAddr
        PUBLIC TransmitApp_DstMotorAddr
        PUBLIC TransmitApp_DstRelayAddr
        PUBLIC TransmitApp_HandleKeys
        FUNCTION TransmitApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TransmitApp_InClusterList
        PUBLIC TransmitApp_Init
        FUNCTION TransmitApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC TransmitApp_MaxDataLength
        PUBLIC TransmitApp_MessageMSGCB
        FUNCTION TransmitApp_MessageMSGCB,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC TransmitApp_Msg
        PUBLIC TransmitApp_OutClusterList
        PUBLIC TransmitApp_ProcessEvent
        FUNCTION TransmitApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC TransmitApp_ProcessZDOMsgs
        FUNCTION TransmitApp_ProcessZDOMsgs,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC TransmitApp_SendToMotorMSG
        FUNCTION TransmitApp_SendToMotorMSG,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC TransmitApp_SendToRelayMSG
        FUNCTION TransmitApp_SendToRelayMSG,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC TransmitApp_SimpleDesc
        PUBLIC TransmitApp_TaskID
        PUBLIC TransmitApp_epDesc
        PUBWEAK __Constant_427a0000
        PUBLIC gasFlame
        PUBLIC infrared
        PUBLIC motor
        PUBLIC relay
        PUBLIC soundVb
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
afDataReqMTU        SYMBOL "afDataReqMTU"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
HalLedSet           SYMBOL "HalLedSet"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
AF_DataRequest      SYMBOL "AF_DataRequest"
strcpy              SYMBOL "strcpy"
_ltoa               SYMBOL "_ltoa"
strcat              SYMBOL "strcat"
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
HalLcdDisplayPercentBar SYMBOL "HalLcdDisplayPercentBar"
memcpy              SYMBOL "memcpy"
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdDisplayPercentBar?relay SYMBOL "?relay", HalLcdDisplayPercentBar
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??NLME_PermitJoiningRequest?relay SYMBOL "?relay", NLME_PermitJoiningRequest
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??_ltoa?relay       SYMBOL "?relay", _ltoa
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
??afRegister?relay  SYMBOL "?relay", afRegister
??memcpy?relay      SYMBOL "?relay", memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??strcat?relay      SYMBOL "?relay", strcat
??strcpy?relay      SYMBOL "?relay", strcpy
Smart_home_Motor_cmd SYMBOL "Smart_home_Motor_cmd"
??Smart_home_Motor_cmd?relay SYMBOL "?relay", Smart_home_Motor_cmd
TransmitAPP_CallBack SYMBOL "TransmitAPP_CallBack"
??TransmitAPP_CallBack?relay SYMBOL "?relay", TransmitAPP_CallBack
TransmitApp_DeviceNWKCheck SYMBOL "TransmitApp_DeviceNWKCheck"
??TransmitApp_DeviceNWKCheck?relay SYMBOL "?relay", TransmitApp_DeviceNWKCheck
TransmitApp_DisplayResults SYMBOL "TransmitApp_DisplayResults"
??TransmitApp_DisplayResults?relay SYMBOL "?relay", TransmitApp_DisplayResults
TransmitApp_HandleKeys SYMBOL "TransmitApp_HandleKeys"
??TransmitApp_HandleKeys?relay SYMBOL "?relay", TransmitApp_HandleKeys
TransmitApp_Init    SYMBOL "TransmitApp_Init"
??TransmitApp_Init?relay SYMBOL "?relay", TransmitApp_Init
TransmitApp_MessageMSGCB SYMBOL "TransmitApp_MessageMSGCB"
??TransmitApp_MessageMSGCB?relay SYMBOL "?relay", TransmitApp_MessageMSGCB
TransmitApp_ProcessEvent SYMBOL "TransmitApp_ProcessEvent"
??TransmitApp_ProcessEvent?relay SYMBOL "?relay", TransmitApp_ProcessEvent
TransmitApp_ProcessZDOMsgs SYMBOL "TransmitApp_ProcessZDOMsgs"
??TransmitApp_ProcessZDOMsgs?relay SYMBOL "?relay", TransmitApp_ProcessZDOMsgs
TransmitApp_SendToMotorMSG SYMBOL "TransmitApp_SendToMotorMSG"
??TransmitApp_SendToMotorMSG?relay SYMBOL "?relay", TransmitApp_SendToMotorMSG
TransmitApp_SendToRelayMSG SYMBOL "TransmitApp_SendToRelayMSG"
??TransmitApp_SendToRelayMSG?relay SYMBOL "?relay", TransmitApp_SendToRelayMSG

        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afDataReqMTU
        FUNCTION afDataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 228, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdDisplayPercentBar
        FUNCTION HalLcdDisplayPercentBar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdDisplayPercentBar?relay
        FUNCTION ??HalLcdDisplayPercentBar?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,00H
        EXTERN ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??NLME_PermitJoiningRequest?relay
        FUNCTION ??NLME_PermitJoiningRequest?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??_ltoa?relay
        FUNCTION ??_ltoa?relay,00H
        EXTERN ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??strcat?relay
        FUNCTION ??strcat?relay,00H
        EXTERN ??strcpy?relay
        FUNCTION ??strcpy?relay,00H

// D:\毕设\CC2530-smart_home\Projects\zstack\Utilities\Smart_home\Source\TransmitApp.c
//    1 /*******************************************************************************
//    2   文 件 名：TransmitApp.c
//    3   作    者：南京安宸博研电子科技有限公司
//    4   创建时间：2013.9.20
//    5   修改时间：2020.12.22
//    6   IAR 版本：IAR for 8051 V8.10.1
//    7   测试平台：MotherBoard V2.1
//    8 
//    9   说    明：
//   10   本程序实现协调器组网，采集传感器信息并在LCD上显示，且可通过按键控制设备运行。
//   11   协调器管理8个终端设备，具体如下：
//   12       1、温度与光照度传感器；2、烟雾与火焰传感器；3、继电器；4、温湿度传感器；
//   13       5、声音与震动传感器；  6、人体红外检测传感器；7、电机；8、RFID检测器。
//   14 
//   15   终端设备周期性发送信息给协调器，协调器将数据缓存起来，然后定时2s在LCD显示出来。
//   16   在终端设备中，DHT11温湿度传感器是每隔5秒采集一次，其余都是每隔1秒采集一次。
//   17  
//   18   按键：
//   19        (此处的按键标号是软件内部标号，与开发板上的标号并非一一对应)
//   20        SW1(UP)    ：行显示++(页面上翻)；
//   21        SW2(RIGHT) ：控制继电器，每按一下按键，继电器状态切换一次；
//   22        SW3(DOWN)  ：行显示--(页面下翻)；
//   23        SW4(LEFT)  ：控制直流电机，每按下一次按键，直流电机的状态切换一次；
//   24        SW5(OK)    ：显示切换，同时打开屏幕滚动显示；显示信息分为两屏，
//   25                     1、第一屏显示采集到的温湿度、光照信息、继电器和直流电机，
//   26                       由于增加电机转速显示后，需要滚动显示；
//   27                     2、取消第一屏的滚动显示；
//   28                     3、第二屏显示告警信息，第二屏四行显示不全，需要滚动显示；
//   29                     4、取消第二屏的滚动显示；
//   30        SW7(CANCEL)：打开/关闭协调器组网功能，灯亮表示允许，灯灭表示不允许。
//   31                     请注意：系统默认关闭组网功能，如有需要，请按SW7键打开。
//   32 
//   33   LCD:
//   34       显示部分，传感器信息显示事件是自动运行的，默认显示的是第一屏信息，手动
//   35       按键SW5可以切换到第二屏，第二屏默认滚动显示，再次按下按键SW5可以关闭滚
//   36       动显示，此时按键SW1和SW3可以控制滚动屏幕向上或者向下，
//   37       LCD显示举例说明：
//   38                第一屏：H:OFF T:OFF(湿度、温度设备离线)
//   39                        T:32.5C L:320L(温度32.5度，光照强度：320流明)
//   40                        K1:off K2:on(继电器K1关闭，K2打开，如果是OFF表示离线)
//   41                        Motor:Stop(电机停转，如果是OFF表示离线)
//   42                        Speed:0RPS(电机目前转速为0转/分钟)
//   43 
//   44                第二屏：Gas:OFF(烟雾传感器离线)
//   45                        Flame:OFF(火焰传感器离线)
//   46                        Sound:ON(声音传感器在线，没有报警)
//   47                        Vibrate:Alarm!(震动报警)
//   48                        Infrared:ON(人体红外检测在线，没有报警)
//   49                        Card:OFF(射频卡设备离线)
//   50                                (此行空白，因为射频卡设备离线，所以没有ID信息)
//   51   
//   52   设备在线检测：
//   53       主要是TransmitApp_DeviceNWKCheck(void)函数来检测各个设备是否在限定的时间内
//   54       发送数据，如果超时，判定设备离线。如果设备发送数据，那么相应的deviceInfo_t
//   55       结构体中的deviceNWKStatus标记为1，如果超时，标记为0，显示部分的函数只需读
//   56       取设备的网络状态就可以判定是否离线了。
//   57 *******************************************************************************/
//   58 
//   59 /*******************************************************************************
//   60  * INCLUDES
//   61  */
//   62 #include "OSAL.h"
//   63 #include "AF.h"
//   64 #include "ZDObject.h"
//   65 #include "ZDProfile.h"
//   66 #include "nwk_util.h"
//   67 
//   68 #include "TransmitApp.h"
//   69 #include "OnBoard.h"
//   70 
//   71 #include "DebugTrace.h"
//   72 #include "string.h"
//   73 
//   74 /* HAL */
//   75 #include "hal_lcd.h"
//   76 #include "hal_led.h"
//   77 #include "hal_key.h"
//   78 #include "hal_uart.h"
//   79 
//   80 /*******************************************************************************
//   81  * MACROS
//   82  */
//   83 
//   84 // 设备离线定时计数临界值
//   85 #define  DEVICE_NWK_CNT_LIMIT 3
//   86 
//   87 // Send with or without APS ACKs
//   88 #define TRANSMITAPP_TX_OPTIONS              AF_DISCV_ROUTE
//   89 
//   90 // 第一次LCD显示延时
//   91 #define TRANSMITAPP_DISPLAY_DELAY           10000
//   92 // LCD每次显示时间间隔
//   93 #define TRANSMITAPP_DISPLAY_TIMER           2000
//   94 
//   95 #define TRANSMITAPP_DEVICE_CHECK_DELAY      5000
//   96 #define TRANSMITAPP_DEVICE_CHECK_TIMER      2000 
//   97 // not used here
//   98 #define TRANSMITAPP_MATCH_TIMER     
//   99 // not used here
//  100 #define TRANSMITAPP_BIND_TIMER      
//  101 
//  102 #if defined ( TRANSMITAPP_FRAGMENTED )
//  103 #define TRANSMITAPP_MAX_DATA_LEN            225
//  104 #else
//  105 #define TRANSMITAPP_MAX_DATA_LEN            102
//  106 #endif
//  107 
//  108 /*******************************************************************************
//  109  * GLOBAL VARIABLES
//  110  */
//  111 
//  112 // This is the buffer that is sent out as data.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//  114 
//  115 // This is the Cluster ID List and should be filled with Application
//  116 // specific cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  117 const cId_t TransmitApp_InClusterList[TRANSMITAPP_MAX_INCLUSTERS] =
TransmitApp_InClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
        DW 7
        DW 8
//  118 {
//  119   TRANSMITAPP_CLUSTERID_HUMITMSG,      // 温湿度
//  120   TRANSMITAPP_CLUSTERID_TEMPLIGHTMSG,  // 温度光照
//  121   TRANSMITAPP_CLUSTERID_RFIDMSG,       // 射频卡
//  122   TRANSMITAPP_CLUSTERID_GASFLAMEMSG,   // 气体火焰
//  123   TRANSMITAPP_CLUSTERID_INFRAREDMSG,   // 人体红外
//  124   TRANSMITAPP_CLUSTERID_SOUNDVBMSG,    // 声音震动
//  125   TRANSMITAPP_CLUSTERID_MOTORSTATUSMSG,// 电机状态
//  126   TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG // 继电器状态
//  127 };
//  128 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  129 const cId_t TransmitApp_OutClusterList[TRANSMITAPP_MAX_OUTCLUSTERS] =
TransmitApp_OutClusterList:
        DATA16
        DW 9
        DW 10
        DW 11
//  130 {
//  131   TRANSMITAPP_CLUSTERID_TESTMSG,    
//  132   TRANSMITAPP_CLUSTERID_RELAYCTLMSG,   // 继电器
//  133   TRANSMITAPP_CLUSTERID_MOTORCTLMSG    // 直流电机
//  134 };
//  135 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  136 const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
TransmitApp_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 8
        DATA16
        DW TransmitApp_InClusterList
        DATA8
        DB 3
        DATA16
        DW TransmitApp_OutClusterList
//  137 {
//  138   TRANSMITAPP_ENDPOINT,                //  int    Endpoint;
//  139   TRANSMITAPP_PROFID,                  //  uint16 AppProfId[2];
//  140   TRANSMITAPP_DEVICEID,                //  uint16 AppDeviceId[2];
//  141   TRANSMITAPP_DEVICE_VERSION,          //  int    AppDevVer:4;
//  142   TRANSMITAPP_FLAGS,                   //  int    AppFlags:4;
//  143   TRANSMITAPP_MAX_INCLUSTERS,          
//  144   (cId_t *)TransmitApp_InClusterList,  
//  145   TRANSMITAPP_MAX_OUTCLUSTERS,         
//  146   (cId_t *)TransmitApp_OutClusterList  
//  147 };
//  148 
//  149 // This is the Endpoint/Interface description.  It is defined here, but
//  150 // filled-in in TransmitApp_Init().  Another way to go would be to fill
//  151 // in the structure here and make it a "const" (in code space).  The
//  152 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 endPointDesc_t TransmitApp_epDesc;    // 定义节点
TransmitApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  154 
//  155 
//  156 /*******************************************************************************
//  157  *串口配置
//  158  */
//  159 #define TRANSMIT_APP_PORT  0
//  160 // zstack default: 38400
//  161 #define TRANSMIT_APP_BAUD  HAL_UART_BR_38400
//  162 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  163 #define TRANSMIT_APP_THRESH  64
//  164 #define TRANSMIT_APP_RX_SZ  128
//  165 #define TRANSMIT_APP_TX_SZ  128
//  166 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  167 #define TRANSMIT_APP_IDLE  6
//  168 // Loopback Rx bytes to Tx for throughput testing.
//  169 #define TRANSMIT_APP_LOOPBACK  FALSE
//  170 
//  171 /*关于显示部分相关的宏*/
//  172 #define LCD_PAGE_MAX         4     //目前目录页最多4页
//  173 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 static int8 Ctrlcase = 0;    //0用来控制屏幕显示，1控制继电器，2控制电机
Ctrlcase:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 static int8 LCD_Page  =  0;  //终端状态显示
LCD_Page:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  176 /* 直流电机状态(status)定义*/
//  177 #define  HAL_MOTOR_STOP            0x01
//  178 #define  HAL_MOTOR_FORWARD         0x02
//  179 #define  HAL_MOTOR_BACKWARD        0x03
//  180 #define  MOTOR_MAX_SPEED           2400
//  181 
//  182 /*********************************************************************
//  183  * LOCAL VARIABLES
//  184  */
//  185 // 温湿度缓存, 第一个字节是湿度，第二个字节是温度(均是整数)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  186 deviceInfo_t Humit;
Humit:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  187 // 温度光照缓存, 前两个字节是温度整数和小数, 后两个字节是光照的16位整数 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  188 deviceInfo_t TempLight;
TempLight:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  189 // RFID 信息

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  190 deviceInfo_t RfID;
RfID:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  191 //气体火焰

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 deviceInfo_t gasFlame;
gasFlame:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  193 //人体红外

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 deviceInfo_t infrared;
infrared:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  195 //电机状态

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 deviceInfo_t motor;
motor:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  197 //继电器状态

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  198 deviceInfo_t relay;
relay:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  199 //声音震动

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  200 deviceInfo_t soundVb;
soundVb:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  201 
//  202 // Task ID for event processing - received when TransmitApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  203 byte TransmitApp_TaskID;
TransmitApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  204 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  205 static byte TransmitApp_RelayTransID;  // This is the unique message ID (counter)
TransmitApp_RelayTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  206 static byte TransmitApp_MotorTransID;  // This is the unique message ID (counter)
TransmitApp_MotorTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  207 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  208 afAddrType_t TransmitApp_DstAddr;
TransmitApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  209 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  210 afAddrType_t TransmitApp_DstRelayAddr;
TransmitApp_DstRelayAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  211 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  212 afAddrType_t TransmitApp_DstMotorAddr;
TransmitApp_DstMotorAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  213 
//  214 // Max Data Request Length

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  215 uint16 TransmitApp_MaxDataLength;
TransmitApp_MaxDataLength:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  216 
//  217 // LCD显示
//  218 static uint8 dispPage=1;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  219 static uint8 scrollLine=0;
scrollLine:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  220 //LCD屏幕滚动开关

        RSEG XDATA_I:XDATA:NOROOT(0)
//  221 static uint8 autoScrollEnable=1;
autoScrollEnable:
        DATA8
        DS 1
        REQUIRE `?<Initializer for autoScrollEnable>`
        REQUIRE __INIT_XDATA_I
//  222 
//  223 /*******************************************************************************
//  224  * LOCAL FUNCTIONS
//  225  */
//  226 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  227 void TransmitApp_HandleKeys( byte shift, byte keys );
//  228 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  229 void TransmitApp_SendToRelayMSG( uint8 cmd );
//  230 void TransmitApp_SendToMotorMSG( uint8 cmd,uint8 speed );
//  231 void TransmitAPP_CallBack(uint8 port, uint8 event);
//  232 void TransmitApp_DisplayResults( uint8 dispPage, uint8 *scrollLine);
//  233 void TransmitApp_DeviceNWKCheck(void);
//  234 void Smart_home_Display(void);
//  235 
//  236 /*******************************************************************************
//  237  * @fn      TransmitApp_Init
//  238  *
//  239  * @brief   Initialization function for the Generic App Task.
//  240  *          This is called during initialization and should contain
//  241  *          any application specific initialization (ie. hardware
//  242  *          initialization/setup, table initialization, power up
//  243  *          notificaiton ... ).
//  244  *
//  245  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  246  *                    used to send messages and set timers.
//  247  *
//  248  * @return  none
//  249  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  250 void TransmitApp_Init( byte task_id )
TransmitApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function TransmitApp_Init
        CODE
//  251 {
        FUNCALL TransmitApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 31
        MOV     A,#-0x1f
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R1
        MOV     R6,A
//  252 #if HAL_UART==TRUE
//  253   halUARTCfg_t uartConfig;
//  254 
//  255   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  256   uartConfig.baudRate             = TRANSMIT_APP_BAUD;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  257   uartConfig.flowControl          = FALSE;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  258   uartConfig.flowControlThreshold = TRANSMIT_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        LCALL   ??Subroutine45_0 & 0xFFFF
//  259   uartConfig.rx.maxBufSize        = TRANSMIT_APP_RX_SZ;  // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_100:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  260   uartConfig.tx.maxBufSize        = TRANSMIT_APP_TX_SZ;  // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_103:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  261   uartConfig.idleTimeout          = TRANSMIT_APP_IDLE;   // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_104:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  262   uartConfig.intEnable            = FALSE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  263   uartConfig.callBackFunc         = TransmitAPP_CallBack;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??TransmitAPP_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??TransmitAPP_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  264   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  265 #endif
//  266   
//  267 #if !defined ( TRANSMITAPP_FRAGMENTED )
//  268   afDataReqMTU_t mtu;
//  269 #endif
//  270   uint16 i;
//  271 
//  272   TransmitApp_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    @DPTR,A
//  273   TransmitApp_RelayTransID = 0;
        MOV     DPTR,#TransmitApp_RelayTransID
        CLR     A
        MOVX    @DPTR,A
//  274   TransmitApp_MotorTransID = 0;
        MOV     DPTR,#TransmitApp_MotorTransID
        MOVX    @DPTR,A
//  275 
//  276   // Device hardware initialization can be added here or in main() (Zmain.c).
//  277   // If the hardware is application specific - add it here.
//  278   // If the hardware is other parts of the device add it in main().
//  279 
//  280   //TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
//  281   //TransmitApp_DstAddr.endPoint = 0;
//  282   //TransmitApp_DstAddr.addr.shortAddr = 0;
//  283 
//  284   // Fill out the endpoint description.
//  285   // 初始化节点
//  286   TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;   // 端口号
        MOV     DPTR,#TransmitApp_epDesc
        INC     A
        MOVX    @DPTR,A
//  287   TransmitApp_epDesc.task_id = &TransmitApp_TaskID;     // 任务ID
        INC     DPTR
        MOV     A,#TransmitApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  288   TransmitApp_epDesc.simpleDesc                         // 简单描述符来描述端口
//  289             = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
        INC     DPTR
        MOV     A,#TransmitApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
        LCALL   ??Subroutine45_0 & 0xFFFF
//  290   TransmitApp_epDesc.latencyReq = noLatencyReqs;
//  291 
//  292   // Register the endpoint/interface description with the AF
//  293   afRegister( &TransmitApp_epDesc );
??CrossCallReturnLabel_99:
        ; Setup parameters for call to function afRegister
        MOV     R2,#TransmitApp_epDesc & 0xff
        MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  294 
//  295   // Register for all key events - This app will handle all key events
//  296   RegisterForKeys( TransmitApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  297 
//  298   // Update the display
//  299 #if defined ( LCD_SUPPORTED )
//  300   HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "TransmitApp">` & 0xff
        MOV     R3,#(`?<Constant "TransmitApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  301 #endif
//  302 
//  303   // Set the data length
//  304 #if defined ( TRANSMITAPP_FRAGMENTED )
//  305   TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
//  306 #else
//  307   mtu.kvp        = FALSE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  308   mtu.aps.secure = FALSE;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  309   TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
        ; Setup parameters for call to function afDataReqMTU
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        MOV     DPTR,#TransmitApp_MaxDataLength
        LCALL   ??Subroutine45_0 & 0xFFFF
//  310 #endif
//  311 
//  312   // 发送数据清零
//  313   for (i = 0; i < TransmitApp_MaxDataLength; i++)
??CrossCallReturnLabel_101:
        MOV     DPTR,#TransmitApp_MaxDataLength
        MOVX    A,@DPTR
        JZ      ??TransmitApp_Init_0
//  314   {
//  315     TransmitApp_Msg[i] = 0;
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPTR,#TransmitApp_Msg
??TransmitApp_Init_1:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        ORL     A,R0
        JNZ     ??TransmitApp_Init_1
//  316   }
//  317 
//  318   // 注册两个MSG
//  319   // 绑定需要一种即可, 无需两种?????
//  320   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
??TransmitApp_Init_0:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  321   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  322   
//  323   // 打开显示，第一次延时周期较长
//  324   osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DISPLAY_EVT, 
//  325                       TRANSMITAPP_DISPLAY_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x10
        MOV     R5,#0x27
        LCALL   ?Subroutine15 & 0xFFFF
//  326   
//  327   // 打开设备在线检测，第一次开启检测延时较长时间
//  328   osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DEVICE_CHECK_EVT, 
//  329                       TRANSMITAPP_DEVICE_CHECK_DELAY);
??CrossCallReturnLabel_83:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#-0x80
        LCALL   ??Subroutine40_0 & 0xFFFF
//  330   
//  331   // 关闭LED灯(D4)，表示协调器默认不允许组网
//  332   NLME_PermitJoiningRequest(0x00);
??CrossCallReturnLabel_85:
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        LCALL   ??NLME_PermitJoiningRequest?relay
//  333   HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  334   
//  335   // 设备离线状态检测初始化，初始化为离线
//  336   Humit.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#Humit
        MOV     A,#0x2
        MOVX    @DPTR,A
//  337   TempLight.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#TempLight
        MOVX    @DPTR,A
//  338   RfID.deviceNWKStatus      = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#RfID
        MOVX    @DPTR,A
//  339   gasFlame.deviceNWKStatus  = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#gasFlame
        MOVX    @DPTR,A
//  340   infrared.deviceNWKStatus  = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#infrared
        MOVX    @DPTR,A
//  341   soundVb.deviceNWKStatus   = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#soundVb
        MOVX    @DPTR,A
//  342   motor.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#motor
        MOVX    @DPTR,A
//  343   relay.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#relay
        MOVX    @DPTR,A
//  344 }
        MOV     A,#0x1f
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  345 
//  346 /*******************************************************************************
//  347  * @fn      TransmitApp_ProcessEvent
//  348  *
//  349  * @brief   Generic Application Task event processor.  This function
//  350  *          is called to process all events for the task.  Events
//  351  *          include timers, messages and any other user defined events.
//  352  *
//  353  * @param   task_id  - The OSAL assigned task ID.
//  354  * @param   events - events to process.  This is a bit map and can
//  355  *                   contain more than one event.
//  356  *
//  357  * @return  none
//  358  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  359 UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
TransmitApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function TransmitApp_ProcessEvent
        CODE
//  360 {
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_DeviceNWKCheck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, Smart_home_Display
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  361   afIncomingMSGPacket_t *MSGpkt;
//  362   afDataConfirm_t *afDataConfirm;
//  363   (void)task_id;  // Intentionally unreferenced parameter
//  364 
//  365   // Data Confirmation message fields
//  366   ZStatus_t sentStatus;
//  367   byte sentEP;
//  368 
//  369   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??TransmitApp_ProcessEvent_0
//  370   {
//  371     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??TransmitApp_ProcessEvent_1
//  372     while ( MSGpkt )
//  373     {
//  374       switch ( MSGpkt->hdr.event )
//  375       {
//  376         case ZDO_CB_MSG:
//  377           TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  378           break;
//  379 
//  380         case KEY_CHANGE:
//  381           TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  382           break;
//  383 
//  384         case AF_DATA_CONFIRM_CMD:
//  385           // This message is received as a confirmation of a data packet sent.
//  386           // The status is of ZStatus_t type [defined in ZComDef.h]
//  387           // The message fields are defined in AF.h
//  388           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  389           sentEP = afDataConfirm->endpoint;
//  390           sentStatus = afDataConfirm->hdr.status;
//  391  
//  392           if ( (ZSuccess == sentStatus) &&
//  393                (TransmitApp_epDesc.endPoint == sentEP) )
//  394           {  
//  395           }
//  396           break;
//  397 
//  398         case AF_INCOMING_MSG_CMD:
//  399           TransmitApp_MessageMSGCB( MSGpkt );
??TransmitApp_ProcessEvent_2:
        ; Setup parameters for call to function TransmitApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??TransmitApp_MessageMSGCB?relay
//  400           break;
//  401 
//  402         case ZDO_STATE_CHANGE:
//  403           break;
//  404 
//  405         default:
//  406           break;
//  407       }
//  408 
//  409       // Release the memory
//  410       osal_msg_deallocate( (uint8 *)MSGpkt );
??TransmitApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  411 
//  412       // Next
//  413       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??TransmitApp_ProcessEvent_1:
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??TransmitApp_ProcessEvent_4
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??TransmitApp_ProcessEvent_2
        ADD     A,#0x5a
        JNZ     ??TransmitApp_ProcessEvent_3
        ; Setup parameters for call to function TransmitApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??TransmitApp_HandleKeys?relay
        SJMP    ??TransmitApp_ProcessEvent_3
//  414     }
//  415 
//  416     // Squash compiler warnings until values are used.
//  417     (void)sentStatus;
//  418     (void)sentEP;
//  419 
//  420     // Return unprocessed events
//  421     return (events ^ SYS_EVENT_MSG);
??TransmitApp_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??TransmitApp_ProcessEvent_5:
        MOV     R3,A
        SJMP    ??TransmitApp_ProcessEvent_6
//  422   }
//  423 
//  424   // Send a message out, 本实验协调器没有周期发送数任务
//  425   if ( events & TRANSMITAPP_SEND_MSG_EVT )
??TransmitApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_ProcessEvent_7
//  426   {      
//  427     // Return unprocessed events
//  428     return (events ^ TRANSMITAPP_SEND_MSG_EVT);
        XRL     A,#0x1
??TransmitApp_ProcessEvent_8:
        MOV     R2,A
        SJMP    ??TransmitApp_ProcessEvent_6
//  429   }
//  430   
//  431   // 设备状态检查事件
//  432   if ( events & TRANSMITAPP_DEVICE_CHECK_EVT )
??TransmitApp_ProcessEvent_7:
        ANL     A,#0x80
        JZ      ??TransmitApp_ProcessEvent_9
//  433   {
//  434     // 调用设备网络状态监测函数
//  435     TransmitApp_DeviceNWKCheck(); 
        ; Setup parameters for call to function TransmitApp_DeviceNWKCheck
        LCALL   ??TransmitApp_DeviceNWKCheck?relay
//  436     
//  437     // 任务需要周期性运行
//  438     osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DEVICE_CHECK_EVT, 
//  439                         TRANSMITAPP_DEVICE_CHECK_TIMER);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#-0x80
        LCALL   ??Subroutine40_0 & 0xFFFF
//  440     
//  441     // Return unprocessed events
//  442     return (events ^ TRANSMITAPP_DEVICE_CHECK_EVT);
??CrossCallReturnLabel_86:
        MOV     A,R6
        XRL     A,#0x80
??TransmitApp_ProcessEvent_10:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??TransmitApp_ProcessEvent_5
//  443   }
//  444  
//  445 
//  446   // LCD显示事件
//  447   if ( events & TRANSMITAPP_DISPLAY_EVT )
??TransmitApp_ProcessEvent_9:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??TransmitApp_ProcessEvent_11
//  448   {
//  449     // 如果滚屏功能打开，自动向上滚动一行
//  450     if (autoScrollEnable == 1)
        MOV     DPTR,#autoScrollEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_ProcessEvent_12
//  451     {
//  452         scrollLine++;
        MOV     DPTR,#scrollLine
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  453     }
//  454     // 刷新显示数据
//  455     //TransmitApp_DisplayResults( dispPage, &scrollLine);
//  456     Smart_home_Display();
??TransmitApp_ProcessEvent_12:
        ; Setup parameters for call to function Smart_home_Display
        LCALL   ??Smart_home_Display?relay
//  457     
//  458     // 周期性的调用该事件来刷新显示数据
//  459     osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DISPLAY_EVT, 
//  460                         TRANSMITAPP_DISPLAY_TIMER );   
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        LCALL   ?Subroutine15 & 0xFFFF
//  461     // Return unprocessed events
//  462     return (events ^ TRANSMITAPP_DISPLAY_EVT);
??CrossCallReturnLabel_84:
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??TransmitApp_ProcessEvent_10
//  463   }
//  464 
//  465   // TRANSMITAPP_MATCHRSP_EVT事件预留
//  466   if ( events & TRANSMITAPP_MATCHRSP_EVT )
??TransmitApp_ProcessEvent_11:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??TransmitApp_ProcessEvent_13
//  467   {  
//  468     return (events ^ TRANSMITAPP_MATCHRSP_EVT);
        MOV     A,R6
        XRL     A,#0x8
        SJMP    ??TransmitApp_ProcessEvent_8
//  469   }
//  470   // TRANSMITAPP_BINDRSP_EVT事件预留
//  471   if ( events & TRANSMITAPP_BINDRSP_EVT )
??TransmitApp_ProcessEvent_13:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??TransmitApp_ProcessEvent_14
//  472   {
//  473     return (events ^ TRANSMITAPP_BINDRSP_EVT);
        MOV     A,R6
        XRL     A,#0x20
        SJMP    ??TransmitApp_ProcessEvent_8
//  474   }
//  475   
//  476   // Discard unknown events
//  477   return 0;
??TransmitApp_ProcessEvent_14:
        MOV     R2,#0x0
        MOV     R3,#0x0
??TransmitApp_ProcessEvent_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  478 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,#0x10
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_85
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
//  479 
//  480 /*******************************************************************************
//  481  * Event Generation Functions
//  482  */
//  483 /*******************************************************************************
//  484  * @fn      TransmitApp_ProcessZDOMsgs()
//  485  *
//  486  * @brief   Process response messages
//  487  *
//  488  * @param   none
//  489  *
//  490  * @return  none
//  491  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
TransmitApp_ProcessZDOMsgs:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function TransmitApp_ProcessZDOMsgs
        CODE
//  493 {
        ; Saved register size: 0
        ; Auto size: 0
//  494   /*
//  495   switch ( inMsg->clusterID )
//  496   {
//  497     // 绑定信息处理
//  498     case End_Device_Bind_rsp:
//  499       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  500       {
//  501         osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BINDRSP_EVT);
//  502 #if defined ( LCD_SUPPORTED )
//  503         HalLcdWriteString( "BindSuccess", HAL_LCD_LINE_3 );
//  504 #endif
//  505       }
//  506       break;
//  507 
//  508     // 描述符匹配信息处理 
//  509     case Match_Desc_rsp:
//  510       ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  511       if ( pRsp )
//  512       {
//  513         if ( pRsp->status == ZSuccess && pRsp->cnt )
//  514         {
//  515           osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_MATCHRSP_EVT);
//  516 
//  517 #if defined ( LCD_SUPPORTED )
//  518           HalLcdWriteString( "MatchSuccess", HAL_LCD_LINE_3 );
//  519 #endif
//  520          }
//  521          osal_mem_free( pRsp );
//  522       }
//  523       break;
//  524   }*/
//  525 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
//  526 
//  527 /*********************************************************************
//  528  * @fn      Smart_home_Motor_cmd
//  529  * 
//  530  * @brief   通过电机速度判断电机转向
//  531  * 
//  532  * 
//  533  * @param   uint8 电机转速
//  534  * 
//  535  * @return  
//  536  *          #define  HAL_MOTOR_STOP            0x01
//  537  *          #define  HAL_MOTOR_FORWARD         0x02
//  538  *          #define  HAL_MOTOR_BACKWARD        0x03
//  539  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 void Smart_home_Motor_cmd(int8 speed)
Smart_home_Motor_cmd:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Smart_home_Motor_cmd
        CODE
//  541 {
        FUNCALL Smart_home_Motor_cmd, TransmitApp_SendToMotorMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  542   uint8 outspeed;
//  543   uint8 cmd;
//  544   if(speed == 0)
        JNZ     ??Smart_home_Motor_cmd_0
//  545   {
//  546     outspeed = 0;
??Smart_home_Motor_cmd_1:
        MOV     R7,#0x0
//  547     cmd = HAL_MOTOR_STOP;
        MOV     R1,#0x1
        SJMP    ??Smart_home_Motor_cmd_2
//  548   }   
//  549   else if(speed > 0)
??Smart_home_Motor_cmd_0:
        CLR     C
        SUBB    A,#0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        MOV     A,R6
        JC      ??Smart_home_Motor_cmd_3
//  550   {
//  551     outspeed = speed;
        MOV     R7,A
//  552     cmd = HAL_MOTOR_FORWARD;
        MOV     R1,#0x2
        SJMP    ??Smart_home_Motor_cmd_2
//  553   }
//  554   
//  555   else if(speed < 0)
??Smart_home_Motor_cmd_3:
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??Smart_home_Motor_cmd_1
//  556   {
//  557     outspeed = 0xff - speed;
        MOV     A,#-0x1
        CLR     C
        SUBB    A,R6
        MOV     R7,A
//  558     cmd = HAL_MOTOR_BACKWARD;
        MOV     R1,#0x3
//  559   }
//  560   
//  561   else
//  562   {
//  563     outspeed = 0;
//  564     cmd = HAL_MOTOR_STOP;    
//  565   }
//  566   TransmitApp_SendToMotorMSG(cmd,outspeed); 
??Smart_home_Motor_cmd_2:
        ; Setup parameters for call to function TransmitApp_SendToMotorMSG
        MOV     A,R7
        MOV     R2,A
        LCALL   ??TransmitApp_SendToMotorMSG?relay
//  567 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock12
//  568 
//  569 /*******************************************************************************
//  570  * @fn      TransmitApp_HandleKeys
//  571  *
//  572  * @brief   Handles all key events for this device.
//  573  *
//  574  * @param   shift - true if in shift/alt.
//  575  * @param   keys - bit field for key events. Valid entries:
//  576  *                 HAL_KEY_SW_1--UP
//  577  *                 HAL_KEY_SW_2--RIGHT
//  578  *                 HAL_KEY_SW_3--DOWN
//  579  *                 HAL_KEY_SW_4--LEFT
//  580  *                 HAL_KEY_SW_5--OK
//  581  *                 HAL_KEY_SW_7--CANCEL
//  582  *
//  583  * @return  none
//  584  */
//  585 /*
//  586 void TransmitApp_HandleKeys( byte shift, byte keys )
//  587 {
//  588   static uint8 dispCnt ;
//  589   static uint8 relayCmd;
//  590   static uint8 relayStatusCnt = 0;
//  591   static uint8 motorStatusCnt = 0;
//  592   static uint8 networkPermitEn = 0;
//  593     
//  594   // 手动使屏幕向上滚动(HAL_KEY_SW_1--UP)
//  595   if ( keys & HAL_KEY_UP )
//  596   {
//  597     scrollLine--;
//  598   }
//  599     
//  600   // 继电器控制(HAL_KEY_SW_2--RIGHT)，共4种状态
//  601   if ( keys & HAL_KEY_RIGHT )
//  602   {
//  603     relayStatusCnt++;
//  604     // 继电器有四种状态
//  605     relayStatusCnt = relayStatusCnt % 4;
//  606     
//  607     switch(relayStatusCnt)
//  608     {
//  609       case 0:
//  610         relayCmd = 0x01;  // K1开，K2没有操作(状态保持不变)
//  611         break;
//  612       case 1:
//  613         relayCmd = 0x02;  // K1关，K2没有操作(状态保持不变)
//  614         break;
//  615       case 2:
//  616         relayCmd = 0x20;  // K1不变，K2开
//  617         break;
//  618       case 3:
//  619         relayCmd = 0x10;  // K1不变，K2关
//  620         break;
//  621       default:
//  622         break;
//  623     }
//  624     
//  625     // 发送继电器控制命令
//  626     TransmitApp_SendToRelayMSG( relayCmd );   
//  627       
//  628 #if defined ( LCD_SUPPORTED )
//  629     HalLcdWriteString( "RelayCtl", HAL_LCD_LINE_4 );
//  630 #endif
//  631     }
//  632 
//  633   // 手动使屏幕向下滚动(HAL_KEY_SW_3--DOWN)
//  634   if ( keys & HAL_KEY_DOWN )
//  635   {
//  636     scrollLine++;;
//  637   }
//  638 
//  639   // 电机控制(HAL_KEY_SW_4--LEFT), 共8种状态
//  640   if ( keys & HAL_KEY_LEFT )
//  641   {
//  642     motorStatusCnt++;
//  643     motorStatusCnt = motorStatusCnt % 8;
//  644     
//  645     switch(motorStatusCnt)
//  646     {
//  647       case 0:  
//  648         TransmitApp_SendToMotorMSG(1, 0); // 电机停止
//  649         break;
//  650       case 1: 
//  651         TransmitApp_SendToMotorMSG(2, 10); // 电机正转，转速10转/秒
//  652         break;
//  653       case 2: 
//  654         TransmitApp_SendToMotorMSG(2, 30); // 电机正转，转速30转/秒
//  655         break;
//  656       case 3: 
//  657         TransmitApp_SendToMotorMSG(2, 50); // 电机正转，转速50转/秒
//  658         break;
//  659       case 4: 
//  660         TransmitApp_SendToMotorMSG(1, 0); // 电机停止
//  661         break;
//  662       case 5: 
//  663         TransmitApp_SendToMotorMSG(3, 10); // 电机反转，转速10转/秒
//  664         break;
//  665       case 6: 
//  666         TransmitApp_SendToMotorMSG(3, 30); // 电机反转，转速30转/分钟
//  667         break;
//  668       case 7: 
//  669         TransmitApp_SendToMotorMSG(3, 50); // 电机反转，转速50转/分钟
//  670         break;
//  671       default:
//  672         break;
//  673     }    
//  674 #if defined ( LCD_SUPPORTED )
//  675     HalLcdWriteString( "MotorCtl", HAL_LCD_LINE_4 );
//  676 #endif
//  677   }
//  678     
//  679   // LCD页面切换(HAL_KEY_SW_5--OK)，共4种状态
//  680   if ( keys & HAL_KEY_OK )
//  681   {
//  682     dispCnt++;
//  683     dispCnt = dispCnt % 4;
//  684     
//  685     switch(dispCnt)
//  686     {
//  687       case 0:   // 第1屏，打开滚屏
//  688         autoScrollEnable = 1;
//  689         dispPage = 1;
//  690         break;
//  691       case 1:   // 第1屏，关闭滚屏
//  692         autoScrollEnable = 0;
//  693         dispPage = 1; 
//  694         break;
//  695       case 2:   // 第2屏，打开滚屏
//  696         autoScrollEnable = 1;
//  697         dispPage = 2; 
//  698         break;
//  699       case 3:   // 第2屏，关闭滚屏
//  700         autoScrollEnable = 0;
//  701         dispPage = 2; 
//  702         dispCnt = 0;
//  703         break;
//  704       default:
//  705         break;
//  706     }
//  707   }
//  708     
//  709   // 组网开关(HAL_KEY_SW_7--CANCEL)
//  710   if ( keys & HAL_KEY_CANCEL )
//  711   {
//  712     networkPermitEn++;
//  713     networkPermitEn = networkPermitEn % 2;
//  714     if (networkPermitEn == 1)
//  715     {
//  716       NLME_PermitJoiningRequest(0xFF); // 允许组网
//  717       HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
//  718     }
//  719     else if (networkPermitEn == 0)
//  720     {
//  721       NLME_PermitJoiningRequest(0x00); // 不允许组网
//  722       HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
//  723     }
//  724   }
//  725 }
//  726 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  727 void TransmitApp_HandleKeys( byte shift, byte keys )
TransmitApp_HandleKeys:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function TransmitApp_HandleKeys
        CODE
//  728 {
        FUNCALL TransmitApp_HandleKeys, TransmitApp_SendToRelayMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, Smart_home_Motor_cmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, TransmitApp_SendToRelayMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, Smart_home_Motor_cmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  729   //zAddrType_t txAddr;
//  730   static int8 MotorSpeed = 0;
//  731   static uint8 NetWorkAllow = 0;
//  732   /*这里这么设置似乎会出现内存问题
//  733   static uint8 Relay1_on = 0x02;  //两个默认都是关闭
//  734   static uint8 Relay2_on = 0x10;
//  735   */
//  736   /*3.21 LCD 显示*/
//  737   static uint8 Relay1_on = 0;  //两个默认都是关闭
//  738   static uint8 Relay2_on = 0;
//  739   
//  740   
//  741   if ( keys & HAL_KEY_SW_1 )  //UP
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_HandleKeys_0
//  742   {
//  743     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??TransmitApp_HandleKeys_1
        DEC     A
        JZ      ??TransmitApp_HandleKeys_2
//  744     {
//  745       default:    
//  746       case 0:
//  747       {
//  748         if(LCD_Page < LCD_PAGE_MAX)       {LCD_Page++;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_32:
        JNC     ??TransmitApp_HandleKeys_3
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  749         if(LCD_Page > LCD_PAGE_MAX - 1)       {LCD_Page = 0;}
??TransmitApp_HandleKeys_3:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_33:
        JC      ??TransmitApp_HandleKeys_0
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??TransmitApp_HandleKeys_0
//  750         break;
//  751       }
//  752       case 1:
//  753       {  
//  754         uint8 switch1;
//  755         if(Relay1_on == 0)  {Relay1_on = 1 ; switch1 = 0x02;}
??TransmitApp_HandleKeys_1:
        MOV     DPTR,#??Relay1_on
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_HandleKeys_4
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x2
        SJMP    ??TransmitApp_HandleKeys_5
//  756         else if(Relay1_on == 1)  {Relay1_on = 0; switch1 = 0x01;}
??TransmitApp_HandleKeys_4:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  757         else  {Relay1_on = 0; switch1 = 0x01;}       
//  758         TransmitApp_SendToRelayMSG(switch1);  
??TransmitApp_HandleKeys_5:
        ; Setup parameters for call to function TransmitApp_SendToRelayMSG
        LCALL   ??TransmitApp_SendToRelayMSG?relay
//  759         break;
        SJMP    ??TransmitApp_HandleKeys_0
//  760       } 
//  761       case 2:
//  762       {
//  763         if(MotorSpeed < 50)     {MotorSpeed += 10;}
??TransmitApp_HandleKeys_2:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_42:
        JNC     ??TransmitApp_HandleKeys_6
        MOVX    A,@DPTR
        ADD     A,#0xa
        MOVX    @DPTR,A
//  764         if(MotorSpeed >= 50)     
??TransmitApp_HandleKeys_6:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_43:
        JC      ??TransmitApp_HandleKeys_7
//  765         {
//  766 #if defined ( LCD_SUPPORTED )
//  767            HalLcdWriteString( "Motor max Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor max Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor max Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  768 #endif 
//  769            MotorSpeed = 50;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#0x32
        MOVX    @DPTR,A
//  770         }
//  771         Smart_home_Motor_cmd(MotorSpeed);
??TransmitApp_HandleKeys_7:
        ; Setup parameters for call to function Smart_home_Motor_cmd
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Smart_home_Motor_cmd?relay
//  772         
//  773         break;
//  774       }
//  775          
//  776     }    
//  777   }
//  778   
//  779   if ( keys & HAL_KEY_SW_3 )  //DOWN
??TransmitApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??TransmitApp_HandleKeys_8
//  780   {
//  781     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??TransmitApp_HandleKeys_9
        DEC     A
        JZ      ??TransmitApp_HandleKeys_10
//  782     {
//  783       default:    
//  784       case 0:
//  785       {
//  786         if(LCD_Page >= 0)       {LCD_Page--;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      ??TransmitApp_HandleKeys_11
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  787         if(LCD_Page < 0)        {LCD_Page = LCD_PAGE_MAX;}
??TransmitApp_HandleKeys_11:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_23:
        JNC     ??TransmitApp_HandleKeys_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        SJMP    ??TransmitApp_HandleKeys_8
//  788         break;
//  789       }
//  790       case 1:  
//  791       {
//  792         uint8 switch2;
//  793         if(Relay2_on == 0)  {Relay2_on = 1 ; switch2 = 0x20;}
??TransmitApp_HandleKeys_9:
        MOV     DPTR,#??Relay2_on
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_HandleKeys_12
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x20
        SJMP    ??TransmitApp_HandleKeys_13
//  794         else if(Relay2_on == 1)  {Relay2_on = 0; switch2 = 0x10;}
??TransmitApp_HandleKeys_12:
        XRL     A,#0x1
        JNZ     ??TransmitApp_HandleKeys_14
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x10
        SJMP    ??TransmitApp_HandleKeys_13
//  795         else  {Relay2_on = 0; switch2 = 0x01;}       
??TransmitApp_HandleKeys_14:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  796         TransmitApp_SendToRelayMSG(switch2);       
??TransmitApp_HandleKeys_13:
        ; Setup parameters for call to function TransmitApp_SendToRelayMSG
        LCALL   ??TransmitApp_SendToRelayMSG?relay
//  797         break;
        SJMP    ??TransmitApp_HandleKeys_8
//  798       } 
//  799       case 2:
//  800       {
//  801         /*
//  802         #define  HAL_MOTOR_STOP            0x01
//  803         #define  HAL_MOTOR_FORWORD         0x02
//  804         #define  HAL_MOTOR_BACKWORD        0x03*/
//  805         if(MotorSpeed > -50)     {MotorSpeed -= 10;}
??TransmitApp_HandleKeys_10:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_44:
        JC      ??TransmitApp_HandleKeys_15
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOVX    @DPTR,A
//  806         if(MotorSpeed <= -50)     
??TransmitApp_HandleKeys_15:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_45:
        JNC     ??TransmitApp_HandleKeys_16
//  807         {
//  808 #if defined ( LCD_SUPPORTED )
//  809            HalLcdWriteString( "Motor min Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor min Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor min Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  810 #endif 
//  811            MotorSpeed = -80;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#-0x50
        MOVX    @DPTR,A
//  812         }
//  813         Smart_home_Motor_cmd(MotorSpeed);
??TransmitApp_HandleKeys_16:
        ; Setup parameters for call to function Smart_home_Motor_cmd
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Smart_home_Motor_cmd?relay
//  814         break; 
//  815       }
//  816     }
//  817   }
//  818   
//  819   if ( keys & HAL_KEY_SW_2 )  //RIGHT  
??TransmitApp_HandleKeys_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??TransmitApp_HandleKeys_17
//  820   /*3.22 这里在调试时出现问题，具体问题为 点击up时会出现屏幕变为禁止组网
//  821     控制方面变为控制电机，问题在于汇编中的key值会出现  keys & HAL_KEY_SW_2 = 2
//  822     的情况，暂时禁止，需要等待研究  还有key_7*/
//  823   {
//  824      if(Ctrlcase < 3)   { Ctrlcase++;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_46:
        JNC     ??TransmitApp_HandleKeys_18
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  825      if(Ctrlcase > 2)   { Ctrlcase=0;}
??TransmitApp_HandleKeys_18:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_47:
        JC      ??TransmitApp_HandleKeys_17
        CLR     A
        MOVX    @DPTR,A
//  826      //Smart_home_Key_add(Ctrlcase);
//  827   }
//  828   
//  829   if ( keys & HAL_KEY_SW_4 )  //LEFT
??TransmitApp_HandleKeys_17:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.3
        JNC     ??TransmitApp_HandleKeys_19
//  830   {
//  831      if(Ctrlcase > -1)   { Ctrlcase--;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        JC      ??TransmitApp_HandleKeys_20
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  832      if(Ctrlcase < 0)    { Ctrlcase=2;}
??TransmitApp_HandleKeys_20:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        JNC     ??TransmitApp_HandleKeys_19
        MOV     A,#0x2
        MOVX    @DPTR,A
//  833      //Smart_home_Key_add(Ctrlcase);    
//  834   }
//  835   
//  836   if ( keys & HAL_KEY_SW_5 )  //OK
//  837   {
//  838 
//  839   }
//  840   
//  841   if ( keys & HAL_KEY_SW_7 )  //CENCEL
??TransmitApp_HandleKeys_19:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.6
        JNC     ??TransmitApp_HandleKeys_21
//  842   {
//  843      if(NetWorkAllow == 0)
        MOV     DPTR,#??NetWorkAllow
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_HandleKeys_22
//  844      {
//  845        NetWorkAllow = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  846        NLME_PermitJoiningRequest(0xFF); // 组网，允许随时加入
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#-0x1
        LCALL   ??NLME_PermitJoiningRequest?relay
//  847        //HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
//  848        //HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
//  849 #if defined ( LCD_SUPPORTED )
//  850        HalLcdWriteString( "Allow networking", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Allow networking">` & 0xff
        MOV     R3,#(`?<Constant "Allow networking">` >> 8) & 0xff
        SJMP    ??TransmitApp_HandleKeys_23
//  851 #endif
//  852      }
//  853      else
//  854      {
//  855        NetWorkAllow = 0;
??TransmitApp_HandleKeys_22:
        CLR     A
        MOVX    @DPTR,A
//  856        NLME_PermitJoiningRequest(0x00); // 不允许组网
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,A
        LCALL   ??NLME_PermitJoiningRequest?relay
//  857        //HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);  
//  858        //HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF); 
//  859 #if defined ( LCD_SUPPORTED )
//  860        HalLcdWriteString( "Ban   networking", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Ban   networking">` & 0xff
        MOV     R3,#(`?<Constant "Ban   networking">` >> 8) & 0xff
??TransmitApp_HandleKeys_23:
        LCALL   ??HalLcdWriteString?relay
//  861 #endif        
//  862      }
//  863   }
//  864 }
??TransmitApp_HandleKeys_21:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x31
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x32
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??MotorSpeed:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??NetWorkAllow:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay1_on:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay2_on:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  865 
//  866 
//  867 /*******************************************************************************
//  868  * LOCAL FUNCTIONS
//  869  */
//  870 
//  871 /*******************************************************************************
//  872  * @fn      TransmitApp_MessageMSGCB
//  873  *
//  874  * @brief   Data message processor callback.  This function processes
//  875  *          any incoming data - probably from other devices.  So, based
//  876  *          on cluster ID, perform the intended action.
//  877  *
//  878  * @param   none
//  879  *
//  880  * @return  none
//  881  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  882 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
TransmitApp_MessageMSGCB:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function TransmitApp_MessageMSGCB
        CODE
//  883 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  884 
//  885   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for TransmitApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_MessageMSGCB_8
        CODE
//  886   {
//  887     // 温湿度传感器信息
//  888     case TRANSMITAPP_CLUSTERID_HUMITMSG:
//  889       Humit.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_1:
        MOV     DPTR,#Humit
        LCALL   ?Subroutine2 & 0xFFFF
//  890       Humit.data[0] = pkt->cmd.Data[4]; // 湿度 
??CrossCallReturnLabel_0:
        MOV     DPTR,#Humit + 1
        LCALL   ?Subroutine6 & 0xFFFF
//  891       Humit.data[1] = pkt->cmd.Data[5]; // 温度
??CrossCallReturnLabel_12:
        MOV     DPTR,#Humit + 2
        LJMP    ??TransmitApp_MessageMSGCB_9 & 0xFFFF
//  892       break;
//  893     
//  894     // 温度与光照度传感器信息  
//  895     case TRANSMITAPP_CLUSTERID_TEMPLIGHTMSG:
//  896       TempLight.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_2:
        MOV     DPTR,#TempLight
        LCALL   ?Subroutine2 & 0xFFFF
//  897       TempLight.data[0] = pkt->cmd.Data[4]; // 温度整数
??CrossCallReturnLabel_1:
        MOV     DPTR,#TempLight + 1
        LCALL   ?Subroutine7 & 0xFFFF
//  898       TempLight.data[1] = pkt->cmd.Data[5]; // 温度小数
??CrossCallReturnLabel_14:
        MOV     DPTR,#TempLight + 2
        LCALL   ?Subroutine5 & 0xFFFF
//  899       TempLight.data[2] = pkt->cmd.Data[6]; // 光照
??CrossCallReturnLabel_10:
        MOV     DPTR,#TempLight + 3
        LCALL   ?Subroutine4 & 0xFFFF
//  900       TempLight.data[3] = pkt->cmd.Data[7]; // 光照
??CrossCallReturnLabel_8:
        MOVX    A,@DPTR
        MOV     DPTR,#TempLight + 4
        LJMP    ??TransmitApp_MessageMSGCB_9 & 0xFFFF
//  901       break;
//  902     
//  903     // RFID射频卡信息 
//  904     case TRANSMITAPP_CLUSTERID_RFIDMSG:
//  905       RfID.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_3:
        MOV     DPTR,#RfID
        LCALL   ?Subroutine2 & 0xFFFF
//  906       RfID.data[0] = pkt->cmd.Data[4]; // 射频卡类型
??CrossCallReturnLabel_2:
        MOV     DPTR,#RfID + 1
        LCALL   ?Subroutine7 & 0xFFFF
//  907       RfID.data[1] = pkt->cmd.Data[5]; // 4个字节的ID号
??CrossCallReturnLabel_15:
        MOV     DPTR,#RfID + 2
        LCALL   ?Subroutine5 & 0xFFFF
//  908       RfID.data[2] = pkt->cmd.Data[6]; //
??CrossCallReturnLabel_11:
        MOV     DPTR,#RfID + 3
        LCALL   ?Subroutine31 & 0xFFFF
//  909       RfID.data[3] = pkt->cmd.Data[7]; //
??CrossCallReturnLabel_69:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#RfID + 4
        LCALL   ?Subroutine4 & 0xFFFF
//  910       RfID.data[4] = pkt->cmd.Data[8]; //           
??CrossCallReturnLabel_9:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#RfID + 5
        SJMP    ??TransmitApp_MessageMSGCB_9
//  911       break;
//  912     
//  913     // 烟雾与火焰报警信息  
//  914     case TRANSMITAPP_CLUSTERID_GASFLAMEMSG:
//  915       gasFlame.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_4:
        MOV     DPTR,#gasFlame
        LCALL   ?Subroutine3 & 0xFFFF
//  916       gasFlame.data[0] = pkt->cmd.Data[4]; // 烟雾与火焰报警信息
??CrossCallReturnLabel_4:
        MOV     DPTR,#gasFlame + 1
        SJMP    ??TransmitApp_MessageMSGCB_9
//  917       break;
//  918     
//  919     // 人体红外检测信息  
//  920     case TRANSMITAPP_CLUSTERID_INFRAREDMSG:
//  921       infrared.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_5:
        MOV     DPTR,#infrared
        LCALL   ?Subroutine3 & 0xFFFF
//  922       infrared.data[0] = pkt->cmd.Data[4]; // 人体红外 
??CrossCallReturnLabel_5:
        MOV     DPTR,#infrared + 1
        SJMP    ??TransmitApp_MessageMSGCB_9
//  923       break;
//  924     
//  925     // 声音与振动传感器信息  
//  926     case TRANSMITAPP_CLUSTERID_SOUNDVBMSG:
//  927       soundVb.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_6:
        MOV     DPTR,#soundVb
        LCALL   ?Subroutine3 & 0xFFFF
//  928       soundVb.data[0] = pkt->cmd.Data[4]; // 声音震动信息
??CrossCallReturnLabel_6:
        MOV     DPTR,#soundVb + 1
        SJMP    ??TransmitApp_MessageMSGCB_9
//  929       break;
//  930     
//  931     // 电机状态信息  
//  932     case TRANSMITAPP_CLUSTERID_MOTORSTATUSMSG:
//  933       motor.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_7:
        MOV     DPTR,#motor
        MOV     A,#0x1
        MOVX    @DPTR,A
//  934       
//  935       // 储存电机设备的网络地址，用于发送控制命令
//  936       TransmitApp_DstMotorAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#TransmitApp_DstMotorAddr + 8
        LCALL   ?Subroutine8 & 0xFFFF
//  937       TransmitApp_DstMotorAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
??CrossCallReturnLabel_16:
        MOV     DPTR,#TransmitApp_DstMotorAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  938       
//  939       TransmitApp_DstMotorAddr.endPoint = 1;  // 目的节点的端口号
        MOV     DPTR,#TransmitApp_DstMotorAddr + 9
        LCALL   ?Subroutine2 & 0xFFFF
//  940       //TransmitApp_DstMotorAddr.endPoint = TRANSMITAPP_ENDPOINT;
//  941      
//  942       motor.data[0] = pkt->cmd.Data[4]; // 电机转速
??CrossCallReturnLabel_3:
        MOV     DPTR,#motor + 1
        LCALL   ?Subroutine6 & 0xFFFF
//  943       motor.data[1] = pkt->cmd.Data[5]; // 电机状态
??CrossCallReturnLabel_13:
        MOV     DPTR,#motor + 2
        SJMP    ??TransmitApp_MessageMSGCB_9
//  944       break;
//  945     
//  946     // 继电器状态信息   
//  947     case TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG:
//  948       relay.deviceNWKStatus = DEVICE_NWK_ONLINE;
??TransmitApp_MessageMSGCB_8:
        MOV     DPTR,#relay
        MOV     A,#0x1
        MOVX    @DPTR,A
//  949       
//  950       // 储存继电器设备的网络地址，用于发送控制命令
//  951       TransmitApp_DstRelayAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#TransmitApp_DstRelayAddr + 8
        LCALL   ?Subroutine8 & 0xFFFF
//  952       TransmitApp_DstRelayAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
??CrossCallReturnLabel_17:
        MOV     DPTR,#TransmitApp_DstRelayAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  953       
//  954       TransmitApp_DstRelayAddr.endPoint = 1; // 目的节点的端口号
        MOV     DPTR,#TransmitApp_DstRelayAddr + 9
        LCALL   ?Subroutine3 & 0xFFFF
//  955       //TransmitApp_DstRelayAddr.endPoint = TRANSMITAPP_ENDPOINT;  
//  956       
//  957       relay.data[0] = pkt->cmd.Data[4]; 
??CrossCallReturnLabel_7:
        MOV     DPTR,#relay + 1
??TransmitApp_MessageMSGCB_9:
        MOVX    @DPTR,A
//  958       break;
//  959       
//  960     // 同上面一样，可以在将来添加更多的控制信息
//  961     default:
//  962       break;
//  963   }
//  964 }
??TransmitApp_MessageMSGCB_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        INC     A
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_74:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_71:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_70:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_10
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_11
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_77:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_72:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_13
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_8
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_9
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_80:
        INC     DPTR
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_79:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_13
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_8
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_9
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_4
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_5
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_6
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_7
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_73:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_15
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_0
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_1
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_2
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_3
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_78:
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_10
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_11
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_14
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_15
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_0
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_1
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_2
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_3
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91
//  965 
//  966 /*******************************************************************************
//  967  * @fn      TransmitApp_DeviceNWKCheck
//  968  *
//  969  * @brief   check the device NWK status: online or offline.
//  970  *          由宏定义TRANSMITAPP_DEVICE_CHECK_TIMER确定周期是2秒
//  971  *
//  972  * @param   none
//  973  *
//  974  * @return  none
//  975  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  976 void TransmitApp_DeviceNWKCheck(void)
TransmitApp_DeviceNWKCheck:
        CFI Block cfiBlock92 Using cfiCommon0
        CFI Function TransmitApp_DeviceNWKCheck
        CODE
//  977 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  978   // 设备离线计数器，超过临界值判定设备离线
//  979   static uint8 humitCnt, tempLightCnt, rfIDCnt, gasFlameCnt, infraredCnt;
//  980   static uint8 motorCnt, relayStatusCnt, soundVbCnt;
//  981   
//  982   // 温湿度传感器
//  983   if (Humit.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
        MOV     DPTR,#Humit
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_0
//  984   {
//  985     humitCnt++;
        MOV     DPTR,#??humitCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  986   }
//  987   if (Humit.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
        MOV     DPTR,#Humit
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_1
//  988   {
//  989     humitCnt = 0;
??TransmitApp_DeviceNWKCheck_0:
        MOV     DPTR,#??humitCnt
        CLR     A
        MOVX    @DPTR,A
//  990     Humit.deviceNWKStatus = 0;
        MOV     DPTR,#Humit
        SJMP    ??TransmitApp_DeviceNWKCheck_2
//  991   }
//  992   if (humitCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_1:
        MOV     DPTR,#??humitCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_34:
        JC      ??TransmitApp_DeviceNWKCheck_3
//  993   {
//  994     humitCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
//  995     Humit.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#Humit
        DEC     A
??TransmitApp_DeviceNWKCheck_2:
        MOVX    @DPTR,A
//  996   }
//  997   
//  998   // 温度与光照度传感器
//  999   if (TempLight.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
??TransmitApp_DeviceNWKCheck_3:
        MOV     DPTR,#TempLight
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_4
// 1000   {
// 1001     tempLightCnt++;
        MOV     DPTR,#??tempLightCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1002   }
// 1003   if (TempLight.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
        MOV     DPTR,#TempLight
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_5
// 1004   {
// 1005     tempLightCnt = 0;
??TransmitApp_DeviceNWKCheck_4:
        MOV     DPTR,#??tempLightCnt
        CLR     A
        MOVX    @DPTR,A
// 1006     TempLight.deviceNWKStatus = 0;
        MOV     DPTR,#TempLight
        SJMP    ??TransmitApp_DeviceNWKCheck_6
// 1007   }
// 1008   if (tempLightCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_5:
        MOV     DPTR,#??tempLightCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_35:
        JC      ??TransmitApp_DeviceNWKCheck_7
// 1009   {
// 1010     tempLightCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1011     TempLight.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#TempLight
        DEC     A
??TransmitApp_DeviceNWKCheck_6:
        MOVX    @DPTR,A
// 1012   }
// 1013   
// 1014   // RFID读卡器
// 1015   if (RfID.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
??TransmitApp_DeviceNWKCheck_7:
        MOV     DPTR,#RfID
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_8
// 1016   {
// 1017       rfIDCnt++;
        MOV     DPTR,#??rfIDCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1018   }
// 1019   if (RfID.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
        MOV     DPTR,#RfID
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_9
// 1020   {
// 1021       rfIDCnt = 0;
??TransmitApp_DeviceNWKCheck_8:
        MOV     DPTR,#??rfIDCnt
        CLR     A
        MOVX    @DPTR,A
// 1022       RfID.deviceNWKStatus = 0;
        MOV     DPTR,#RfID
        SJMP    ??TransmitApp_DeviceNWKCheck_10
// 1023   }
// 1024   if (rfIDCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_9:
        MOV     DPTR,#??rfIDCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_36:
        JC      ??TransmitApp_DeviceNWKCheck_11
// 1025   {
// 1026       rfIDCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1027       RfID.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#RfID
        DEC     A
??TransmitApp_DeviceNWKCheck_10:
        MOVX    @DPTR,A
// 1028   }
// 1029     
// 1030   // 烟雾与火焰传感器  
// 1031   if (gasFlame.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
??TransmitApp_DeviceNWKCheck_11:
        MOV     DPTR,#gasFlame
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_12
// 1032   {
// 1033     gasFlameCnt++;
        MOV     DPTR,#??gasFlameCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1034   }
// 1035   if (gasFlame.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
        MOV     DPTR,#gasFlame
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_13
// 1036   {
// 1037     gasFlameCnt = 0;
??TransmitApp_DeviceNWKCheck_12:
        MOV     DPTR,#??gasFlameCnt
        CLR     A
        MOVX    @DPTR,A
// 1038     gasFlame.deviceNWKStatus = 0;
        MOV     DPTR,#gasFlame
        SJMP    ??TransmitApp_DeviceNWKCheck_14
// 1039   }
// 1040   if (gasFlameCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_13:
        MOV     DPTR,#??gasFlameCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_37:
        JC      ??TransmitApp_DeviceNWKCheck_15
// 1041   {
// 1042     gasFlameCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1043     gasFlame.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#gasFlame
        DEC     A
??TransmitApp_DeviceNWKCheck_14:
        MOVX    @DPTR,A
// 1044   }
// 1045   
// 1046   // 人体红外检测传感器
// 1047   if (infrared.deviceNWKStatus != DEVICE_NWK_ONLINE)  // 设备离线，计数+1
??TransmitApp_DeviceNWKCheck_15:
        MOV     DPTR,#infrared
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_16
// 1048   {
// 1049     infraredCnt++;
        MOV     DPTR,#??infraredCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1050   }
// 1051   if (infrared.deviceNWKStatus == DEVICE_NWK_ONLINE)  // 设备在线，计数清零
        MOV     DPTR,#infrared
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_17
// 1052   {
// 1053     infraredCnt = 0;
??TransmitApp_DeviceNWKCheck_16:
        MOV     DPTR,#??infraredCnt
        CLR     A
        MOVX    @DPTR,A
// 1054     infrared.deviceNWKStatus = 0;
        MOV     DPTR,#infrared
        SJMP    ??TransmitApp_DeviceNWKCheck_18
// 1055   }
// 1056   if (infraredCnt > DEVICE_NWK_CNT_LIMIT)             // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_17:
        MOV     DPTR,#??infraredCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_38:
        JC      ??TransmitApp_DeviceNWKCheck_19
// 1057   {
// 1058     infraredCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1059     infrared.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#infrared
        DEC     A
??TransmitApp_DeviceNWKCheck_18:
        MOVX    @DPTR,A
// 1060   }
// 1061     
// 1062   // 声音振动传感器  
// 1063   if (soundVb.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
??TransmitApp_DeviceNWKCheck_19:
        MOV     DPTR,#soundVb
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_20
// 1064   {
// 1065     soundVbCnt++;
        MOV     DPTR,#??soundVbCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1066   }
// 1067   if (soundVb.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
        MOV     DPTR,#soundVb
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_21
// 1068   {
// 1069     soundVbCnt++;
??TransmitApp_DeviceNWKCheck_20:
        MOV     DPTR,#??soundVbCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1070     soundVb.deviceNWKStatus = 0;
        MOV     DPTR,#soundVb
        CLR     A
        MOVX    @DPTR,A
// 1071   }
// 1072   if (soundVbCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_21:
        MOV     DPTR,#??soundVbCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_39:
        JC      ??TransmitApp_DeviceNWKCheck_22
// 1073   {
// 1074     soundVbCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1075     soundVb.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#soundVb
        DEC     A
        MOVX    @DPTR,A
// 1076   }
// 1077     
// 1078   // 微型直流电机RF-310T/QJT310AH 
// 1079   if (motor.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
??TransmitApp_DeviceNWKCheck_22:
        MOV     DPTR,#motor
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_23
// 1080   {
// 1081     motorCnt++;
        MOV     DPTR,#??motorCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1082   }
// 1083   if (motor.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
        MOV     DPTR,#motor
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_24
// 1084   {
// 1085     motorCnt = 0;
??TransmitApp_DeviceNWKCheck_23:
        MOV     DPTR,#??motorCnt
        CLR     A
        MOVX    @DPTR,A
// 1086     motor.deviceNWKStatus = 0;
        MOV     DPTR,#motor
        SJMP    ??TransmitApp_DeviceNWKCheck_25
// 1087   }
// 1088   if (motorCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_24:
        MOV     DPTR,#??motorCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_40:
        JC      ??TransmitApp_DeviceNWKCheck_26
// 1089   {
// 1090     motorCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1091     motor.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#motor
        DEC     A
??TransmitApp_DeviceNWKCheck_25:
        MOVX    @DPTR,A
// 1092   }
// 1093     
// 1094   // 继电器  
// 1095   if (relay.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
??TransmitApp_DeviceNWKCheck_26:
        MOV     DPTR,#relay
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??TransmitApp_DeviceNWKCheck_27
// 1096   {
// 1097     relayStatusCnt++;
        MOV     DPTR,#??relayStatusCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1098   }
// 1099   if (relay.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
        MOV     DPTR,#relay
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DeviceNWKCheck_28
// 1100   {
// 1101     relayStatusCnt = 0;
??TransmitApp_DeviceNWKCheck_27:
        MOV     DPTR,#??relayStatusCnt
        CLR     A
        MOVX    @DPTR,A
// 1102     relay.deviceNWKStatus = 0;
        MOV     DPTR,#relay
        SJMP    ??TransmitApp_DeviceNWKCheck_29
// 1103   }
// 1104   if (relayStatusCnt > DEVICE_NWK_CNT_LIMIT)      // 超时, 判为离线
??TransmitApp_DeviceNWKCheck_28:
        MOV     DPTR,#??relayStatusCnt
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_41:
        JC      ??TransmitApp_DeviceNWKCheck_30
// 1105   {
// 1106     relayStatusCnt = DEVICE_NWK_CNT_LIMIT;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1107     relay.deviceNWKStatus = DEVICE_NWK_OFFLINE;
        MOV     DPTR,#relay
        DEC     A
??TransmitApp_DeviceNWKCheck_29:
        MOVX    @DPTR,A
// 1108   }  
// 1109 }
??TransmitApp_DeviceNWKCheck_30:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond94) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond94) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond94) CFA_SP SP+-5
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond95) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond95) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond95) CFA_SP SP+-5
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond96) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond96) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond96) CFA_SP SP+-5
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond97) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond97) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond97) CFA_SP SP+-5
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond98) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond98) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond98) CFA_SP SP+-5
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond99) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond99) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond99) CFA_SP SP+-5
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond100) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond100) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond100) CFA_SP SP+-5
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??humitCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??tempLightCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??rfIDCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??gasFlameCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??infraredCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??motorCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??relayStatusCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??soundVbCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1110 
// 1111 /*******************************************************************************
// 1112  * @fn      TransmitApp_SendToRelayMSG
// 1113  *
// 1114  * @brief   Send control message to relay, if relay is in the network.
// 1115  *
// 1116  * @param   uint8 cmd: Relay control command
// 1117  *
// 1118  * @return  none
// 1119  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1120 void TransmitApp_SendToRelayMSG( uint8 cmd )
TransmitApp_SendToRelayMSG:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function TransmitApp_SendToRelayMSG
        CODE
// 1121 {
        FUNCALL TransmitApp_SendToRelayMSG, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1122   uint8 tmp;
// 1123   
// 1124   // 只有设备在线时, 方发送控制命令
// 1125   if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#relay
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_SendToRelayMSG_0
// 1126   {
// 1127     // put the sequence number in the message
// 1128     tmp = HI_UINT8( TransmitApp_RelayTransID );
        MOV     DPTR,#TransmitApp_RelayTransID
        LCALL   ?Subroutine21 & 0xFFFF
// 1129     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
??CrossCallReturnLabel_48:
        JNC     ??TransmitApp_SendToRelayMSG_1
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendToRelayMSG_2
??TransmitApp_SendToRelayMSG_1:
        MOV     R0,#0x37
// 1130     TransmitApp_Msg[2] = tmp;
??TransmitApp_SendToRelayMSG_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#TransmitApp_Msg + 2
        MOVX    @DPTR,A
// 1131     tmp = LO_UINT8( TransmitApp_RelayTransID );
        MOV     DPTR,#TransmitApp_RelayTransID
        LCALL   ?Subroutine35 & 0xFFFF
// 1132     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
??CrossCallReturnLabel_87:
        JNC     ??TransmitApp_SendToRelayMSG_3
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendToRelayMSG_4
??TransmitApp_SendToRelayMSG_3:
        MOV     R0,#0x37
// 1133     TransmitApp_Msg[3] = tmp;
??TransmitApp_SendToRelayMSG_4:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#TransmitApp_Msg + 3
        LCALL   ?Subroutine10 & 0xFFFF
// 1134     
// 1135     // 发送给继电器的控制命令 
// 1136     TransmitApp_Msg[4] = cmd;
// 1137     
// 1138     // TransmitApp_epDesc.endPoint = TRANSMITAPP_CLUSTERID_RELAYCTLMSG; // 20201225
// 1139     tmp = AF_DataRequest( &TransmitApp_DstRelayAddr,           \ 
// 1140                           &TransmitApp_epDesc,                 \ 
// 1141                            TRANSMITAPP_CLUSTERID_RELAYCTLMSG,  \ 
// 1142                            TRANSMITAPP_RELAY_DATA_LEN,         \ 
// 1143                            TransmitApp_Msg,                    \ 
// 1144                           &TransmitApp_RelayTransID,           \ 
// 1145                            TRANSMITAPP_TX_OPTIONS,             \ 
// 1146                            AF_DEFAULT_RADIUS );
// 1147   }
??CrossCallReturnLabel_20:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_RelayTransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_RelayTransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
        MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TransmitApp_DstRelayAddr & 0xff
        MOV     R3,#(TransmitApp_DstRelayAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1148 }
??TransmitApp_SendToRelayMSG_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOVX    A,@DPTR
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_49
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        ANL     A,#0xf
        MOV     R2,A
        CLR     C
        SUBB    A,#0xa
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110
// 1149 
// 1150 /*******************************************************************************
// 1151  * @fn      TransmitApp_SendToMotorMSG
// 1152  *
// 1153  * @brief   Send  message to motor.
// 1154  *
// 1155  * @param   uint8 cmd: motor command
// 1156  *
// 1157  * @return  none
// 1158  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1159 void TransmitApp_SendToMotorMSG( uint8 cmd, uint8 speed )
TransmitApp_SendToMotorMSG:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function TransmitApp_SendToMotorMSG
        CODE
// 1160 {
        FUNCALL TransmitApp_SendToMotorMSG, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
// 1161   uint8 tmp;
// 1162   
// 1163   // 只有设备在线时, 方发送控制命令
// 1164   if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#motor
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_SendToMotorMSG_0
// 1165   {
// 1166     // put the sequence number in the message
// 1167     tmp = HI_UINT8( TransmitApp_MotorTransID );
        MOV     DPTR,#TransmitApp_MotorTransID
        LCALL   ?Subroutine21 & 0xFFFF
// 1168     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
??CrossCallReturnLabel_49:
        JNC     ??TransmitApp_SendToMotorMSG_1
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendToMotorMSG_2
??TransmitApp_SendToMotorMSG_1:
        MOV     R0,#0x37
// 1169     TransmitApp_Msg[2] = tmp;
??TransmitApp_SendToMotorMSG_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#TransmitApp_Msg + 2
        MOVX    @DPTR,A
// 1170     tmp = LO_UINT8( TransmitApp_MotorTransID );
        MOV     DPTR,#TransmitApp_MotorTransID
        LCALL   ?Subroutine35 & 0xFFFF
// 1171     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
??CrossCallReturnLabel_88:
        JNC     ??TransmitApp_SendToMotorMSG_3
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendToMotorMSG_4
??TransmitApp_SendToMotorMSG_3:
        MOV     R0,#0x37
// 1172     TransmitApp_Msg[3] = tmp;
??TransmitApp_SendToMotorMSG_4:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#TransmitApp_Msg + 3
        MOVX    @DPTR,A
// 1173     
// 1174     TransmitApp_Msg[4] = speed; // 电机速度
        MOV     A,R7
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
// 1175     TransmitApp_Msg[5] = cmd;   // 电机控制状态(方向)
// 1176   
// 1177     //TransmitApp_epDesc.endPoint = TRANSMITAPP_CLUSTERID_MOTORCTLMSG; // 20201225
// 1178     tmp = AF_DataRequest( &TransmitApp_DstMotorAddr,            \ 
// 1179                           &TransmitApp_epDesc,                  \ 
// 1180                            TRANSMITAPP_CLUSTERID_MOTORCTLMSG,   \ 
// 1181                            TRANSMITAPP_MOTOR_DATA_LEN,          \ 
// 1182                            TransmitApp_Msg,                     \ 
// 1183                           &TransmitApp_MotorTransID,            \ 
// 1184                            TRANSMITAPP_TX_OPTIONS,              \ 
// 1185                            AF_DEFAULT_RADIUS );
// 1186   }
??CrossCallReturnLabel_21:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_MotorTransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_MotorTransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
        MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TransmitApp_DstMotorAddr & 0xff
        MOV     R3,#(TransmitApp_DstMotorAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI EndBlock cfiBlock111
// 1187 }
??TransmitApp_SendToMotorMSG_0:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOVX    A,@DPTR
        SWAP    A
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_89:
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118
// 1188 
// 1189 /*******************************************************************************
// 1190  * @fn      TransmitApp_DisplayResults
// 1191  *
// 1192  * @brief   Display the results
// 1193  *
// 1194  * @param   none
// 1195  *
// 1196  * @return  none
// 1197  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1198 void TransmitApp_DisplayResults( uint8 dispPage, uint8 *scrollLine )
TransmitApp_DisplayResults:
        CFI Block cfiBlock119 Using cfiCommon0
        CFI Function TransmitApp_DisplayResults
        CODE
// 1199 {
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 228, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 228, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 228, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 228, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 228, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 228, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 228, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 228, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 228, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 228, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 228, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 228, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 226, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 226, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 206
        MOV     A,#0x32
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 226)
        MOV     A,R1
        MOV     R7,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1200 #if defined LCD_SUPPORTED 
// 1201   uint8 i, scrollLineTmp;
// 1202   char dispBuf[12][16]; // LCD显示缓存
// 1203   uint8 buf[6];
// 1204   uint16 light;
// 1205   uint8 dispIDBuf[8];
// 1206   
// 1207   // 温湿度传感器中的湿度显示
// 1208   strcpy(dispBuf[0], "H:");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "H:">` & 0xff
        MOV     R5,#(`?<Constant "H:">` >> 8) & 0xff
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
// 1209   if (Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#Humit
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_DisplayResults_0
// 1210   {
// 1211     _ltoa(Humit.data[0], buf, 10);
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 228)
        MOV     R1,#0xa
        MOV     DPTR,#Humit + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 226)
// 1212     strcat(dispBuf[0], (char *)buf);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1213     strcat(dispBuf[0], "%");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "%">` & 0xff
        MOV     R5,#(`?<Constant "%">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_1
// 1214   }
// 1215   else
// 1216   {
// 1217       strcat(dispBuf[0], "OFF");
??TransmitApp_DisplayResults_0:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_1:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1218   }
// 1219   // 温湿度传感器中的温度显示
// 1220   strcat(dispBuf[0], " T:");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant " T:">` & 0xff
        MOV     R5,#(`?<Constant " T:">` >> 8) & 0xff
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1221   if (Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#Humit
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_DisplayResults_2
// 1222   {
// 1223     _ltoa(Humit.data[1], buf, 10);
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 228)
        MOV     R1,#0xa
        MOV     DPTR,#Humit + 2
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 226)
// 1224     strcat(dispBuf[0], (char *)buf);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1225     strcat(dispBuf[0], "C");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "C">` & 0xff
        MOV     R5,#(`?<Constant "C">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_3
// 1226   }
// 1227   else
// 1228   {
// 1229     strcat(dispBuf[0], "OFF");
??TransmitApp_DisplayResults_2:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_3:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1230   }
// 1231         
// 1232   // 温度与光照度显示
// 1233   if (TempLight.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#TempLight
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     $+5
        LJMP    ??TransmitApp_DisplayResults_4 & 0xFFFF
// 1234   {
// 1235    _ltoa(TempLight.data[0], buf, 10);
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 228)
        MOV     R1,#0xa
        MOV     DPTR,#TempLight + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 226)
// 1236    strcpy(dispBuf[1], (char *)buf);
        ; Setup parameters for call to function strcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
// 1237     strcat(dispBuf[1], ".");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant ".">` & 0xff
        MOV     R5,#(`?<Constant ".">` >> 8) & 0xff
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1238     _ltoa((long)((float)TempLight.data[1]*62.5), buf, 10);
        ; Setup parameters for call to function _ltoa
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 228)
        MOV     DPTR,#TempLight + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_427a0000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,#0xa
        MOV     R1,A
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_98:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 226)
// 1239     strcat(dispBuf[1], (char *)buf);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1240     strcat(dispBuf[1], "C ");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "C ">` & 0xff
        MOV     R5,#(`?<Constant "C ">` >> 8) & 0xff
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1241     light = (uint16)(TempLight.data[2]<<8) + TempLight.data[3];
// 1242     _ltoa(light, buf, 10);
        ; Setup parameters for call to function _ltoa
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 228)
        MOV     R1,#0xa
        MOV     DPTR,#TempLight + 3
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 226)
// 1243     strcat(dispBuf[1], (char *)buf);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1244     strcat(dispBuf[1], "L");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "L">` & 0xff
        MOV     R5,#(`?<Constant "L">` >> 8) & 0xff
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
        SJMP    ??TransmitApp_DisplayResults_5
// 1245   }
// 1246   else
// 1247   {
// 1248     strcpy(dispBuf[1], "T:OFF L:OFF");
??TransmitApp_DisplayResults_4:
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "T:OFF L:OFF">` & 0xff
        MOV     R5,#(`?<Constant "T:OFF L:OFF">` >> 8) & 0xff
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
// 1249   }
// 1250     
// 1251   // 继电器状态显示
// 1252   strcpy(dispBuf[2], "K1:");
??TransmitApp_DisplayResults_5:
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "K1:">` & 0xff
        MOV     R5,#(`?<Constant "K1:">` >> 8) & 0xff
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
// 1253   if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#relay
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_DisplayResults_6
// 1254   {
// 1255     if (relay.data[0] & 0x01)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_DisplayResults_7
// 1256     {
// 1257       strcat(dispBuf[2], "off");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "off">` & 0xff
        MOV     R5,#(`?<Constant "off">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_8
// 1258     }
// 1259     else if(relay.data[0] & 0x02)
??TransmitApp_DisplayResults_7:
        MOV     C,0xE0 /* A   */.1
        JNC     ??TransmitApp_DisplayResults_9
// 1260     {
// 1261       strcat(dispBuf[2], "on");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "on">` & 0xff
        MOV     R5,#(`?<Constant "on">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_8
// 1262     }
// 1263   }
// 1264   else
// 1265   {
// 1266     strcat(dispBuf[2], "OFF");
??TransmitApp_DisplayResults_6:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_8:
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1267   }
// 1268   strcat(dispBuf[2], " K2:");
??TransmitApp_DisplayResults_9:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant " K2:">` & 0xff
        MOV     R5,#(`?<Constant " K2:">` >> 8) & 0xff
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1269   if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#relay
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_DisplayResults_10
// 1270   {
// 1271     if (relay.data[0] & 0x10)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        JNC     ??TransmitApp_DisplayResults_11
// 1272     {
// 1273       strcat(dispBuf[2], "off");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "off">` & 0xff
        MOV     R5,#(`?<Constant "off">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_12
// 1274     }
// 1275     else if(relay.data[0] & 0x20)
??TransmitApp_DisplayResults_11:
        MOV     C,0xE0 /* A   */.5
        JNC     ??TransmitApp_DisplayResults_13
// 1276     {
// 1277       strcat(dispBuf[2], "on");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "on">` & 0xff
        MOV     R5,#(`?<Constant "on">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_12
// 1278     }
// 1279   }
// 1280   else
// 1281   {
// 1282     strcat(dispBuf[2], "OFF");
??TransmitApp_DisplayResults_10:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_12:
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1283   }
// 1284        
// 1285   // 直流电机运行状态显示
// 1286   strcpy(dispBuf[3], "Motor:");
??TransmitApp_DisplayResults_13:
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Motor:">` & 0xff
        MOV     R5,#(`?<Constant "Motor:">` >> 8) & 0xff
        MOV     A,#0x3e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
// 1287   if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_61:
        JZ      ??TransmitApp_DisplayResults_14
// 1288   {
// 1289     if (motor.data[1] == 1)
        MOV     DPTR,#motor + 2
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DisplayResults_15
// 1290     {
// 1291       strcat(dispBuf[3], "Stop");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Stop">` & 0xff
        MOV     R5,#(`?<Constant "Stop">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_16
// 1292     }
// 1293     else if (motor.data[1] == 2)
??TransmitApp_DisplayResults_15:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??TransmitApp_DisplayResults_17
// 1294     {
// 1295       strcat(dispBuf[3], "Forward");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Forward">` & 0xff
        MOV     R5,#(`?<Constant "Forward">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_16
// 1296     }
// 1297     else if(motor.data[1] == 3)
??TransmitApp_DisplayResults_17:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??TransmitApp_DisplayResults_18
// 1298     {
// 1299       strcat(dispBuf[3], "Backward");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Backward">` & 0xff
        MOV     R5,#(`?<Constant "Backward">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_16
// 1300     }
// 1301   }
// 1302   else
// 1303   {
// 1304     strcat(dispBuf[3], "OFF");
??TransmitApp_DisplayResults_14:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_16:
        MOV     A,#0x3e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1305   }
// 1306     
// 1307   // 电机转速信息显示
// 1308   strcpy(dispBuf[4], "Speed:");
??TransmitApp_DisplayResults_18:
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Speed:">` & 0xff
        MOV     R5,#(`?<Constant "Speed:">` >> 8) & 0xff
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
// 1309   if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_62:
        JZ      ??TransmitApp_DisplayResults_19
// 1310   {
// 1311     _ltoa(motor.data[0]*60, buf, 10);
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 228)
        MOV     R1,#0xa
        MOV     DPTR,#motor + 1
        MOVX    A,@DPTR
        MOV     B,#0x3c
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        CLR     A
        ADD     A,R0
        MOV     R3,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 226)
// 1312     strcat(dispBuf[4], (char *)buf);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1313     strcat(dispBuf[4], "RPS");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "RPS">` & 0xff
        MOV     R5,#(`?<Constant "RPS">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_20
// 1314   }
// 1315   else
// 1316   {
// 1317     strcat(dispBuf[4], "OFF");
??TransmitApp_DisplayResults_19:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_20:
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1318   }
// 1319   
// 1320   // 第0位存储烟雾/有害气体报警信息，第1位存储火焰报警信息
// 1321   // 烟雾/有害气体检测信息信息
// 1322   strcpy(dispBuf[5], "Gas:");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Gas:">` & 0xff
        MOV     R5,#(`?<Constant "Gas:">` >> 8) & 0xff
        MOV     A,#0x5e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
// 1323   if (gasFlame.deviceNWKStatus != DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_63:
        JZ      ??TransmitApp_DisplayResults_21
// 1324   {
// 1325     if (gasFlame.data[0] & 0x01)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_DisplayResults_22
// 1326     {
// 1327       strcat(dispBuf[5], "Alarm!");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Alarm!">` & 0xff
        MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_23
// 1328     }
// 1329     else
// 1330     {
// 1331       strcat(dispBuf[5], "ON");
??TransmitApp_DisplayResults_22:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "ON">` & 0xff
        MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_23
// 1332     }
// 1333   }
// 1334   else
// 1335   {
// 1336     strcat(dispBuf[5], "OFF");
??TransmitApp_DisplayResults_21:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_23:
        MOV     A,#0x5e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1337   }
// 1338     
// 1339   // 火焰检测信息显示
// 1340   strcpy(dispBuf[6], "Flame:");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Flame:">` & 0xff
        MOV     R5,#(`?<Constant "Flame:">` >> 8) & 0xff
        MOV     A,#0x6e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
// 1341   if (gasFlame.deviceNWKStatus != DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_64:
        JZ      ??TransmitApp_DisplayResults_24
// 1342   {
// 1343     if(gasFlame.data[0] & 0x02)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??TransmitApp_DisplayResults_25
// 1344     {
// 1345       strcat(dispBuf[6], "Alarm!");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Alarm!">` & 0xff
        MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_26
// 1346     }
// 1347     else
// 1348     {
// 1349       strcat(dispBuf[6], "ON");
??TransmitApp_DisplayResults_25:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "ON">` & 0xff
        MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_26
// 1350     }
// 1351   }
// 1352   else
// 1353   {
// 1354     strcat(dispBuf[6], "OFF");
??TransmitApp_DisplayResults_24:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_26:
        MOV     A,#0x6e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1355   }
// 1356     
// 1357   // 第0位存储声音报警信息，第1位存储振动报警信息
// 1358   // 声音检测信息显示
// 1359   strcpy(dispBuf[7], "Sound:");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Sound:">` & 0xff
        MOV     R5,#(`?<Constant "Sound:">` >> 8) & 0xff
        MOV     A,#0x7e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
// 1360   if (soundVb.deviceNWKStatus != DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_65:
        JZ      ??TransmitApp_DisplayResults_27
// 1361   {
// 1362     if (soundVb.data[0] & 0x01)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_DisplayResults_28
// 1363     {
// 1364       strcat(dispBuf[7], "Alarm!");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Alarm!">` & 0xff
        MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_29
// 1365     }
// 1366     else
// 1367     {
// 1368       strcat(dispBuf[7], "ON");
??TransmitApp_DisplayResults_28:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "ON">` & 0xff
        MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_29
// 1369     }
// 1370   }
// 1371   else
// 1372   {
// 1373     strcat(dispBuf[7], "OFF");
??TransmitApp_DisplayResults_27:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_29:
        MOV     A,#0x7e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1374   }
// 1375   
// 1376   // 震动检测信息显示
// 1377   strcpy(dispBuf[8], "Vibrate:");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Vibrate:">` & 0xff
        MOV     R5,#(`?<Constant "Vibrate:">` >> 8) & 0xff
        MOV     A,#-0x72
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
// 1378   if (soundVb.deviceNWKStatus != DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_66:
        JZ      ??TransmitApp_DisplayResults_30
// 1379   {
// 1380     if(soundVb.data[0] & 0x02)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??TransmitApp_DisplayResults_31
// 1381     {
// 1382       strcat(dispBuf[8], "Alarm!");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Alarm!">` & 0xff
        MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_32
// 1383     }
// 1384     else
// 1385     {
// 1386       strcat(dispBuf[8], "ON");
??TransmitApp_DisplayResults_31:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "ON">` & 0xff
        MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_32
// 1387     }
// 1388   }
// 1389   else
// 1390   {
// 1391     strcat(dispBuf[8], "OFF");
??TransmitApp_DisplayResults_30:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_32:
        MOV     A,#-0x72
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1392   }
// 1393     
// 1394   // 人体红外检测信息显示
// 1395   strcpy(dispBuf[9], "Infrared:");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Infrared:">` & 0xff
        MOV     R5,#(`?<Constant "Infrared:">` >> 8) & 0xff
        MOV     A,#-0x62
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
// 1396   if (infrared.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#infrared
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_DisplayResults_33
// 1397   {
// 1398     if (infrared.data[0] & 0x01)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_DisplayResults_34
// 1399     {
// 1400       strcat(dispBuf[9], "Human!");
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "Human!">` & 0xff
        MOV     R5,#(`?<Constant "Human!">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_35
// 1401     }
// 1402     else
// 1403     {
// 1404        strcat(dispBuf[9], "ON");
??TransmitApp_DisplayResults_34:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "ON">` & 0xff
        MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_35
// 1405     }
// 1406   }
// 1407   else
// 1408   {
// 1409     strcat(dispBuf[9], "OFF");
??TransmitApp_DisplayResults_33:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
??TransmitApp_DisplayResults_35:
        MOV     A,#-0x62
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1410   }
// 1411 
// 1412   // 射频卡类别信息显示
// 1413   strcpy(dispBuf[10], "Card:");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "Card:">` & 0xff
        MOV     R5,#(`?<Constant "Card:">` >> 8) & 0xff
        MOV     A,#-0x52
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
// 1414   if (RfID.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#RfID
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??TransmitApp_DisplayResults_36
// 1415   {
// 1416     if (RfID.data[0] == 0x01)
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_DisplayResults_37
// 1417     {
// 1418       strcpy(dispBuf[10], "MFOne-S50");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "MFOne-S50">` & 0xff
        MOV     R5,#(`?<Constant "MFOne-S50">` >> 8) & 0xff
??TransmitApp_DisplayResults_38:
        MOV     A,#-0x52
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
        SJMP    ??TransmitApp_DisplayResults_39
// 1419     }
// 1420     else if (RfID.data[0] == 0x02)
??TransmitApp_DisplayResults_37:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??TransmitApp_DisplayResults_40
// 1421     {
// 1422       strcpy(dispBuf[10], "MFOne-S70");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "MFOne-S70">` & 0xff
        MOV     R5,#(`?<Constant "MFOne-S70">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_38
// 1423     }
// 1424     else if (RfID.data[0] == 0x03)
??TransmitApp_DisplayResults_40:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??TransmitApp_DisplayResults_41
// 1425     {
// 1426       strcpy(dispBuf[10], "MF-UltraLight");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "MF-UltraLight">` & 0xff
        MOV     R5,#(`?<Constant "MF-UltraLight">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_38
// 1427     }
// 1428     else if (RfID.data[0] == 0x04)
??TransmitApp_DisplayResults_41:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??TransmitApp_DisplayResults_42
// 1429     {
// 1430       strcpy(dispBuf[10], "MF-Pro");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "MF-Pro">` & 0xff
        MOV     R5,#(`?<Constant "MF-Pro">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_38
// 1431     }
// 1432     else if (RfID.data[0] == 0x05)
??TransmitApp_DisplayResults_42:
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??TransmitApp_DisplayResults_39
// 1433     {
// 1434       strcpy(dispBuf[10], "MF-DesFire");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "MF-DesFire">` & 0xff
        MOV     R5,#(`?<Constant "MF-DesFire">` >> 8) & 0xff
        SJMP    ??TransmitApp_DisplayResults_38
// 1435     }
// 1436   }
// 1437   else
// 1438   {
// 1439     strcat(dispBuf[10], "OFF");
??TransmitApp_DisplayResults_36:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "OFF">` & 0xff
        MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
        MOV     A,#-0x52
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcat?relay
// 1440   }
// 1441     
// 1442   // RFID射频卡的序列号
// 1443   if (!((RfID.data[4] == 0) && (RfID.data[1] == 0) && (RfID.data[2] == 0)
// 1444     && (RfID.data[3] == 0)))
??TransmitApp_DisplayResults_39:
        MOV     DPTR,#RfID + 5
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_DisplayResults_43
        MOV     DPTR,#RfID + 2
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_DisplayResults_43
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_DisplayResults_43
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??TransmitApp_DisplayResults_44 & 0xFFFF
// 1445   {
// 1446     for (i = 0; i < 4; i++)
??TransmitApp_DisplayResults_43:
        MOV     R2,#0x0
// 1447     {
// 1448       dispIDBuf[2*i]   = (RfID.data[i+1]&0xF0)>>4;
??TransmitApp_DisplayResults_45:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#(RfID + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((RfID + 2) >> 8) & 0xff
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     R3,A
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R3
        SWAP    A
        ANL     A,#0xf
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_67:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1449       dispIDBuf[2*i+1] =  RfID.data[i+1]&0x0F;
        MOV     A,#0xf
        ANL     A,R3
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
// 1450     }
??CrossCallReturnLabel_68:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x4
        JC      ??TransmitApp_DisplayResults_45
// 1451     for (i = 0; i < 8; i++)
        MOV     R2,#0x0
// 1452     {
// 1453       if (dispIDBuf[i] <= 0x09)
??TransmitApp_DisplayResults_46:
        MOV     ?V0 + 2,R2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_92:
        CLR     C
        SUBB    A,#0xa
        MOV     A,#0x6
        JNC     ??TransmitApp_DisplayResults_47
// 1454         dispIDBuf[i] += '0';
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_93:
        ADD     A,#0x30
        SJMP    ??TransmitApp_DisplayResults_48
// 1455       else if (dispIDBuf[i] >= 0x0A)
// 1456         dispIDBuf[i] += 'A' - 10;
??TransmitApp_DisplayResults_47:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
// 1457     }
??CrossCallReturnLabel_94:
        ADD     A,#0x37
??TransmitApp_DisplayResults_48:
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??TransmitApp_DisplayResults_46
// 1458     dispBuf[11][0] = 'I';
        MOV     A,#-0x42
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
// 1459     dispBuf[11][1] = 'D';
        MOV     A,#-0x41
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x44
        MOVX    @DPTR,A
// 1460     dispBuf[11][2] = ':';
        MOV     A,#-0x40
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3a
        MOVX    @DPTR,A
// 1461     for (i = 0; i < 8; i++)
        MOV     R2,#0x0
// 1462     {
// 1463       dispBuf[11][i+3] = dispIDBuf[i];
??TransmitApp_DisplayResults_49:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        LCALL   ??Subroutine42_0 & 0xFFFF
// 1464     }
??CrossCallReturnLabel_91:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x4d
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JNC     ??TransmitApp_DisplayResults_50
        SJMP    ??TransmitApp_DisplayResults_49
// 1465   }
// 1466   else
// 1467   {
// 1468     for (i = 0; i < 16; i++)
??TransmitApp_DisplayResults_44:
        MOV     R2,#0x0
// 1469     {
// 1470       dispBuf[11][i] = ' ';
??TransmitApp_DisplayResults_51:
        MOV     ?V0 + 2,R2
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x50
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1471     }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??TransmitApp_DisplayResults_51
// 1472   }
// 1473     
// 1474   // 滚屏处理
// 1475   if (dispPage == 1)
??TransmitApp_DisplayResults_50:
        MOV     A,#0x1
        XRL     A,R7
        JNZ     ??TransmitApp_DisplayResults_52
// 1476   {        
// 1477     if (*scrollLine > 4) // 第一屏5行
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x5
        JC      ??TransmitApp_DisplayResults_53
// 1478     {
// 1479       *scrollLine = 0;
        CLR     A
        MOVX    @DPTR,A
// 1480     }
// 1481     scrollLineTmp = *scrollLine;
??TransmitApp_DisplayResults_53:
        MOVX    A,@DPTR
        MOV     R6,A
// 1482     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 1483     if (scrollLineTmp > 4)
??CrossCallReturnLabel_53:
        JC      ??TransmitApp_DisplayResults_54
// 1484     {
// 1485       scrollLineTmp = 0;
        MOV     R6,#0x0
// 1486     }
// 1487     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_2 );
??TransmitApp_DisplayResults_54:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 1488     if (scrollLineTmp > 4)
??CrossCallReturnLabel_54:
        JC      ??TransmitApp_DisplayResults_55
// 1489     {
// 1490       scrollLineTmp = 0;
        MOV     R6,#0x0
// 1491     }
// 1492     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_3 );
??TransmitApp_DisplayResults_55:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 1493     if (scrollLineTmp > 4)
??CrossCallReturnLabel_55:
        JC      ??TransmitApp_DisplayResults_56
// 1494     {
// 1495       scrollLineTmp = 0;
        MOV     R6,#0x0
// 1496     }
// 1497     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_4 );
??TransmitApp_DisplayResults_56:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,R1
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine39 & 0xFFFF
// 1498   }
// 1499   else if(dispPage ==2)
// 1500   {
// 1501     if (*scrollLine > 6) // 第二屏7行
// 1502     {
// 1503       *scrollLine = 0;
// 1504     }
// 1505     scrollLineTmp = *scrollLine + 5;
// 1506     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_1 );
// 1507     if (scrollLineTmp > 11)
// 1508     {
// 1509       scrollLineTmp = 5;
// 1510     }
// 1511     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_2 );
// 1512     if (scrollLineTmp > 11)
// 1513     {
// 1514       scrollLineTmp = 5;
// 1515     }
// 1516     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_3 );
// 1517     if (scrollLineTmp > 11)
// 1518     {
// 1519       scrollLineTmp = 5;
// 1520     }
// 1521     HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_4 );
// 1522   }
// 1523 #endif // LCD_SUPPORTED
// 1524 }
??CrossCallReturnLabel_81:
        MOV     A,#-0x32
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 226)
??TransmitApp_DisplayResults_52:
        MOV     A,#0x2
        XRL     A,R7
        JNZ     ??CrossCallReturnLabel_81
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7
        JC      ??TransmitApp_DisplayResults_57
        CLR     A
        MOVX    @DPTR,A
??TransmitApp_DisplayResults_57:
        MOVX    A,@DPTR
        ADD     A,#0x5
        MOV     R6,A
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_56:
        JC      ??TransmitApp_DisplayResults_58
        MOV     R6,#0x5
??TransmitApp_DisplayResults_58:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_57:
        JC      ??TransmitApp_DisplayResults_59
        MOV     R6,#0x5
??TransmitApp_DisplayResults_59:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_58:
        JNC     $+5
        LJMP    ??TransmitApp_DisplayResults_56 & 0xFFFF
        MOV     R6,#0x5
        LJMP    ??TransmitApp_DisplayResults_56 & 0xFFFF
        CFI EndBlock cfiBlock119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond120 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+-1
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond123 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker125 Using cfiCommon1
        CFI (cfiPicker125) NoFunction
        CFI (cfiPicker125) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
        MOV     DPTR,#soundVb
        MOVX    A,@DPTR
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiPicker125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond126 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
        MOV     DPTR,#gasFlame
        MOVX    A,@DPTR
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
        MOV     DPTR,#motor
        MOVX    A,@DPTR
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker135 Using cfiCommon1
        CFI (cfiPicker135) NoFunction
        CFI (cfiPicker135) Picker
        MOV     A,DPL
        ADD     A,?V0 + 2
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiPicker135
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        MOV     DPL,A
        MOV     A,DPH
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker146 Using cfiCommon1
        CFI (cfiPicker146) NoFunction
        CFI (cfiPicker146) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond147 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker150 Using cfiCommon1
        CFI (cfiPicker150) NoFunction
        CFI (cfiPicker150) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_75:
        SUBB    A,#0xc
        RET
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiPicker150

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond151 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker154 Using cfiCommon1
        CFI (cfiPicker154) NoFunction
        CFI (cfiPicker154) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_76:
        SUBB    A,#0x5
        RET
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiPicker154

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond155 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_57
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_58
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_53
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_54
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_55
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_82:
        INC     R6
        MOV     A,R6
        CLR     C
        RET
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_56
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_57
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_58
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_53
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_54
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_55
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 226)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,DPH
        ADDC    A,?V0 + 1
        MOV     R3,A
        LCALL   ??HalLcdWriteString?relay
        RET
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiPicker173 Using cfiCommon1
        CFI (cfiPicker173) NoFunction
        CFI (cfiPicker173) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_97:
        RET
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond174 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_26
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_27
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_28
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiPicker179 Using cfiCommon1
        CFI (cfiPicker179) NoFunction
        CFI (cfiPicker179) Picker
        MOV     R4,A
        MOV     R5,A
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiPicker179
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiCond180 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_26
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_27
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_28
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 228)
        CFI Block cfiPicker186 Using cfiCommon1
        CFI (cfiPicker186) NoFunction
        CFI (cfiPicker186) Picker
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiPicker186
// 1525 
// 1526 /*******************************************************************************
// 1527  * @fn      TransmitAPP_CallBack
// 1528  *
// 1529  * @brief   Send data OTA.
// 1530  *
// 1531  * @param   port - UART port.
// 1532  * @param   event - the UART port event flag.
// 1533  *
// 1534  * @return  none
// 1535  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1536 void TransmitAPP_CallBack(uint8 port, uint8 event)
TransmitAPP_CallBack:
        CFI Block cfiBlock187 Using cfiCommon0
        CFI Function TransmitAPP_CallBack
        CODE
// 1537 { 
        ; Saved register size: 0
        ; Auto size: 0
// 1538 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock187
// 1539 
// 1540 /*******************************************************************************
// 1541 *******************************************************************************/
// 1542 /*********************************************************************
// 1543  * @fn      Smart_home_Display
// 1544  *
// 1545  * @brief   屏幕回显函数，定义了内容如何显示.
// 1546  *
// 1547  * @param   port - UART port.
// 1548  * @param   event - the UART port event flag.
// 1549  *
// 1550  * @return  none
// 1551  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1552 static void Smart_home_Display(void)
Smart_home_Display:
        CFI Block cfiBlock188 Using cfiCommon0
        CFI Function Smart_home_Display
        CODE
// 1553 {
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1554 #if defined LCD_SUPPORTED
// 1555   static uint8 percent;
// 1556   switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_0 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_1 & 0xFFFF
// 1557   {
// 1558     default:    
// 1559     case 0:
// 1560       HalLcdWriteString( "      Menu      ", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "      Menu      ">` & 0xff
        MOV     R3,#(`?<Constant "      Menu      ">` >> 8) & 0xff
        LCALL   ?Subroutine22 & 0xFFFF
// 1561       //HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
// 1562       //清除屏幕显示
// 1563       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1564       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1565       
// 1566       switch(LCD_Page)
??CrossCallReturnLabel_50:
        MOV     DPTR,#LCD_Page
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_2 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_4 & 0xFFFF
// 1567       {
// 1568         default:
// 1569         case 0:
// 1570         { 
// 1571           //DeviceInfo* Devhum = &DeviceList[Humit];
// 1572           //DeviceInfo* DevSound = &DeviceList[soundVb];
// 1573           //第一页第二行显示温度
// 1574           //      第三行显示光照
// 1575           if(Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#Humit
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Display_5
// 1576           {    
// 1577               HalLcdWriteStringValueValue( "Hum:", Humit.data[0], 10, "% T_1:", Humit.data[1], 10, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#Humit + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#`?<Constant "% T_1:">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "% T_1:">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0xa
        MOV     DPTR,#Humit + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hum:">` & 0xff
        MOV     R3,#(`?<Constant "Hum:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??Smart_home_Display_6
// 1578           }
// 1579           else
// 1580           {
// 1581               HalLcdWriteString( "Hum:OFF T_1:OFF", HAL_LCD_LINE_2 ); 
??Smart_home_Display_5:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Hum:OFF T_1:OFF">` & 0xff
        MOV     R3,#(`?<Constant "Hum:OFF T_1:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1582           }
// 1583           
// 1584           
// 1585           if(soundVb.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
??Smart_home_Display_6:
        MOV     DPTR,#soundVb
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Display_7
// 1586           {    
// 1587               if(soundVb.data[0] & 0x01 == 0x01) { HalLcdWriteString( "Sound: Voice", HAL_LCD_LINE_3 ); }
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     R1,#0x3
        JNC     ??Smart_home_Display_8
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Sound: Voice">` & 0xff
        MOV     R3,#(`?<Constant "Sound: Voice">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_9
// 1588               else if(soundVb.data[0] & 0x02 == 0x02) { HalLcdWriteString( "Sound: Vibration", HAL_LCD_LINE_3 ); }
// 1589               else if(soundVb.data[0] & 0x03 == 0x03) { HalLcdWriteString( "Sound: All", HAL_LCD_LINE_3 ); }
// 1590               else {HalLcdWriteString( "Sound: None", HAL_LCD_LINE_3 );}
??Smart_home_Display_8:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Sound: None">` & 0xff
        MOV     R3,#(`?<Constant "Sound: None">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_9
// 1591           }
// 1592           else
// 1593           {
// 1594               HalLcdWriteString( "Sound:OFFLINE", HAL_LCD_LINE_3 ); 
??Smart_home_Display_7:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "Sound:OFFLINE">` & 0xff
        MOV     R3,#(`?<Constant "Sound:OFFLINE">` >> 8) & 0xff
??Smart_home_Display_9:
        LCALL   ??HalLcdWriteString?relay
// 1595           }
// 1596        
// 1597           //HalLcdWriteStringValue( "Sound:", SoundVb, 16, HAL_LCD_LINE_3 );
// 1598           
// 1599           
// 1600           //显示最下面的百分比条
// 1601           percent = (1 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent
        MOV     A,#0x19
??Smart_home_Display_10:
        LCALL   ?Subroutine9 & 0xFFFF
// 1602           HalLcdDisplayPercentBar("",percent);
// 1603           break;
??CrossCallReturnLabel_18:
        LJMP    ??Smart_home_Display_11 & 0xFFFF
// 1604         }
// 1605         case 1:
// 1606         {
// 1607           //第二页只有光照
// 1608           //第一页第二行显示温度
// 1609           //      第三行显示光照
// 1610           //DeviceInfo* Devtmp = &DeviceList[TempLight];
// 1611           if(TempLight.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
??Smart_home_Display_2:
        MOV     DPTR,#TempLight
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     $+5
        LJMP    ??Smart_home_Display_12 & 0xFFFF
// 1612           {    
// 1613               static uint16 Light;
// 1614               static uint8 lightmp;
// 1615           
// 1616 
// 1617               lightmp = TempLight.data[3];
        MOV     DPTR,#TempLight + 4
        MOVX    A,@DPTR
        MOV     DPTR,#??lightmp
        MOVX    @DPTR,A
// 1618               Light = (uint16)TempLight.data[4];
        MOV     DPTR,#TempLight + 5
        MOVX    A,@DPTR
        MOV     DPTR,#??Light
        LCALL   ??Subroutine45_0 & 0xFFFF
// 1619               memcpy(&Light,&lightmp,sizeof(lightmp));
??CrossCallReturnLabel_102:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#??lightmp & 0xff
        MOV     R5,#(??lightmp >> 8) & 0xff
        MOV     R2,#??Light & 0xff
        MOV     R3,#(??Light >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1620           
// 1621               HalLcdWriteStringValueValue( "Temper_2:", TempLight.data[0], 10, ".", TempLight.data[1], 10, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#TempLight + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#`?<Constant ".">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant ".">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0xa
        MOV     DPTR,#TempLight + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Temper_2:">` & 0xff
        MOV     R3,#(`?<Constant "Temper_2:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1622               HalLcdWriteStringValue( "Light:", Light, 10, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R1,#0xa
        MOV     DPTR,#??Light
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#`?<Constant "Light:">` & 0xff
        MOV     R3,#(`?<Constant "Light:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1623               
// 1624               osal_msg_deallocate((uint8*)Light);
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     DPTR,#??Light
        LCALL   ?Subroutine14 & 0xFFFF
// 1625           }
??CrossCallReturnLabel_29:
        SJMP    ??Smart_home_Display_13
// 1626           else
// 1627           {
// 1628               HalLcdWriteString( "Temper_2:OFF", HAL_LCD_LINE_2 ); 
??Smart_home_Display_12:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Temper_2:OFF">` & 0xff
        MOV     R3,#(`?<Constant "Temper_2:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1629               HalLcdWriteString( "Light:OFF", HAL_LCD_LINE_3 ); 
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "Light:OFF">` & 0xff
        MOV     R3,#(`?<Constant "Light:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1630           }
// 1631           
// 1632           //显示最下面的百分比条
// 1633           percent = (2 * 100) / LCD_PAGE_MAX;
??Smart_home_Display_13:
        MOV     DPTR,#??percent
        MOV     A,#0x32
        LJMP    ??Smart_home_Display_10 & 0xFFFF
// 1634           HalLcdDisplayPercentBar("",percent);
// 1635           break;
// 1636           
// 1637           
// 1638         }
// 1639         
// 1640       case 2:
// 1641       {
// 1642           static uint16 Data1;
// 1643           static uint16 Data2;
// 1644           //显示最下面的百分比条
// 1645           //DeviceInfo* rfid = &DeviceList[RfID];
// 1646           
// 1647           Data1 = ( RfID.data[1] << 8) | RfID.data[2];
??Smart_home_Display_3:
        MOV     DPTR,#RfID + 2
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#??Data1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1648           Data2 = ( RfID.data[3] << 8) | RfID.data[4];
        MOV     DPTR,#RfID + 4
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#??Data2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1649           
// 1650           switch(RfID.data[0])
        MOV     DPTR,#RfID + 1
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_Display_14
        DEC     A
        JZ      ??Smart_home_Display_15
        DEC     A
        JZ      ??Smart_home_Display_16
        DEC     A
        JZ      ??Smart_home_Display_17
        DEC     A
        JZ      ??Smart_home_Display_18
        SJMP    ??Smart_home_Display_19
// 1651           {
// 1652           case 0x01:
// 1653             HalLcdWriteString( "MFOne-S50", HAL_LCD_LINE_2 );
??Smart_home_Display_14:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MFOne-S50">` & 0xff
        MOV     R3,#(`?<Constant "MFOne-S50">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_20
// 1654             break;
// 1655           case 0x02:
// 1656             HalLcdWriteString( "MFOne-S70", HAL_LCD_LINE_2 );
??Smart_home_Display_15:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MFOne-S70">` & 0xff
        MOV     R3,#(`?<Constant "MFOne-S70">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_20
// 1657             break;
// 1658           case 0x03:
// 1659             HalLcdWriteString( "MF-UltraLight", HAL_LCD_LINE_2 );
??Smart_home_Display_16:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MF-UltraLight">` & 0xff
        MOV     R3,#(`?<Constant "MF-UltraLight">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_20
// 1660             break;
// 1661           case 0x04:
// 1662             HalLcdWriteString( "MF-Pro", HAL_LCD_LINE_2 );
??Smart_home_Display_17:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MF-Pro">` & 0xff
        MOV     R3,#(`?<Constant "MF-Pro">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_20
// 1663             break;
// 1664           case 0x05:
// 1665             HalLcdWriteString( "MF-DesFire", HAL_LCD_LINE_2 );
??Smart_home_Display_18:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MF-DesFire">` & 0xff
        MOV     R3,#(`?<Constant "MF-DesFire">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_20
// 1666             break;
// 1667             
// 1668           default:
// 1669             HalLcdWriteString( "No Card", HAL_LCD_LINE_2 );
??Smart_home_Display_19:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "No Card">` & 0xff
        MOV     R3,#(`?<Constant "No Card">` >> 8) & 0xff
// 1670             break;
// 1671           }
??Smart_home_Display_20:
        LCALL   ?Subroutine25 & 0xFFFF
// 1672           
// 1673           HalLcdWriteStringValueValue( "ID: ", Data1, 16, "-", Data2, 16, HAL_LCD_LINE_3 );
??CrossCallReturnLabel_59:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#??Data2
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#`?<Constant "-">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "-">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x10
        MOV     DPTR,#??Data1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#`?<Constant "ID: ">` & 0xff
        MOV     R3,#(`?<Constant "ID: ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1674           
// 1675           percent = (3 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent
        MOV     A,#0x4b
        LCALL   ?Subroutine9 & 0xFFFF
// 1676           HalLcdDisplayPercentBar("",percent);
// 1677           
// 1678           osal_msg_deallocate((uint8*)Data1);
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     DPTR,#??Data1
        LCALL   ?Subroutine14 & 0xFFFF
// 1679           osal_msg_deallocate((uint8*)Data2);
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     DPTR,#??Data2
        LCALL   ?Subroutine14 & 0xFFFF
// 1680           
// 1681           break;
??CrossCallReturnLabel_31:
        LJMP    ??Smart_home_Display_11 & 0xFFFF
// 1682       }
// 1683       
// 1684       case 3:
// 1685       {        
// 1686           //DeviceInfo* DevGas = &DeviceList[gasFlame];
// 1687           //DeviceInfo* DevInf = &DeviceList[infrared];         
// 1688           
// 1689           if(gasFlame.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
??Smart_home_Display_4:
        MOV     DPTR,#gasFlame
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Display_21
// 1690           {    
// 1691               if(gasFlame.data[0] & 0x01 == 0x01) { HalLcdWriteString( "GasFlame: Flame", HAL_LCD_LINE_2 ); }         //0位是火焰
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     R1,#0x2
        JNC     ??Smart_home_Display_22
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "GasFlame: Flame">` & 0xff
        MOV     R3,#(`?<Constant "GasFlame: Flame">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_23
// 1692               else if(gasFlame.data[0] & 0x02 == 0x02) { HalLcdWriteString( "GasFlame: Gas", HAL_LCD_LINE_2 ); }//1位是气体
// 1693               else if(gasFlame.data[0] & 0x03 == 0x03) { HalLcdWriteString( "GasFlame: All", HAL_LCD_LINE_2 ); }
// 1694               else {HalLcdWriteString( "GasFlame: None", HAL_LCD_LINE_2 );}
??Smart_home_Display_22:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "GasFlame: None">` & 0xff
        MOV     R3,#(`?<Constant "GasFlame: None">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_23
// 1695           }
// 1696           else
// 1697           {
// 1698               HalLcdWriteString( "GasFlame: OFF", HAL_LCD_LINE_2 ); 
??Smart_home_Display_21:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "GasFlame: OFF">` & 0xff
        MOV     R3,#(`?<Constant "GasFlame: OFF">` >> 8) & 0xff
??Smart_home_Display_23:
        LCALL   ??HalLcdWriteString?relay
// 1699           }
// 1700           
// 1701           
// 1702           if(infrared.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
        MOV     DPTR,#infrared
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Display_24
// 1703           {    
// 1704               if(infrared.data[0] == 0x01)
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     R1,#0x3
        JNZ     ??Smart_home_Display_25
// 1705               {
// 1706                 HalLcdWriteString("Infrared: Human", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Infrared: Human">` & 0xff
        MOV     R3,#(`?<Constant "Infrared: Human">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_26
// 1707               }
// 1708               else{
// 1709                 HalLcdWriteString("Infrared: NoHuman", HAL_LCD_LINE_3 );
??Smart_home_Display_25:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Infrared: NoHuman">` & 0xff
        MOV     R3,#(`?<Constant "Infrared: NoHuman">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_26
// 1710               }
// 1711           }
// 1712           else
// 1713           {
// 1714               HalLcdWriteString( "Infrared: OFF", HAL_LCD_LINE_3 ); 
??Smart_home_Display_24:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "Infrared: OFF">` & 0xff
        MOV     R3,#(`?<Constant "Infrared: OFF">` >> 8) & 0xff
??Smart_home_Display_26:
        LCALL   ??HalLcdWriteString?relay
// 1715           }         
// 1716 
// 1717           
// 1718           
// 1719           //显示最下面的百分比条
// 1720           percent = (4 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent
        MOV     A,#0x64
        LJMP    ??Smart_home_Display_10 & 0xFFFF
// 1721           HalLcdDisplayPercentBar("",percent);
// 1722           break;
// 1723       }
// 1724           
// 1725     }
// 1726       
// 1727       break;
// 1728     
// 1729     case 1:
// 1730       HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
??Smart_home_Display_0:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Relay Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Relay Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine22 & 0xFFFF
// 1731       //清除屏幕显示
// 1732       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1733       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1734       //这里的deviceStatus 可能是0x00,所以会出现bug 这个0在Device检查时被设置 2.24
// 1735       if(relay.deviceNWKStatus == DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_51:
        MOV     DPTR,#relay
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x1
        JNZ     ??Smart_home_Display_27
// 1736       {
// 1737         HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Relay Offline">` & 0xff
        MOV     R3,#(`?<Constant "Relay Offline">` >> 8) & 0xff
??Smart_home_Display_28:
        LCALL   ??HalLcdWriteString?relay
        LJMP    ??Smart_home_Display_11 & 0xFFFF
// 1738       }
// 1739       else  //设备在线回显  设备在线可能是 0/1
// 1740       {
// 1741         HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
??Smart_home_Display_27:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Relay Online">` & 0xff
        MOV     R3,#(`?<Constant "Relay Online">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1742         //继电器控制界面
// 1743 
// 1744         if((relay.data[0]& 0x02) == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
        MOV     DPTR,#relay + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??Smart_home_Display_29
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:ON">` & 0xff
        MOV     R3,#(`?<Constant "K1:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1745         if((relay.data[0] & 0x01) == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
??Smart_home_Display_29:
        MOV     DPTR,#relay + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_Display_30
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K1:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1746         if((relay.data[0] & 0x20) == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
??Smart_home_Display_30:
        MOV     DPTR,#relay + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??Smart_home_Display_31
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:ON">` & 0xff
        MOV     R3,#(`?<Constant "K2:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1747         if((relay.data[0] & 0x10) == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}      
??Smart_home_Display_31:
        MOV     DPTR,#relay + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        JNC     ??Smart_home_Display_11
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K2:OFF">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_28
// 1748       }
// 1749 
// 1750       break;
// 1751     
// 1752     case 2:
// 1753       HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
??Smart_home_Display_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Motor Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine22 & 0xFFFF
// 1754       //清除屏幕显示
// 1755       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1756       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1757       if(motor.deviceNWKStatus == DEVICE_NWK_OFFLINE)
??CrossCallReturnLabel_52:
        MOV     DPTR,#motor
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x1
        JNZ     ??Smart_home_Display_32
// 1758       {
// 1759         HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Motor Offline">` & 0xff
        MOV     R3,#(`?<Constant "Motor Offline">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_28
// 1760       }
// 1761       else  //设备在线回显  设备在线可能是 0/1
// 1762       {
// 1763         HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 ); 
??Smart_home_Display_32:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Motor Online">` & 0xff
        MOV     R3,#(`?<Constant "Motor Online">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1764         //电机控制界面
// 1765         switch(motor.data[1])
        MOV     DPTR,#motor + 2
        MOVX    A,@DPTR
        ADD     A,#-0x2
        JZ      ??Smart_home_Display_33
        DEC     A
        MOV     R1,#0x2
        JZ      ??Smart_home_Display_34
// 1766         {
// 1767         default:
// 1768         case 1:
// 1769           HalLcdWriteString( "Status: STOP", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Status: STOP">` & 0xff
        MOV     R3,#(`?<Constant "Status: STOP">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_35
// 1770           break;
// 1771         case 2:
// 1772           HalLcdWriteString( "Status: FORWARD", HAL_LCD_LINE_2 );
??Smart_home_Display_33:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Status: FORWARD">` & 0xff
        MOV     R3,#(`?<Constant "Status: FORWARD">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_35
// 1773           break;
// 1774         case 3:
// 1775           HalLcdWriteString( "Status: BACKWARD", HAL_LCD_LINE_2 );
??Smart_home_Display_34:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Status: BACKWARD">` & 0xff
        MOV     R3,#(`?<Constant "Status: BACKWARD">` >> 8) & 0xff
// 1776           break;
// 1777         }
// 1778         
// 1779         HalLcdWriteStringValue( "Speed:", motor.data[0], 10, HAL_LCD_LINE_3 );
// 1780       
// 1781       }
// 1782   }
??Smart_home_Display_35:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R1,#0xa
        MOV     DPTR,#motor + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Speed:">` & 0xff
        MOV     R3,#(`?<Constant "Speed:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1783   
// 1784 #endif // LCD_SUPPORTED  
// 1785 }
??Smart_home_Display_11:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock188

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond189 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond192 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        RET
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond196 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker199 Using cfiCommon1
        CFI (cfiPicker199) NoFunction
        CFI (cfiPicker199) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
        RET
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiPicker199

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond200 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker202 Using cfiCommon1
        CFI (cfiPicker202) NoFunction
        CFI (cfiPicker202) Picker
        MOV     A,#-0x80
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiPicker202
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiCond203 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker209 Using cfiCommon1
        CFI (cfiPicker209) NoFunction
        CFI (cfiPicker209) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond210 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond211) CFA_SP SP+0
        CFI (cfiCond211) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker212 Using cfiCommon1
        CFI (cfiPicker212) NoFunction
        CFI (cfiPicker212) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLcdDisplayPercentBar
        ; Setup parameters for call to function HalLcdDisplayPercentBar
        MOV     R1,A
        MOV     R2,#`?<Constant "">` & 0xff
        MOV     R3,#(`?<Constant "">` >> 8) & 0xff
        LCALL   ??HalLcdDisplayPercentBar?relay
        RET
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiPicker212

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Light:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??lightmp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Data1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Data2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for autoScrollEnable>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Motor_cmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Motor_cmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_DeviceNWKCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_DeviceNWKCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_SendToRelayMSG?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_SendToRelayMSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_SendToMotorMSG?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_SendToMotorMSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_DisplayResults?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitApp_DisplayResults

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitAPP_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TransmitAPP_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Display?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Display

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TransmitApp">`:
        DB "TransmitApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor max Speed">`:
        DB "Motor max Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor min Speed">`:
        DB "Motor min Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Allow networking">`:
        DB "Allow networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Ban   networking">`:
        DB "Ban   networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "H:">`:
        DB "H:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "%">`:
        DB "%"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "OFF">`:
        DB "OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant " T:">`:
        DB " T:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "C">`:
        DB "C"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ".">`:
        DB "."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "C ">`:
        DB "C "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "L">`:
        DB "L"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "T:OFF L:OFF">`:
        DB "T:OFF L:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "K1:">`:
        DB "K1:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "off">`:
        DB "off"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "on">`:
        DB "on"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " K2:">`:
        DB " K2:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor:">`:
        DB "Motor:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Stop">`:
        DB "Stop"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Forward">`:
        DB "Forward"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Backward">`:
        DB "Backward"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Speed:">`:
        DB "Speed:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "RPS">`:
        DB "RPS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Gas:">`:
        DB "Gas:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Alarm!">`:
        DB "Alarm!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ON">`:
        DB "ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Flame:">`:
        DB "Flame:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Sound:">`:
        DB "Sound:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Vibrate:">`:
        DB "Vibrate:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Infrared:">`:
        DB "Infrared:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Human!">`:
        DB "Human!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Card:">`:
        DB "Card:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MFOne-S50">`:
        DB "MFOne-S50"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MFOne-S70">`:
        DB "MFOne-S70"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-UltraLight">`:
        DB "MF-UltraLight"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-Pro">`:
        DB "MF-Pro"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-DesFire">`:
        DB "MF-DesFire"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "      Menu      ">`:
        DB "      Menu      "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hum:">`:
        DB "Hum:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "% T_1:">`:
        DB "% T_1:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hum:OFF T_1:OFF">`:
        DB "Hum:OFF T_1:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Sound: Voice">`:
        DB "Sound: Voice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "Sound: Vibration"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "Sound: All"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Sound: None">`:
        DB "Sound: None"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Sound:OFFLINE">`:
        DB "Sound:OFFLINE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Temper_2:">`:
        DB "Temper_2:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Light:">`:
        DB "Light:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Temper_2:OFF">`:
        DB "Temper_2:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Light:OFF">`:
        DB "Light:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "No Card">`:
        DB "No Card"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ID: ">`:
        DB "ID: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "-">`:
        DB "-"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GasFlame: Flame">`:
        DB "GasFlame: Flame"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "GasFlame: Gas"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "GasFlame: All"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GasFlame: None">`:
        DB "GasFlame: None"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GasFlame: OFF">`:
        DB "GasFlame: OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Infrared: Human">`:
        DB "Infrared: Human"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Infrared: NoHuman">`:
        DB "Infrared: NoHuman"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Infrared: OFF">`:
        DB "Infrared: OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Contrling">`:
        DB "Relay Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Offline">`:
        DB "Relay Offline"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Online">`:
        DB "Relay Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:ON">`:
        DB "K1:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:OFF">`:
        DB "K1:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:ON">`:
        DB "K2:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:OFF">`:
        DB "K2:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Contrling">`:
        DB "Motor Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Offline">`:
        DB "Motor Offline"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Online">`:
        DB "Motor Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Status: STOP">`:
        DB "Status: STOP"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Status: FORWARD">`:
        DB "Status: FORWARD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Status: BACKWARD">`:
        DB "Status: BACKWARD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_427a0000:
        DD 427A0000H

        END
// 1786 
// 
// 4 544 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//   768 bytes in segment XDATA_ROM_C
//   220 bytes in segment XDATA_Z
// 
// 4 617 bytes of CODE  memory
//   764 bytes of CONST memory (+ 4 bytes shared)
//   221 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
