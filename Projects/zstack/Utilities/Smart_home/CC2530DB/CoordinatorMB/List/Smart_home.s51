///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        25/Mar/2021  01:37:30 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\Source\Smart_home.c                 /
//    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\ /
//                          Projects\zstack\Utilities\Smart_home\Source\Smart /
//                          _home.c -D LCD_SUPPORTED -D ZDO_COORDINATOR -D    /
//                          xNV_RESTORE -D xNV_INIT -D xREFLECTOR -D          /
//                          xHAL_UART=TRUE -D xHAL_UART_TEST -lC              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\ -lA    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\Source\ -I              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\   /
//                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\include\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530MB\ -I        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\include\ -I D:\毕设\CC2530-smart_home\Project /
//                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\. /
//                          .\..\Components\mac\high_level\ -I                /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\ -I               /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\ -I D:\毕设\CC2530-smart_home\Projects\zstack\ /
//                          Utilities\Smart_home\CC2530DB\..\..\..\..\..\Comp /
//                          onents\osal\include\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          services\saddr\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\af\ -I D:\毕设\CC2530-smart_home\Projects\z /
//                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\. /
//                          .\Components\stack\nwk\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sapi\ -I D:\毕设\CC2530-smart_home\Projects /
//                          \zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\ -I                      /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sys\ -I D:\毕设\CC2530-smart_home\Projects\ /
//                          zstack\Utilities\Smart_home\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\zdo\ -I                       /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\ -I D:\毕设\CC2530-smart_home\Projects\zstac /
//                          k\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\ -Ohz                           /
//    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\Smart_h /
//                          ome.s51                                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Smart_home

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Smart_home_Display?relay,0203H
        FUNCTION ??Smart_home_HandleKeys?relay,0203H
        PUBLIC ??Smart_home_Init?relay
        FUNCTION ??Smart_home_Init?relay,0203H
        PUBLIC ??Smart_home_ProcessEvent?relay
        FUNCTION ??Smart_home_ProcessEvent?relay,0203H
        FUNCTION ??Smart_home_ProcessMSGCmd?relay,0203H
        FUNCTION ??Smart_home_Relay_Ctl?relay,0203H
        PUBLIC Coordinator_Msg
        PUBLIC DeviceList
        PUBLIC Smart_home_ClusterList_IN
        PUBLIC Smart_home_ClusterList_OUT
        FUNCTION Smart_home_Display,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 31, STACK
        FUNCTION Smart_home_HandleKeys,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Smart_home_Init
        FUNCTION Smart_home_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC Smart_home_ProcessEvent
        FUNCTION Smart_home_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION Smart_home_ProcessMSGCmd,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION Smart_home_Relay_Ctl,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC Smart_home_SimpleDesc
        PUBLIC Smart_home_TaskID
        PUBLIC Smart_home_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
HalLedSet           SYMBOL "HalLedSet"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_mem_free       SYMBOL "osal_mem_free"
AF_DataRequest      SYMBOL "AF_DataRequest"
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
HalLcdDisplayPercentBar SYMBOL "HalLcdDisplayPercentBar"
memcpy              SYMBOL "memcpy"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdDisplayPercentBar?relay SYMBOL "?relay", HalLcdDisplayPercentBar
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??NLME_PermitJoiningRequest?relay SYMBOL "?relay", NLME_PermitJoiningRequest
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??memcpy?relay      SYMBOL "?relay", memcpy
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
Smart_home_Init     SYMBOL "Smart_home_Init"
??Smart_home_Init?relay SYMBOL "?relay", Smart_home_Init
Smart_home_ProcessEvent SYMBOL "Smart_home_ProcessEvent"
??Smart_home_ProcessEvent?relay SYMBOL "?relay", Smart_home_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdDisplayPercentBar
        FUNCTION HalLcdDisplayPercentBar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdDisplayPercentBar?relay
        FUNCTION ??HalLcdDisplayPercentBar?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,00H
        EXTERN ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??NLME_PermitJoiningRequest?relay
        FUNCTION ??NLME_PermitJoiningRequest?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// D:\毕设\CC2530-smart_home\Projects\zstack\Utilities\Smart_home\Source\Smart_home.c
//    1 /**************************************************************************************************
//    2   文件名：Smart_home.c
//    3   作 者： 柳成林
//    4   功 能： 作为网关节点，实现传感器信息的采集，并可以通过其控制一些节点
//    5           终端设备主要分为8个，分别为
//    6      1、温度与光照度传感器；2、烟雾与火焰传感器；3、继电器；4、温湿度传感器；
//    7      5、声音与震动传感器；  6、人体红外检测传感器；7、电机；8、RFID检测器。
//    8   更新日志(2021)
//    9   3.13
//   10   + 新增 8种传感器的Project并设置好编译情况
//   11   + 修改 Smart_home_ProcessEvent() （增加各种处理器的事件）
//   12          Smart_home_Init()         （初始化内容修改，添加设备默认离线）
//   13   3.14
//   14   + 修改 Smart_home_ProcessMSGCmd()（添加终端节点类型判断，具体处理留空）
//   15   + 新增 Hal层各种传感器驱动(头文件)
//   16          ClusterList (添加8个终端，分开出与入)
//   17   3.17
//   18   + 修改 Smart_home_ProcessMSGCmd() （完成接收后对于各终端处理）
//   19   + 添加 Smart_home_HandleKeys()     (修改原来函数增添概念，未补全)
//   20   + 删除 static void Smart_home_Send(void);
//   21          static void Smart_home_Resp(void);
//   22          两个函数
//   23   3.19
//   24   + 检查 出现的warning并做标识
//   25   + 修改 Smart_home_HandleKeys() （补全设计函数）
//   26   + 新增 Smart_home_Device_check() (设备是否在线检查)
//   27 
//   28   3.21
//   29   + 新增 DeviceList以方便初始化和设备在线检查（本地变量部分）
//   30          Smart_home_Display()    （屏幕显示，未补全）
//   31          Smart_home_Key_add()     (控制按键，附加项)
//   32   + 修改 Smart_home_Device_check()
//   33          Smart_home_Init()
//   34          Smart_home_ProcessMSGCmd()
//   35          调整有关DeviceList（设备列表）部分的修改
//   36          直接使用数组位置号作为设备编号
//   37          按键控制方式，用按键情况控制
//   38   3.22
//   39   + 修改 Smart_home_Display()    （屏幕显示，补全）
//   40          Smart_home_Key_add()     (屏幕显示中的电机与继电器部分加入这里)
//   41          重写别名方式减少内存损耗
//   42          出现无法初始化的问题，需要项目重构
//   43   3.23
//   44   + Warn 代码初始化后会产生直接进入key的情况,需debug
//   45          OK键问题无法修复，放弃使用OK键，修改为Cencel组网 禁止组网
//   46   3.23 正式完成网关节点部分，（显示函数部分除外）
//   47   3.24 
//   48   + 修改 Smart_home_Key_add()与display函数整合
//   49   + bug:在每十秒一次调用的周期检查函数中会导致显示屏将近一秒时间不显示
//   50     已解决： 在状态0的时候作为在线即可
//   51   + 完成 显示功能设置
//   52    
//   53   经调试程序无bug，可以接收各个传感器消息。//3.22
//   54   当我没说。。好像出了内存问题//3.22
//   55   项目重构啦！，现在又只有一个小问题了/3.23
//   56 *********************************************************************/
//   57 
//   58 /*********************************************************************
//   59  * INCLUDES
//   60  */
//   61 
//   62 #include "OSAL.h"
//   63 #include "AF.h"
//   64 #include "ZDObject.h"
//   65 #include "ZDProfile.h"
//   66 #include "nwk_util.h"
//   67 
//   68 #include "Smart_home.h"
//   69 #include "OnBoard.h"
//   70 
//   71 #include "DebugTrace.h"
//   72 #include "string.h"
//   73 
//   74 /* HAL */
//   75 #include "hal_lcd.h"
//   76 #include "hal_led.h"
//   77 #include "hal_key.h"
//   78 #include "hal_uart.h"
//   79 
//   80 /*********************************************************************
//   81  * MACROS
//   82  */
//   83 /*设备链接相关设置*/
//   84 /*判断设备是否在线的最大次数*/
//   85 #define DEVICE_HEART_BEAT    3
//   86 #define DEVICE_CHECK_DELAY   10000
//   87 
//   88 /*LCD相关设置*/
//   89 /*单屏显示时常   MS*/
//   90 #define LCD_DISPLAY_LENGTH   10000
//   91 #define LCD_DISPLAY_TIMER    1000  //多久更新一次 
//   92 
//   93 /*关于显示部分相关的宏*/
//   94 #define LCD_PAGE_MAX         4     //目前目录页最多4页
//   95 
//   96 /*********************************************************************
//   97  * CONSTANTS
//   98  */
//   99 
//  100 #if !defined( SMART_HOME_PORT )
//  101 #define SMART_HOME_PORT  0
//  102 #endif
//  103 
//  104 #if !defined( SMART_HOME_BAUD )
//  105 #define SMART_HOME_BAUD  HAL_UART_BR_38400
//  106 //#define SMART_HOME_BAUD  HAL_UART_BR_115200
//  107 #endif
//  108 
//  109 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  110 #if !defined( SMART_HOME_THRESH )
//  111 #define SMART_HOME_THRESH  64
//  112 #endif
//  113 
//  114 #if !defined( SMART_HOME_RX_SZ )
//  115 #define SMART_HOME_RX_SZ  128
//  116 #endif
//  117 
//  118 #if !defined( SMART_HOME_TX_SZ )
//  119 #define SMART_HOME_TX_SZ  128
//  120 #endif
//  121 
//  122 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  123 #if !defined( SMART_HOME_IDLE )
//  124 #define SMART_HOME_IDLE  6
//  125 #endif
//  126 
//  127 // Loopback Rx bytes to Tx for throughput testing.
//  128 #if !defined( SMART_HOME_LOOPBACK )
//  129 #define SMART_HOME_LOOPBACK  FALSE
//  130 #endif
//  131 
//  132 // This is the max byte count per OTA message.
//  133 #if !defined( SMART_HOME_TX_MAX )
//  134 #define SMART_HOME_TX_MAX  80
//  135 #endif
//  136 
//  137 #define SMART_HOME_RSP_CNT  4
//  138 
//  139 //3.14 This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  140 const cId_t Smart_home_ClusterList_IN[Smart_home_MAX_INCLUSTERS ] =
Smart_home_ClusterList_IN:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
        DW 7
        DW 8
        DW 0
//  141 {
//  142   Smart_home_CLUSTERID_HUMITMSG,              // 温湿度
//  143   Smart_home_CLUSTERID_TEMPLIGHTMSG,          // 温度光照
//  144   Smart_home_CLUSTERID_RFIDMSG,               // 射频卡
//  145   Smart_home_CLUSTERID_GASFLAMEMSG,           // 烟雾火焰
//  146   Smart_home_CLUSTERID_INFRAREDMSG,           // 人体红外
//  147   Smart_home_CLUSTERID_SOUNDVBMSG,            // 声音振动
//  148   Smart_home_CLUSTERID_MOTORSTATUSMSG,        // 直流电机状态信息
//  149   Smart_home_CLUSTERID_RELAYSTATUSMSG         // 继电器
//  150 };
//  151 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  152 const cId_t Smart_home_ClusterList_OUT[Smart_home_MAX_INCLUSTERS ] =
Smart_home_ClusterList_OUT:
        DATA16
        DW 11
        DW 10
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
//  153 {
//  154   Smart_home_CLUSTERID_MOTORCTRL,             //直流电机控制
//  155   Smart_home_CLUSTERID_RELAYCTRL              //继电器控制
//  156 };
//  157 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  158 const SimpleDescriptionFormat_t Smart_home_SimpleDesc =
Smart_home_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 9
        DATA16
        DW Smart_home_ClusterList_IN
        DATA8
        DB 3
        DATA16
        DW Smart_home_ClusterList_OUT
//  159 {
//  160   Smart_home_ENDPOINT,              //  int   Endpoint;
//  161   Smart_home_PROFID,                //  uint16 AppProfId[2];
//  162   Smart_home_DEVICEID,              //  uint16 AppDeviceId[2];
//  163   Smart_home_DEVICE_VERSION,        //  int   AppDevVer:4;
//  164   Smart_home_FLAGS,                 //  int   AppFlags:4;
//  165   Smart_home_MAX_INCLUSTERS,          //  byte  AppNumInClusters;
//  166   (cId_t *)Smart_home_ClusterList_IN,  //  byte *pAppInClusterList;
//  167   Smart_home_MAX_OUTCLUSTERS,          //  byte  AppNumOutClusters;
//  168   (cId_t *)Smart_home_ClusterList_OUT   //  byte *pAppOutClusterList;
//  169 };
//  170 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  171 const endPointDesc_t Smart_home_epDesc =
Smart_home_epDesc:
        DB 1
        DATA16
        DW Smart_home_TaskID
        DW Smart_home_SimpleDesc
        DATA8
        DB 0
//  172 {
//  173   Smart_home_ENDPOINT,
//  174   &Smart_home_TaskID,
//  175   (SimpleDescriptionFormat_t *)&Smart_home_SimpleDesc,
//  176   noLatencyReqs
//  177 };
//  178 
//  179 /*********************************************************************
//  180  * TYPEDEFS
//  181  */
//  182 
//  183 /*********************************************************************
//  184  * GLOBAL VARIABLES
//  185  */
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 uint8 Smart_home_TaskID;    // Task ID for internal task/event processing.
Smart_home_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  188 
//  189 /*********************************************************************
//  190  * EXTERNAL VARIABLES
//  191  */
//  192 
//  193 /*********************************************************************
//  194  * EXTERNAL FUNCTIONS
//  195  */
//  196 
//  197 /*********************************************************************
//  198  * LOCAL VARIABLES
//  199  */
//  200 
//  201 /*3.18 终端节点的设备详细信息缓存*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  202 static uint8 DeviceCnt[Smart_home_MAX_INCLUSTERS];
DeviceCnt:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  203 static int8 Ctrlcase = 0;    //0用来控制屏幕显示，1控制继电器，2控制电机
Ctrlcase:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  204 static int8 LCD_Page  =  0;  //终端状态显示
LCD_Page:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  205 DeviceInfo DeviceList[Smart_home_MAX_INCLUSTERS];                      //设备列表  
DeviceList:
        DS 63
        REQUIRE __INIT_XDATA_Z
//  206 /*********************************************************************************
//  207 //这些似乎会引起内存问题  3.22
//  208 DeviceInfo *Humit = DeviceList+Smart_home_CLUSTERID_HUMITMSG;          //温湿度缓存
//  209 DeviceInfo *TempLight = DeviceList+Smart_home_CLUSTERID_TEMPLIGHTMSG;  // 温度光照缓存
//  210 DeviceInfo *RfID = DeviceList+Smart_home_CLUSTERID_RFIDMSG;            // RFID 信息缓存
//  211 DeviceInfo *gasFlame = DeviceList+Smart_home_CLUSTERID_GASFLAMEMSG;    //气体火焰缓存
//  212 DeviceInfo *infrared = DeviceList+Smart_home_CLUSTERID_INFRAREDMSG;    //人体红外
//  213 DeviceInfo *motor = DeviceList+Smart_home_CLUSTERID_MOTORSTATUSMSG;     //电机状态
//  214 DeviceInfo *relay = DeviceList+Smart_home_CLUSTERID_RELAYSTATUSMSG;    //继电器状态
//  215 DeviceInfo *soundVb = DeviceList+Smart_home_CLUSTERID_SOUNDVBMSG;      //声音震动
//  216 修改如下
//  217 ***********************************************************************************/
//  218 #define Humit     1     //温湿度缓存
//  219 #define TempLight 2     // 温度光照缓存
//  220 #define RfID      3     // RFID 信息缓存
//  221 #define gasFlame  4     //气体火焰缓存
//  222 #define infrared  5     //人体红外
//  223 #define motor     6     //电机状态
//  224 #define relay     7     //继电器状态
//  225 #define soundVb   8     //声音震动
//  226 
//  227 /*3.14 消息发送部分*/
//  228 /*3.17短地址存储*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  229 static afAddrType_t Relay_addr;
Relay_addr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  230 static afAddrType_t Motor_addr;
Motor_addr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  231 
//  232 /*消息发送数组*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  233 byte Coordinator_Msg[MSG_MAX_LEN];
Coordinator_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//  234 
//  235 
//  236 /*3.19 协议栈中有但暂时不知道要他们干嘛的东西*/
//  237 /*3.21 现在我会了！！！*/
//  238 /*3.22 那些没用！删掉了！*/
//  239 //static uint8 Smart_home_MsgID;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  240 static uint8 RelayTransID;  // This is the unique message ID (counter)
RelayTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  241 static uint8 MotorTransID;  // This is the unique message ID (counter)
MotorTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  242 
//  243 /*********************************************************************
//  244  * LOCAL FUNCTIONS
//  245  */
//  246 
//  247 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  248 //static void Smart_home_Key_add(uint8 Ctrlcase);
//  249 static void Smart_home_HandleKeys( byte shift, byte keys );
//  250 static void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  251 static void Smart_home_Device_check(void);
//  252 static void Smart_home_Relay_Ctl(uint8 cmd);
//  253 static void Smart_home_Motor_Ctl(uint8 cmd,uint8 speed);
//  254 static void Smart_home_Display(void);
//  255 
//  256 /*********************************************************************
//  257  * @fn      Smart_home_Init
//  258  *
//  259  * @brief   This is called during OSAL tasks' initialization.
//  260  *
//  261  * @param   task_id - the Task ID assigned by OSAL.
//  262  *
//  263  * @return  none
//  264  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void Smart_home_Init( uint8 task_id )
Smart_home_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Smart_home_Init
        CODE
//  266 {
        FUNCALL Smart_home_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  267   halUARTCfg_t uartConfig;
//  268   uint8 DeviceNum;                                    //DeviceList初始化用变量
//  269 
//  270   Smart_home_TaskID = task_id;
        MOV     DPTR,#Smart_home_TaskID
        MOVX    @DPTR,A
//  271   MotorTransID = 0;
        MOV     DPTR,#MotorTransID
        CLR     A
        MOVX    @DPTR,A
//  272   RelayTransID = 0;
        MOV     DPTR,#RelayTransID
        MOVX    @DPTR,A
//  273 
//  274   afRegister( (endPointDesc_t *)&Smart_home_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Smart_home_epDesc & 0xff
        MOV     R3,#(Smart_home_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  275 
//  276   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  277 
//  278   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  279   uartConfig.baudRate             = SMART_HOME_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  280   uartConfig.flowControl          = TRUE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  281   uartConfig.flowControlThreshold = SMART_HOME_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        LCALL   ?Subroutine12 & 0xFFFF
//  282   uartConfig.rx.maxBufSize        = SMART_HOME_RX_SZ;  // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_25:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        LCALL   ?Subroutine12 & 0xFFFF
//  283   uartConfig.tx.maxBufSize        = SMART_HOME_TX_SZ;  // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_26:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        LCALL   ?Subroutine10 & 0xFFFF
//  284   uartConfig.idleTimeout          = SMART_HOME_IDLE;   // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_20:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  285   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  286   //uartConfig.callBackFunc         = Smart_home_CallBack;
//  287   HalUARTOpen (SMART_HOME_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  288 
//  289 #if defined ( LCD_SUPPORTED )
//  290   HalLcdWriteString( "Smart_home", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Smart_home">` & 0xff
        MOV     R3,#(`?<Constant "Smart_home">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  291 #endif
//  292   
//  293   ZDO_RegisterForZDOMsg( Smart_home_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  294   ZDO_RegisterForZDOMsg( Smart_home_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  295   
//  296   //3.22 显示延时
//  297   osal_start_timerEx( Smart_home_TaskID, SMART_HOME_DISPLAY_EVT, 
//  298                       SMART_HOME_DEVICE_DISPLAY_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x10
        MOV     R5,#0x27
        MOV     R2,#0x10
        LCALL   ??Subroutine33_0 & 0xFFFF
//  299   
//  300   
//  301   //3.14 打开设备在线检测，第一次开启检测延时较长时间
//  302   osal_start_timerEx( Smart_home_TaskID, SMART_HOME_DEVICE_CHECK_EVT, 
//  303                       SMART_HOME_DEVICE_CHECK_DELAY);
??CrossCallReturnLabel_82:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        LCALL   ?Subroutine17 & 0xFFFF
//  304  
//  305   //3.13 关闭LED灯(D4)，表示协调器默认不允许组网
//  306   NLME_PermitJoiningRequest(0x00);
??CrossCallReturnLabel_80:
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        LCALL   ?Subroutine23 & 0xFFFF
//  307   HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
//  308   
//  309   //3.21 初始化页面为0 第一页
//  310   //LCD_Page=0;
//  311   
//  312   //3.13 设备离线状态检测初始化，初始化为离线
//  313   //3.21 修改为DeviceList方式，初始化DeviceCnt
//  314   for(DeviceNum=1;DeviceNum<Smart_home_MAX_INCLUSTERS;DeviceNum++) //只初始化终端
??CrossCallReturnLabel_55:
        MOV     R5,#0x1
//  315   {
//  316     DeviceList[DeviceNum].deviceid = DeviceNum;
??Smart_home_Init_0:
        MOV     DPL,R5
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#DeviceList & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(DeviceList >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,R5
        MOVX    @DPTR,A
//  317     DeviceList[DeviceNum].deviceStatus = DEVICE_OFFLINE;
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
//  318     DeviceCnt[DeviceNum]=0;
        MOV     A,#DeviceCnt & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(DeviceCnt >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  319   }
        INC     R5
        MOV     A,R5
        CLR     C
        SUBB    A,#0x9
        JC      ??Smart_home_Init_0
//  320 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  321 
//  322 /*********************************************************************
//  323  * @fn      Smart_home_ProcessEvent
//  324  *
//  325  * @brief   Generic Application Task event processor.
//  326  *
//  327  * @param   task_id  - The OSAL assigned task ID.
//  328  * @param   events   - Bit map of events to process.
//  329  *
//  330  * @return  Event flags of all unprocessed events.
//  331  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 UINT16 Smart_home_ProcessEvent( uint8 task_id, UINT16 events )
Smart_home_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Smart_home_ProcessEvent
        CODE
//  333 {
        FUNCALL Smart_home_ProcessEvent, Smart_home_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_Display
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  334   (void)task_id;  // Intentionally unreferenced parameter
//  335   afDataConfirm_t *afDataConfirm;
//  336   
//  337   //3.13 数据确认消息字段
//  338   ZStatus_t sentStatus;
//  339   byte sentEP;
//  340   
//  341   if ( events & SYS_EVENT_MSG )   //3.13 系统消息事件
        ANL     A,#0x80
        JNZ     ??Smart_home_ProcessEvent_0
//  342   {
//  343     afIncomingMSGPacket_t *MSGpkt;
//  344 
//  345     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID )) )
//  346     {
//  347       switch ( MSGpkt->hdr.event )
//  348       {
//  349         case ZDO_CB_MSG:           //3.13 ZDO传入消息回调
//  350           Smart_home_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  351           break;
//  352           
//  353         case KEY_CHANGE:           //3.13 按键事件
//  354           Smart_home_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  355           break;
//  356          
//  357         case AF_DATA_CONFIRM_CMD:
//  358         //3.13 接收到此消息，作为对发送的数据包的确认。
//  359         //状态为ZStatus_t类型[在ZComDef.h中定义]
//  360         //消息字段在AF.h中定义
//  361           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  362           sentEP = afDataConfirm->endpoint;
//  363           sentStatus = afDataConfirm->hdr.status;
//  364  
//  365           if ( (ZSuccess == sentStatus) &&
//  366                (Smart_home_epDesc.endPoint == sentEP) )
//  367           {  
//  368             //3.13 在消息发送确认成功后绿灯闪烁一下
//  369             HalLedSet(HAL_LED_1, HAL_LED_MODE_BLINK);
//  370           }
//  371           else
//  372           {
//  373             //3.13 红灯闪烁一下  硬件还没实现
//  374             //HalLedSet(HAL_LED_2, HAL_LED_MODE_BLINK);
//  375           }
//  376           break;
//  377           
//  378         case AF_INCOMING_MSG_CMD:   //3.13 消息传入处理
//  379           //3.13 在消息接收确认成功后绿灯闪烁一下
//  380           Smart_home_ProcessMSGCmd( MSGpkt );
//  381           break;
//  382         default:
//  383           break;
//  384       }
//  385 
//  386       osal_msg_deallocate( (uint8 *)MSGpkt );
//  387       
//  388       // Next
//  389       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID );
//  390     }
//  391     
//  392     // Squash compiler warnings until values are used.
//  393     (void)sentStatus;
//  394     (void)sentEP;
//  395     
//  396     return ( events ^ SYS_EVENT_MSG );
//  397   }
//  398 
//  399   if ( events & SMART_HOME_SEND_MSG_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??Smart_home_ProcessEvent_1 & 0xFFFF
//  400   {
//  401     //Smart_home_Send();
//  402     return ( events ^ SMART_HOME_SEND_MSG_EVT );
        XRL     A,#0x1
        MOV     R2,A
        LJMP    ??Smart_home_ProcessEvent_2 & 0xFFFF
//  403   }
??Smart_home_ProcessEvent_3:
        ; Setup parameters for call to function Smart_home_ProcessMSGCmd
        LCALL   ??Smart_home_ProcessMSGCmd?relay
??Smart_home_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
??Smart_home_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??Smart_home_ProcessEvent_5 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Smart_home_ProcessEvent_3
        ADD     A,#0x5a
        JZ      ??Smart_home_ProcessEvent_6
        ADD     A,#-0x13
        JZ      ??Smart_home_ProcessEvent_7
        ADD     A,#-0x2a
        JNZ     $+5
        LJMP    ??Smart_home_ProcessEvent_8 & 0xFFFF
        SJMP    ??Smart_home_ProcessEvent_4
??Smart_home_ProcessEvent_7:
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for Smart_home_ProcessEvent>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessEvent_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessEvent_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessEvent_4
        CODE
??Smart_home_ProcessEvent_9:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??Smart_home_ProcessEvent_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??Smart_home_ProcessEvent_11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??Smart_home_ProcessEvent_11
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
??Smart_home_ProcessEvent_11:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
??Smart_home_ProcessEvent_10:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_45:
        JNZ     ??Smart_home_ProcessEvent_12
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??Smart_home_ProcessEvent_13:
        MOV     R1,#0x8
??Smart_home_ProcessEvent_14:
        LCALL   ??HalLedSet?relay
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
??Smart_home_ProcessEvent_12:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??Smart_home_ProcessEvent_13
??Smart_home_ProcessEvent_6:
        ; Setup parameters for call to function Smart_home_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Smart_home_HandleKeys?relay
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
??Smart_home_ProcessEvent_8:
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x2
        MOV     R1,#0x1
        SJMP    ??Smart_home_ProcessEvent_14
??Smart_home_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??Smart_home_ProcessEvent_15:
        MOV     R3,A
        LJMP    ??Smart_home_ProcessEvent_2 & 0xFFFF
//  404   
//  405   if ( events & SMART_HOME_DEVICE_CHECK_EVT )  //终端设备检查事件
??Smart_home_ProcessEvent_1:
        ANL     A,#0x80
        JZ      ??Smart_home_ProcessEvent_16
//  406   {
//  407     Smart_home_Device_check();  //调用终端设备检查函数
        MOV     DPTR,#??DeviceID
        MOV     A,#0x1
        MOVX    @DPTR,A
??Smart_home_ProcessEvent_17:
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_57:
        MOVX    A,@DPTR
        MOV     DPTR,#??Device_status
        MOVX    @DPTR,A
        MOV     A,#DeviceCnt & 0xff
        ADD     A,R2
        MOV     R0,A
        MOV     A,#(DeviceCnt >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#??counttmp
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#??Device_status
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPTR,#??counttmp + 1
        JZ      ??Smart_home_ProcessEvent_18
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_75:
        MOVX    A,@DPTR
        INC     A
        SJMP    ??Smart_home_ProcessEvent_19
??Smart_home_ProcessEvent_18:
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_76:
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#??Device_status
??Smart_home_ProcessEvent_19:
        MOVX    @DPTR,A
        MOV     DPTR,#??counttmp
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_46:
        CLR     C
        SUBB    A,#0x4
        JC      ??Smart_home_ProcessEvent_20
        MOV     DPTR,#??counttmp + 1
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     A,#0x3
        MOVX    @DPTR,A
        MOV     DPTR,#??Device_status
        DEC     A
        MOVX    @DPTR,A
??Smart_home_ProcessEvent_20:
        MOV     DPTR,#??Device_status
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#??DeviceID
        MOVX    A,@DPTR
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_58:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#??DeviceID
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x9
        JC      ??Smart_home_ProcessEvent_17
//  408     
//  409     osal_start_timerEx(Smart_home_TaskID,SMART_HOME_DEVICE_CHECK_EVT,
//  410                        DEVICE_CHECK_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x10
        MOV     R5,#0x27
        LCALL   ?Subroutine17 & 0xFFFF
//  411     return (events ^ SMART_HOME_DEVICE_CHECK_EVT);
??CrossCallReturnLabel_81:
        MOV     A,R6
        XRL     A,#0x80
??Smart_home_ProcessEvent_21:
        MOV     R2,A
        MOV     A,R7
        LJMP    ??Smart_home_ProcessEvent_15 & 0xFFFF
//  412   }
//  413   
//  414   
//  415   if( events & SMART_HOME_DISPLAY_EVT )
??Smart_home_ProcessEvent_16:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??Smart_home_ProcessEvent_22
//  416   {
//  417     Smart_home_Display();
        ; Setup parameters for call to function Smart_home_Display
        LCALL   ??Smart_home_Display?relay
//  418     //周期性刷新
//  419     osal_start_timerEx( Smart_home_TaskID,events & SMART_HOME_DISPLAY_EVT,LCD_DISPLAY_TIMER);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     A,R6
        ANL     A,#0x10
        MOV     R2,A
        LCALL   ??Subroutine33_0 & 0xFFFF
//  420     return (events ^ SMART_HOME_DISPLAY_EVT);
??CrossCallReturnLabel_83:
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??Smart_home_ProcessEvent_21
//  421   }
//  422 
//  423   return ( 0 );  // Discard unknown events.
??Smart_home_ProcessEvent_22:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Smart_home_ProcessEvent_2:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  424 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+-1
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(DeviceList + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((DeviceList + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_79:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_46
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_4
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_6
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_7
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_45
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_46
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_4
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_5
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_6
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_7
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOV     R2,#-0x80
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     R3,#0x0
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
//  425 
//  426 /*********************************************************************
//  427  * @fn      Smart_home_ProcessZDOMsgs()
//  428  *
//  429  * @brief   Process response messages
//  430  *
//  431  * @param   none
//  432  *
//  433  * @return  none
//  434  */
//  435 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  436 {
//  437   switch ( inMsg->clusterID )
//  438   {
//  439     case End_Device_Bind_rsp:
//  440       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  441       {
//  442         // Light LED
//  443         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  444       }
//  445 #if defined(BLINK_LEDS)
//  446       else
//  447       {
//  448         // Flash LED to show failure
//  449         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  450       }
//  451 #endif
//  452       break;
//  453       
//  454     case Match_Desc_rsp:
//  455       {
//  456         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  457         if ( pRsp )
//  458         {
//  459           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  460           {
//  461             /*
//  462             Smart_home_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  463             Smart_home_TxAddr.addr.shortAddr = pRsp->nwkAddr;
//  464             // Take the first endpoint, Can be changed to search through endpoints
//  465             Smart_home_TxAddr.endPoint = pRsp->epList[0];
//  466             */
//  467             
//  468             // Light LED
//  469             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  470           }
//  471           osal_mem_free( pRsp );
//  472         }
//  473       }
//  474       break;
//  475   }
//  476 }
//  477 
//  478 /*********************************************************************
//  479  * @fn      Smart_home_Key_add
//  480  *
//  481  * @brief   3.21新增，用来标识目前处于的控制状态，是附加项
//  482  *          0 控制屏幕 1 控制继电器 2 控制电机
//  483  *            
//  484  *
//  485  * @param   Ctrlcase 目前的控制号
//  486  *
//  487  * @return  屏幕回显
//  488  *
//  489 static void Smart_home_Key_add(uint8 Ctrlcase)
//  490 {
//  491 #if defined ( LCD_SUPPORTED )
//  492   switch(Ctrlcase)
//  493   {
//  494     default:    
//  495     case 0:
//  496       HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
//  497       //清除屏幕显示
//  498       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  499       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  500       break;
//  501     
//  502     case 1:
//  503       HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
//  504       //清除屏幕显示
//  505       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  506       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  507       if(DeviceList[relay].deviceStatus == DEVICE_ONLINE)  //设备在线回显
//  508       {
//  509         HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
//  510       }
//  511       if(DeviceList[relay].deviceStatus != DEVICE_ONLINE)
//  512       {
//  513         HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
//  514       }
//  515       break;
//  516     
//  517     case 2:
//  518       HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
//  519       //清除屏幕显示
//  520       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  521       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  522       if(DeviceList[motor].deviceStatus == DEVICE_ONLINE)  //设备在线回显
//  523       {
//  524         HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 );
//  525       }
//  526       if(DeviceList[motor].deviceStatus != DEVICE_ONLINE)
//  527       {
//  528         HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
//  529       }      
//  530       break;
//  531 #endif     
//  532   }
//  533 }
//  534 */
//  535 /*********************************************************************
//  536  * @fn      Smart_home_HandleKeys
//  537  *
//  538  * @brief   设置按键事件
//  539  *          目前事件设置    3.19
//  540  *
//  541  *          HAL_KEY_SW_1--UP     (上翻一页)
//  542  *          HAL_KEY_SW_2--RIGHT  (选项向右)
//  543  *          HAL_KEY_SW_3--DOWN   (下翻一页)
//  544  *          HAL_KEY_SW_4--LEFT   (选项向左)
//  545  *          HAL_KEY_SW_5--OK     (组网开)
//  546  *          HAL_KEY_SW_7--CANCEL (组网关) 
//  547  * + 3.21 新增  选项总共有3种，控制屏幕显示，控制继电器和控制电机
//  548  *              控制继电器时 UP控制1，DOWN控制2
//  549  *              控制电机时   UP加速， DOWN减速
//  550  *
//  551  * @param   shift - true if in shift/alt.
//  552  * @param   keys  - bit field for key events.
//  553  *
//  554  * @return  none
//  555  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  556 void Smart_home_HandleKeys( byte shift, byte keys )
Smart_home_HandleKeys:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function Smart_home_HandleKeys
        CODE
//  557 {
        FUNCALL Smart_home_HandleKeys, Smart_home_Relay_Ctl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, Smart_home_Relay_Ctl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  558   //zAddrType_t txAddr;
//  559   static int8 MotorSpeed = 0;
//  560   static uint8 NetWorkAllow = 0;
//  561   /*这里这么设置似乎会出现内存问题
//  562   static uint8 Relay1_on = 0x02;  //两个默认都是关闭
//  563   static uint8 Relay2_on = 0x10;
//  564   */
//  565   /*3.21 LCD 显示*/
//  566   static uint8 Relay1_on = 0;  //两个默认都是关闭
//  567   static uint8 Relay2_on = 0;
//  568   
//  569   
//  570   if ( keys & HAL_KEY_SW_1 )  //UP
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_HandleKeys_0
//  571   {
//  572     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_HandleKeys_1
        DEC     A
        JZ      ??Smart_home_HandleKeys_2
//  573     {
//  574       default:    
//  575       case 0:
//  576       {
//  577         if(LCD_Page < LCD_PAGE_MAX)       {LCD_Page++;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_47:
        JNC     ??Smart_home_HandleKeys_3
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  578         if(LCD_Page > LCD_PAGE_MAX - 1)       {LCD_Page = 0;}
??Smart_home_HandleKeys_3:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_48:
        JC      ??Smart_home_HandleKeys_0
        CLR     A
        SJMP    ??Smart_home_HandleKeys_4
//  579         break;
//  580       }
//  581       case 1:
//  582       {  
//  583         uint8 switch1;
//  584         if(Relay1_on == 0)  {Relay1_on = 1 ; switch1 = 0x02;}
??Smart_home_HandleKeys_1:
        MOV     DPTR,#??Relay1_on
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_5
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x2
        SJMP    ??Smart_home_HandleKeys_6
//  585         else if(Relay1_on == 1)  {Relay1_on = 0; switch1 = 0x01;}
??Smart_home_HandleKeys_5:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  586         else  {Relay1_on = 0; switch1 = 0x01;}       
//  587         Smart_home_Relay_Ctl(switch1);  
??Smart_home_HandleKeys_6:
        ; Setup parameters for call to function Smart_home_Relay_Ctl
        LCALL   ??Smart_home_Relay_Ctl?relay
//  588         break;
        SJMP    ??Smart_home_HandleKeys_0
//  589       } 
//  590       case 2:
//  591       {
//  592         if(MotorSpeed < 80)     {MotorSpeed += 10;}
??Smart_home_HandleKeys_2:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_49:
        JNC     ??Smart_home_HandleKeys_7
        MOVX    A,@DPTR
        ADD     A,#0xa
        MOVX    @DPTR,A
//  593         if(MotorSpeed >= 80)     
??Smart_home_HandleKeys_7:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        JC      ??Smart_home_HandleKeys_0
//  594         {
//  595 #if defined ( LCD_SUPPORTED )
//  596            HalLcdWriteString( "Motor max Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor max Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor max Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  597 #endif 
//  598            MotorSpeed = 80;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#0x50
??Smart_home_HandleKeys_4:
        MOVX    @DPTR,A
//  599         }
//  600         break;
//  601       }
//  602          
//  603     }    
//  604   }
//  605   
//  606   if ( keys & HAL_KEY_SW_3 )  //DOWN
??Smart_home_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??Smart_home_HandleKeys_8
//  607   {
//  608     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_HandleKeys_9
        DEC     A
        JZ      ??Smart_home_HandleKeys_10
//  609     {
//  610       default:    
//  611       case 0:
//  612       {
//  613         if(LCD_Page >= 0)       {LCD_Page--;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_35:
        JC      ??Smart_home_HandleKeys_11
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  614         if(LCD_Page < 0)        {LCD_Page = LCD_PAGE_MAX;}
??Smart_home_HandleKeys_11:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_36:
        JNC     ??Smart_home_HandleKeys_8
        MOV     A,#0x4
        SJMP    ??Smart_home_HandleKeys_12
//  615         break;
//  616       }
//  617       case 1:  
//  618       {
//  619         uint8 switch2;
//  620         if(Relay2_on == 0)  {Relay2_on = 1 ; switch2 = 0x20;}
??Smart_home_HandleKeys_9:
        MOV     DPTR,#??Relay2_on
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_13
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x20
        SJMP    ??Smart_home_HandleKeys_14
//  621         else if(Relay2_on == 1)  {Relay2_on = 0; switch2 = 0x10;}
??Smart_home_HandleKeys_13:
        XRL     A,#0x1
        JNZ     ??Smart_home_HandleKeys_15
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x10
        SJMP    ??Smart_home_HandleKeys_14
//  622         else  {Relay2_on = 0; switch2 = 0x01;}       
??Smart_home_HandleKeys_15:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  623         Smart_home_Relay_Ctl(switch2);       
??Smart_home_HandleKeys_14:
        ; Setup parameters for call to function Smart_home_Relay_Ctl
        LCALL   ??Smart_home_Relay_Ctl?relay
//  624         break;
        SJMP    ??Smart_home_HandleKeys_8
//  625       } 
//  626       case 2:
//  627       {
//  628         if(MotorSpeed > -80)     {MotorSpeed -= 10;}
??Smart_home_HandleKeys_10:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_51:
        JC      ??Smart_home_HandleKeys_16
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOVX    @DPTR,A
//  629         if(MotorSpeed <= -80)     
??Smart_home_HandleKeys_16:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_52:
        JNC     ??Smart_home_HandleKeys_8
//  630         {
//  631 #if defined ( LCD_SUPPORTED )
//  632            HalLcdWriteString( "Motor min Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor min Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor min Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  633 #endif 
//  634            MotorSpeed = -80;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#-0x50
??Smart_home_HandleKeys_12:
        MOVX    @DPTR,A
//  635         }
//  636         break; 
//  637       }
//  638     }
//  639   }
//  640   
//  641   if ( keys & HAL_KEY_SW_2 )  //RIGHT  
??Smart_home_HandleKeys_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??Smart_home_HandleKeys_17
//  642   /*3.22 这里在调试时出现问题，具体问题为 点击up时会出现屏幕变为禁止组网
//  643     控制方面变为控制电机，问题在于汇编中的key值会出现  keys & HAL_KEY_SW_2 = 2
//  644     的情况，暂时禁止，需要等待研究  还有key_7*/
//  645   {
//  646      if(Ctrlcase < 3)   { Ctrlcase++;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_53:
        JNC     ??Smart_home_HandleKeys_18
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  647      if(Ctrlcase > 2)   { Ctrlcase=0;}
??Smart_home_HandleKeys_18:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_54:
        JC      ??Smart_home_HandleKeys_17
        CLR     A
        MOVX    @DPTR,A
//  648      //Smart_home_Key_add(Ctrlcase);
//  649   }
//  650   
//  651   if ( keys & HAL_KEY_SW_4 )  //LEFT
??Smart_home_HandleKeys_17:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.3
        JNC     ??Smart_home_HandleKeys_19
//  652   {
//  653      if(Ctrlcase > -1)   { Ctrlcase--;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_37:
        JC      ??Smart_home_HandleKeys_20
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  654      if(Ctrlcase < 0)    { Ctrlcase=2;}
??Smart_home_HandleKeys_20:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_38:
        JNC     ??Smart_home_HandleKeys_19
        MOV     A,#0x2
        MOVX    @DPTR,A
//  655      //Smart_home_Key_add(Ctrlcase);    
//  656   }
//  657   
//  658   if ( keys & HAL_KEY_SW_5 )  //OK
//  659   {
//  660 
//  661   }
//  662   
//  663   if ( keys & HAL_KEY_SW_7 )  //CENCEL
??Smart_home_HandleKeys_19:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.6
        JNC     ??Smart_home_HandleKeys_21
//  664   {
//  665      if(NetWorkAllow == 0)
        MOV     DPTR,#??NetWorkAllow
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_22
//  666      {
//  667        NetWorkAllow = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  668        NLME_PermitJoiningRequest(0xFF); // 组网，允许随时加入
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#-0x1
        LCALL   ??NLME_PermitJoiningRequest?relay
//  669        HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  670 #if defined ( LCD_SUPPORTED )
//  671        HalLcdWriteString( "Allow networking", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Allow networking">` & 0xff
        MOV     R3,#(`?<Constant "Allow networking">` >> 8) & 0xff
        SJMP    ??Smart_home_HandleKeys_23
//  672 #endif
//  673      }
//  674      else
//  675      {
//  676        NetWorkAllow = 0;
??Smart_home_HandleKeys_22:
        CLR     A
        MOVX    @DPTR,A
//  677        NLME_PermitJoiningRequest(0x00); // 不允许组网
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,A
        LCALL   ?Subroutine23 & 0xFFFF
//  678        HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);  
//  679 #if defined ( LCD_SUPPORTED )
//  680        HalLcdWriteString( "Ban   networking", HAL_LCD_LINE_4 );
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Ban   networking">` & 0xff
        MOV     R3,#(`?<Constant "Ban   networking">` >> 8) & 0xff
??Smart_home_HandleKeys_23:
        LCALL   ??HalLcdWriteString?relay
//  681 #endif        
//  682      }
//  683   }
//  684 }
??Smart_home_HandleKeys_21:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        LCALL   ??NLME_PermitJoiningRequest?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x4f
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x50
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??MotorSpeed:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??NetWorkAllow:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay1_on:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay2_on:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  685 
//  686 /*********************************************************************
//  687  * @fn      Smart_home_ProcessMSGCmd
//  688  *
//  689  * @brief   Data message processor callback. This function processes
//  690  *          any incoming data - probably from other devices. Based
//  691  *          on the cluster ID, perform the intended action.
//  692  *
//  693  * @param   pkt - pointer to the incoming message packet
//  694  *
//  695  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  696  *          FALSE otherwise.
//  697  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  698 void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
Smart_home_ProcessMSGCmd:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function Smart_home_ProcessMSGCmd
        CODE
//  699 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  700   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for Smart_home_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_8
        CODE
//  701   {
//  702   /***********************************************************************
//  703     目前总共8种case
//  704    #define Smart_home_CLUSTERID_HUMITMSG            1  // 温湿度
//  705    #define Smart_home_CLUSTERID_TEMPLIGHTMSG        2  // 温度光照
//  706    #define Smart_home_CLUSTERID_RFIDMSG             3  // 射频卡
//  707    #define Smart_home_CLUSTERID_GASFLAMEMSG         4  // 烟雾火焰
//  708    #define Smart_home_CLUSTERID_INFRAREDMSG         5  // 人体红外
//  709    #define Smart_home_CLUSTERID_SOUNDVBMSG          6  // 声音振动
//  710    #define Smart_home_CLUSTERID_MOTORSTATUSMSG      7  // 直流电机状态信息
//  711    #define Smart_home_CLUSTERID_RELAYSTATUSMSG      8  // 继电器状态信息
//  712     
//  713    设备描述
//  714    typedef struct DeviceInfo
//  715    {
//  716      uint8 deviceID;
//  717      uint8 deviceStatus;
//  718      uint8 data[5];
//  719    } DeviceInfo; 
//  720    ************************************************************************/ 
//  721     //3.14 消息处理模块，共8个，行为类似 
//  722     //3.21 修改为指针方法（DeviceList相关）
//  723     case Smart_home_CLUSTERID_HUMITMSG:         // 温湿度
//  724       DeviceList[Humit].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线
??Smart_home_ProcessMSGCmd_1:
        MOV     DPTR,#DeviceList + 8
        LCALL   ?Subroutine2 & 0xFFFF
//  725       DeviceList[Humit].data[0] = pkt->cmd.Data[4]; // 湿度 
??CrossCallReturnLabel_0:
        MOV     DPTR,#DeviceList + 9
        LCALL   ?Subroutine6 & 0xFFFF
//  726       DeviceList[Humit].data[1] = pkt->cmd.Data[5]; // 温度
??CrossCallReturnLabel_12:
        MOV     DPTR,#DeviceList + 10
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  727       break;
//  728       
//  729     case Smart_home_CLUSTERID_TEMPLIGHTMSG:     // 温度光照
//  730       DeviceList[TempLight].deviceStatus = DEVICE_ONLINE;   //收到消息设置为在线
??Smart_home_ProcessMSGCmd_2:
        MOV     DPTR,#DeviceList + 15
        LCALL   ?Subroutine2 & 0xFFFF
//  731       DeviceList[TempLight].data[0] = pkt->cmd.Data[4]; // 温度整数
??CrossCallReturnLabel_1:
        MOV     DPTR,#DeviceList + 16
        LCALL   ?Subroutine7 & 0xFFFF
//  732       DeviceList[TempLight].data[1] = pkt->cmd.Data[5]; // 温度小数
??CrossCallReturnLabel_14:
        MOV     DPTR,#DeviceList + 17
        LCALL   ?Subroutine5 & 0xFFFF
//  733       DeviceList[TempLight].data[2] = pkt->cmd.Data[6]; // 光照
??CrossCallReturnLabel_10:
        MOV     DPTR,#DeviceList + 18
        LCALL   ?Subroutine4 & 0xFFFF
//  734       DeviceList[TempLight].data[3] = pkt->cmd.Data[7]; // 光照
??CrossCallReturnLabel_8:
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 19
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  735       break;
//  736       
//  737     case Smart_home_CLUSTERID_RFIDMSG:          // 射频卡
//  738       DeviceList[RfID].deviceStatus = DEVICE_ONLINE;        //收到消息设置为在线
??Smart_home_ProcessMSGCmd_3:
        MOV     DPTR,#DeviceList + 22
        LCALL   ?Subroutine2 & 0xFFFF
//  739       DeviceList[RfID].data[0] = pkt->cmd.Data[4]; // 射频卡类型
??CrossCallReturnLabel_2:
        MOV     DPTR,#DeviceList + 23
        LCALL   ?Subroutine7 & 0xFFFF
//  740       DeviceList[RfID].data[1] = pkt->cmd.Data[5]; // 4个字节的ID号
??CrossCallReturnLabel_15:
        MOV     DPTR,#DeviceList + 24
        LCALL   ?Subroutine5 & 0xFFFF
//  741       DeviceList[RfID].data[2] = pkt->cmd.Data[6]; //
??CrossCallReturnLabel_11:
        MOV     DPTR,#DeviceList + 25
        LCALL   ?Subroutine27 & 0xFFFF
//  742       DeviceList[RfID].data[3] = pkt->cmd.Data[7]; //
??CrossCallReturnLabel_67:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 26
        LCALL   ?Subroutine4 & 0xFFFF
//  743       DeviceList[RfID].data[4] = pkt->cmd.Data[8]; //  
??CrossCallReturnLabel_9:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 27
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  744       break;
//  745       
//  746     case Smart_home_CLUSTERID_GASFLAMEMSG:      // 烟雾火焰
//  747       DeviceList[gasFlame].deviceStatus = DEVICE_ONLINE;    //收到消息设置为在线
??Smart_home_ProcessMSGCmd_4:
        MOV     DPTR,#DeviceList + 29
        LCALL   ?Subroutine3 & 0xFFFF
//  748       DeviceList[gasFlame].data[0] = pkt->cmd.Data[4]; // 烟雾与火焰报警信息
??CrossCallReturnLabel_4:
        MOV     DPTR,#DeviceList + 30
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  749       break;
//  750       
//  751     case Smart_home_CLUSTERID_INFRAREDMSG:      // 人体红外
//  752       DeviceList[infrared].deviceStatus = DEVICE_ONLINE;    //收到消息设置为在线
??Smart_home_ProcessMSGCmd_5:
        MOV     DPTR,#DeviceList + 36
        LCALL   ?Subroutine3 & 0xFFFF
//  753       DeviceList[infrared].data[0] = pkt->cmd.Data[4]; // 人体红外 
??CrossCallReturnLabel_5:
        MOV     DPTR,#DeviceList + 37
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  754       break;
//  755 
//  756     case Smart_home_CLUSTERID_SOUNDVBMSG:       // 声音振动
//  757       DeviceList[soundVb].deviceStatus = DEVICE_ONLINE;     //收到消息设置为在线
??Smart_home_ProcessMSGCmd_6:
        MOV     DPTR,#DeviceList + 57
        LCALL   ?Subroutine3 & 0xFFFF
//  758       DeviceList[soundVb].data[0] = pkt->cmd.Data[4]; // 声音震动信息
??CrossCallReturnLabel_6:
        MOV     DPTR,#DeviceList + 58
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  759       break;
//  760       
//  761     case Smart_home_CLUSTERID_MOTORSTATUSMSG:   // 直流电机状态信息
//  762       DeviceList[motor].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线
??Smart_home_ProcessMSGCmd_7:
        MOV     DPTR,#DeviceList + 43
        MOV     A,#0x1
        MOVX    @DPTR,A
//  763       // 储存电机设备的网络地址，用于发送控制命令
//  764       Motor_addr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Motor_addr + 8
        LCALL   ?Subroutine8 & 0xFFFF
//  765       Motor_addr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
??CrossCallReturnLabel_16:
        MOV     DPTR,#Motor_addr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  766       
//  767       Motor_addr.endPoint = 1;  // 目的节点的端口号
        MOV     DPTR,#Motor_addr + 9
        LCALL   ?Subroutine2 & 0xFFFF
//  768       //TransmitApp_DstMotorAddr->endPoint = TRANSMITAPP_ENDPOINT;
//  769      
//  770       DeviceList[motor].data[0] = pkt->cmd.Data[4]; // 电机转速
??CrossCallReturnLabel_3:
        MOV     DPTR,#DeviceList + 44
        LCALL   ?Subroutine6 & 0xFFFF
//  771       DeviceList[motor].data[1] = pkt->cmd.Data[5]; // 电机状态
??CrossCallReturnLabel_13:
        MOV     DPTR,#DeviceList + 45
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  772       break;
//  773       
//  774     case Smart_home_CLUSTERID_RELAYSTATUSMSG:   // 继电器状态信息
//  775       DeviceList[relay].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线    
??Smart_home_ProcessMSGCmd_8:
        MOV     DPTR,#DeviceList + 50
        MOV     A,#0x1
        MOVX    @DPTR,A
//  776       
//  777       // 储存继电器设备的网络地址，用于发送控制命令
//  778       Relay_addr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Relay_addr + 8
        LCALL   ?Subroutine8 & 0xFFFF
//  779       Relay_addr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;    
??CrossCallReturnLabel_17:
        MOV     DPTR,#Relay_addr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  780       Relay_addr.endPoint = 1; // 目的节点的端口号
        MOV     DPTR,#Relay_addr + 9
        LCALL   ?Subroutine3 & 0xFFFF
//  781       DeviceList[relay].data[0] = pkt->cmd.Data[4]; 
??CrossCallReturnLabel_7:
        MOV     DPTR,#DeviceList + 51
??Smart_home_ProcessMSGCmd_9:
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock55
//  782       break;
//  783       
//  784     default:
//  785       break;
//  786   }
//  787 }
??Smart_home_ProcessMSGCmd_0:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        INC     A
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_72:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_69:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_68:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_10
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_11
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_73:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_70:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_13
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_8
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_9
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_78:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_71:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_15
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_0
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_1
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_2
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_3
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_74:
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_10
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_11
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_14
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_15
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_0
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_1
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_2
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_3
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107
//  788 
//  789 /*********************************************************************
//  790  * @fn     Smart_home_Device_check
//  791  *
//  792  * @brief   设备计数器，用来检查设备在开始组网后多久在线.
//  793  *          目前搜索为4次HeartBeat  (DEVICE_HEART_BEAT 3)
//  794  *          3.21
//  795  * @param   none
//  796  *
//  797  * @return  none
//  798  */
//  799 /*3.24 这里的检测时常有点长 改为变量外提的方式加快处理速度*/
//  800 static void Smart_home_Device_check(void)
//  801 {

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  802   static uint8 DeviceID;
??DeviceID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  803   static uint8 Device_status =  0;
??Device_status:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  804   static uint8* counttmp;
??counttmp:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  805   for(DeviceID=1;DeviceID<Smart_home_MAX_INCLUSTERS;DeviceID++)
//  806   {  
//  807     Device_status = DeviceList[DeviceID].deviceStatus;
//  808     counttmp = & DeviceCnt[DeviceID];
//  809     if(Device_status != DEVICE_ONLINE)    //设备离线
//  810     {
//  811       (*counttmp)++;
//  812     }
//  813     if(Device_status == DEVICE_ONLINE)    //设备在线
//  814     {
//  815       *counttmp = 0;
//  816       Device_status = 0;
//  817     }
//  818     if((*counttmp) > DEVICE_HEART_BEAT)
//  819     {
//  820       *counttmp = DEVICE_HEART_BEAT;
//  821       Device_status = DEVICE_OFFLINE;
//  822     }
//  823     DeviceList[DeviceID].deviceStatus = Device_status;
//  824   }
//  825   /*温湿度缓存 温度光照缓存 RFID 信息缓存 气体火焰缓存 
//  826   人体红外 电机状态 继电器状态 声音震动*/
//  827 }
//  828 
//  829 
//  830 /*********************************************************************
//  831  * @fn      Smart_home_Relay_Ctl
//  832  *
//  833  * @brief   发送继电器控制消息
//  834  *
//  835  * @param   none
//  836  *
//  837  * @return  none
//  838  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  839 static void Smart_home_Relay_Ctl(uint8 cmd)
Smart_home_Relay_Ctl:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI Function Smart_home_Relay_Ctl
        CODE
//  840 {
        FUNCALL Smart_home_Relay_Ctl, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  841   uint8 tmp;
//  842   
//  843   // 只有设备在线时, 方发送控制命令
//  844   if (DeviceList[relay].deviceStatus != DEVICE_OFFLINE)
        MOV     DPTR,#DeviceList + 50
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Relay_Ctl_0
//  845   {
//  846     // put the sequence number in the message
//  847     tmp = HI_UINT8( RelayTransID );
        MOV     DPTR,#RelayTransID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
//  848     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Relay_Ctl_1
        MOV     R0,#0x30
        SJMP    ??Smart_home_Relay_Ctl_2
??Smart_home_Relay_Ctl_1:
        MOV     R0,#0x37
//  849     Coordinator_Msg[2] = tmp;
??Smart_home_Relay_Ctl_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 2
        MOVX    @DPTR,A
//  850     tmp = LO_UINT8( RelayTransID );
        MOV     DPTR,#RelayTransID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
//  851     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Relay_Ctl_3
        MOV     R0,#0x30
        SJMP    ??Smart_home_Relay_Ctl_4
??Smart_home_Relay_Ctl_3:
        MOV     R0,#0x37
//  852     Coordinator_Msg[3] = tmp;
??Smart_home_Relay_Ctl_4:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 3
        MOVX    @DPTR,A
//  853     
//  854     // 发送给继电器的控制命令 
//  855     Coordinator_Msg[4] = cmd;
        MOV     A,R6
        INC     DPTR
        MOVX    @DPTR,A
//  856     /********************************************
//  857     *   屏幕显示部分*
//  858 #if defined ( LCD_SUPPORTED )
//  859     if(cmd == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
//  860     if(cmd == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
//  861     if(cmd == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
//  862     if(cmd == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}
//  863 #endif     
//  864     ********************************************/
//  865     tmp = AF_DataRequest( &Relay_addr,                         
//  866                           (endPointDesc_t *)&Smart_home_epDesc,                  
//  867                            Smart_home_CLUSTERID_RELAYCTRL,
//  868                            RELAYSTATUSMSG_LEN,                 
//  869                            Coordinator_Msg,                    
//  870                           &RelayTransID,                       
//  871                            AF_DISCV_ROUTE,                     
//  872                            AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#RelayTransID & 0xff
        MOV     ?V0 + 1,#(RelayTransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#Coordinator_Msg & 0xff
        MOV     ?V0 + 1,#(Coordinator_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#Smart_home_epDesc & 0xff
        MOV     R5,#(Smart_home_epDesc >> 8) & 0xff
        MOV     R2,#Relay_addr & 0xff
        MOV     R3,#(Relay_addr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  873   } 
//  874 }
??Smart_home_Relay_Ctl_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock108
//  875 
//  876 /*********************************************************************
//  877  * @fn      Smart_home_Motor_Ctl
//  878  *
//  879  * @brief   发送电机控制消息
//  880  *
//  881  * @param   none
//  882  *
//  883  * @return  none
//  884  */
//  885 static void Smart_home_Motor_Ctl(uint8 cmd,uint8 speed)
//  886 {
//  887   uint8 tmp;
//  888   
//  889   // 只有设备在线时, 方发送控制命令
//  890   if (DeviceList[motor].deviceStatus != DEVICE_OFFLINE)
//  891   {
//  892     // put the sequence number in the message
//  893     tmp = HI_UINT8( MotorTransID );
//  894     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
//  895     Coordinator_Msg[2] = tmp;
//  896     tmp = LO_UINT8( RelayTransID );
//  897     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
//  898     Coordinator_Msg[3] = tmp;
//  899     
//  900     // 发送给继电器的控制命令 
//  901     Coordinator_Msg[4] = speed;
//  902     Coordinator_Msg[5] = cmd;
//  903     
//  904     tmp = AF_DataRequest( &Motor_addr,                         
//  905                           (endPointDesc_t *)&Smart_home_epDesc,                  
//  906                            Smart_home_CLUSTERID_MOTORCTRL,
//  907                            MOTORSTATUSMSG_LEN,                 
//  908                            Coordinator_Msg,                    
//  909                           &MotorTransID,                       
//  910                            AF_DISCV_ROUTE,                     
//  911                            AF_DEFAULT_RADIUS );
//  912   }   
//  913 }
//  914 
//  915 
//  916 /*********************************************************************
//  917  * @fn      Smart_home_Display
//  918  *
//  919  * @brief   屏幕回显函数，定义了内容如何显示.
//  920  *
//  921  * @param   port - UART port.
//  922  * @param   event - the UART port event flag.
//  923  *
//  924  * @return  none
//  925  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  926 static void Smart_home_Display(void)
Smart_home_Display:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function Smart_home_Display
        CODE
//  927 {
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  928 #if defined LCD_SUPPORTED
//  929   switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_0 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_1 & 0xFFFF
//  930   {
//  931     default:    
//  932     case 0:
//  933       HalLcdWriteString( "      Menu      ", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "      Menu      ">` & 0xff
        MOV     R3,#(`?<Constant "      Menu      ">` >> 8) & 0xff
        LCALL   ?Subroutine26 & 0xFFFF
//  934       //HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
//  935       //清除屏幕显示
//  936       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  937       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  938       
//  939       switch(LCD_Page)
??CrossCallReturnLabel_65:
        MOV     DPTR,#LCD_Page
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_2 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_4 & 0xFFFF
//  940       {
//  941         default:
//  942         case 0:
//  943         {
//  944           static uint16 humit;
//  945           static uint16 temper;
//  946           static uint16 SoundVb; 
//  947           
//  948           DeviceInfo Devhum = DeviceList[Humit];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 7) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 7) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  949           DeviceInfo DevSound = DeviceList[soundVb];
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 56) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 56) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  950           //第一页第二行显示温度
//  951           //      第三行显示光照
//  952           humit = (uint16)Devhum.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??humit
        LCALL   ?Subroutine12 & 0xFFFF
//  953           temper = (uint16)Devhum.data[1];
??CrossCallReturnLabel_27:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??temper
        LCALL   ?Subroutine12 & 0xFFFF
//  954           SoundVb = (uint16)DevSound.data[0];
??CrossCallReturnLabel_28:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??SoundVb
        LCALL   ?Subroutine11 & 0xFFFF
//  955 
//  956           HalLcdWriteStringValueValue( "Hum:", humit, 10, "% Tem_1:", temper, 10, HAL_LCD_LINE_2 );
??CrossCallReturnLabel_23:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPTR,#??temper
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#`?<Constant "% Tem_1:">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "% Tem_1:">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0xa
        MOV     DPTR,#??humit
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     R2,#`?<Constant "Hum:">` & 0xff
        MOV     R3,#(`?<Constant "Hum:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  957           HalLcdWriteStringValue("Sound", SoundVb, 10, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,#0xa
        MOV     DPTR,#??SoundVb
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     R2,#`?<Constant "Sound">` & 0xff
        MOV     R3,#(`?<Constant "Sound">` >> 8) & 0xff
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  958           
//  959           //显示最下面的百分比条
//  960           static uint8 percent;
//  961           percent = (1 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent
        MOV     A,#0x19
??Smart_home_Display_5:
        MOVX    @DPTR,A
//  962           HalLcdDisplayPercentBar("",percent);
        ; Setup parameters for call to function HalLcdDisplayPercentBar
        MOV     R1,A
        MOV     R2,#`?<Constant "">` & 0xff
        MOV     R3,#(`?<Constant "">` >> 8) & 0xff
??Smart_home_Display_6:
        LCALL   ??HalLcdDisplayPercentBar?relay
//  963           break;
        LJMP    ??Smart_home_Display_7 & 0xFFFF
//  964         }
//  965         case 1:
//  966         {
//  967           static uint16 Light;
//  968           static uint8 lightmp;
//  969           static uint16 integer;
//  970           static uint16 decimals;
//  971           DeviceInfo Devtmp = DeviceList[TempLight];
??Smart_home_Display_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 14) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 14) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  972           //第一页第二行显示温度
//  973           //      第三行显示光照
//  974           integer = (uint16)Devtmp.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??integer
        LCALL   ?Subroutine12 & 0xFFFF
//  975           decimals = (uint16)Devtmp.data[1];
??CrossCallReturnLabel_29:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??decimals
        LCALL   ?Subroutine10 & 0xFFFF
//  976           lightmp = Devtmp.data[3];
??CrossCallReturnLabel_21:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??lightmp
        MOVX    @DPTR,A
//  977           Light = (uint16)Devtmp.data[4];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??Light
        LCALL   ?Subroutine9 & 0xFFFF
//  978           memcpy(&Light,&lightmp,sizeof(lightmp));
??CrossCallReturnLabel_18:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#??lightmp & 0xff
        MOV     R5,#(??lightmp >> 8) & 0xff
        MOV     R2,#??Light & 0xff
        MOV     R3,#(??Light >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  979           HalLcdWriteStringValueValue( "Temper_2:", integer, 10, ".", decimals, 10, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPTR,#??decimals
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#`?<Constant ".">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant ".">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0xa
        MOV     DPTR,#??integer
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     R2,#`?<Constant "Temper_2:">` & 0xff
        MOV     R3,#(`?<Constant "Temper_2:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  980           HalLcdWriteStringValue( "Light:", Light, 10, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,#0xa
        MOV     DPTR,#??Light
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R2,#`?<Constant "Light:">` & 0xff
        MOV     R3,#(`?<Constant "Light:">` >> 8) & 0xff
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  981           
//  982           //显示最下面的百分比条
//  983           static uint8 percent;
//  984           percent = (2 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent_1
        MOV     A,#0x32
        LJMP    ??Smart_home_Display_5 & 0xFFFF
//  985           HalLcdDisplayPercentBar("",percent);
//  986           break;
//  987         }
//  988         
//  989       case 2:
//  990       {
//  991           static uint8 kind;
//  992           static uint8 tmp1;
//  993           static uint8 tmp2;
//  994           static uint16 Data1;
//  995           static uint16 Data2;
//  996           //显示最下面的百分比条
//  997           DeviceInfo rfid = DeviceList[RfID];
??Smart_home_Display_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 21) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 21) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  998           
//  999           kind = rfid.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??kind
        MOVX    @DPTR,A
// 1000           tmp1 = rfid.data[1];
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??tmp1
        MOVX    @DPTR,A
// 1001           Data1 = (uint16)rfid.data[2];
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??Data1
        LCALL   ?Subroutine10 & 0xFFFF
// 1002           tmp2 = rfid.data[3];
??CrossCallReturnLabel_22:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??tmp2
        MOVX    @DPTR,A
// 1003           Data2 = (uint16)rfid.data[4];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??Data2
        LCALL   ?Subroutine9 & 0xFFFF
// 1004           
// 1005           memcpy(&Data1,&tmp1,sizeof(tmp1));
??CrossCallReturnLabel_19:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#??tmp1 & 0xff
        MOV     R5,#(??tmp1 >> 8) & 0xff
        MOV     R2,#??Data1 & 0xff
        MOV     R3,#(??Data1 >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
// 1006           memcpy(&Data2,&tmp2,sizeof(tmp2));
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#??tmp2 & 0xff
        MOV     R5,#(??tmp2 >> 8) & 0xff
        MOV     R2,#??Data2 & 0xff
        MOV     R3,#(??Data2 >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
// 1007           
// 1008           if(kind == 0x01) {HalLcdWriteString( "MFOne-S50", HAL_LCD_LINE_2 );}
        MOV     DPTR,#??kind
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Smart_home_Display_8
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MFOne-S50">` & 0xff
        MOV     R3,#(`?<Constant "MFOne-S50">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_9
// 1009           else if(kind == 0x02) {HalLcdWriteString( "MFOne-S70", HAL_LCD_LINE_2 );}
??Smart_home_Display_8:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??Smart_home_Display_10
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MFOne-S70">` & 0xff
        MOV     R3,#(`?<Constant "MFOne-S70">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_9
// 1010           else if(kind == 0x03) {HalLcdWriteString( "MF-UltraLight", HAL_LCD_LINE_2 );}
??Smart_home_Display_10:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??Smart_home_Display_11
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MF-UltraLight">` & 0xff
        MOV     R3,#(`?<Constant "MF-UltraLight">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_9
// 1011           else if(kind == 0x04) {HalLcdWriteString( "MF-Pro", HAL_LCD_LINE_2 );}
??Smart_home_Display_11:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Smart_home_Display_12
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MF-Pro">` & 0xff
        MOV     R3,#(`?<Constant "MF-Pro">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_9
// 1012           else if(kind == 0x05) {HalLcdWriteString( "MF-DesFire", HAL_LCD_LINE_2 );}
??Smart_home_Display_12:
        MOVX    A,@DPTR
        XRL     A,#0x5
        MOV     R1,#0x2
        JNZ     ??Smart_home_Display_13
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "MF-DesFire">` & 0xff
        MOV     R3,#(`?<Constant "MF-DesFire">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_9
// 1013           else {HalLcdWriteString( "No Card", HAL_LCD_LINE_2 );}
??Smart_home_Display_13:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "No Card">` & 0xff
        MOV     R3,#(`?<Constant "No Card">` >> 8) & 0xff
??Smart_home_Display_9:
        LCALL   ??HalLcdWriteString?relay
// 1014           
// 1015 
// 1016           HalLcdWriteStringValueValue( "", Data1, 16, "", Data2, 16, HAL_LCD_LINE_3 );
        MOV     ?V0 + 0,#`?<Constant "">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "">` >> 8) & 0xff
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 2,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 2,#0x10
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPTR,#??Data2
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x10
        MOV     DPTR,#??Data1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
// 1017           
// 1018           static uint8 percent;
// 1019           percent = (3 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent_2
        MOV     A,#0x4b
        MOVX    @DPTR,A
// 1020           HalLcdDisplayPercentBar("",percent);
        ; Setup parameters for call to function HalLcdDisplayPercentBar
        MOV     R1,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LJMP    ??Smart_home_Display_6 & 0xFFFF
// 1021           break;
// 1022       }
// 1023       
// 1024       case 3:
// 1025       {
// 1026           static uint16 GasF;
// 1027           static uint16 Infrared;         
// 1028 
// 1029           DeviceInfo DevGas = DeviceList[GasF];
??Smart_home_Display_4:
        MOV     DPTR,#??GasF
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#DeviceList & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(DeviceList >> 8) & 0xff
        ADDC    A,R1
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,A
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1030           DeviceInfo DevInf = DeviceList[infrared]; 
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 35) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 35) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1031           
// 1032           GasF = (uint16)DevGas.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??GasF
        LCALL   ?Subroutine12 & 0xFFFF
// 1033           Infrared = (uint16)DevInf.data[0];
??CrossCallReturnLabel_30:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??Infrared
        LCALL   ?Subroutine11 & 0xFFFF
// 1034           
// 1035           HalLcdWriteStringValue("GasFlame: ", GasF, 10, HAL_LCD_LINE_2 );
??CrossCallReturnLabel_24:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,#0xa
        MOV     DPTR,#??GasF
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     R2,#`?<Constant "GasFlame: ">` & 0xff
        MOV     R3,#(`?<Constant "GasFlame: ">` >> 8) & 0xff
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
// 1036           HalLcdWriteStringValue("Infrared: ", infrared, 10, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,#0xa
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Infrared: ">` & 0xff
        MOV     R3,#(`?<Constant "Infrared: ">` >> 8) & 0xff
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
// 1037           
// 1038           //显示最下面的百分比条
// 1039           static uint8 percent;
// 1040           percent = (4 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent_3
        MOV     A,#0x64
        LJMP    ??Smart_home_Display_5 & 0xFFFF
// 1041           HalLcdDisplayPercentBar("",percent);
// 1042           break;
// 1043       }
// 1044           
// 1045     }
// 1046       
// 1047       break;
// 1048     
// 1049     case 1:
// 1050       HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
??Smart_home_Display_0:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Relay Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Relay Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine13 & 0xFFFF
// 1051       //清除屏幕显示
// 1052       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1053       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1054       //这里的deviceStatus 可能是0x00,所以会出现bug 这个0在Device检查时被设置 2.24
// 1055       if(DeviceList[relay].deviceStatus == DEVICE_OFFLINE)
??CrossCallReturnLabel_31:
        JNZ     ??Smart_home_Display_14
// 1056       {
// 1057         HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Relay Offline">` & 0xff
        MOV     R3,#(`?<Constant "Relay Offline">` >> 8) & 0xff
??Smart_home_Display_15:
        LCALL   ??HalLcdWriteString?relay
        LJMP    ??Smart_home_Display_7 & 0xFFFF
// 1058       }
// 1059       else  //设备在线回显  设备在线可能是 0/1
// 1060       {
// 1061         HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
??Smart_home_Display_14:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Relay Online">` & 0xff
        MOV     R3,#(`?<Constant "Relay Online">` >> 8) & 0xff
        LCALL   ?Subroutine14 & 0xFFFF
// 1062         //继电器控制界面
// 1063         const uint8 cmd =  DeviceList[relay].data[0];
// 1064 
// 1065         if((cmd & 0x02) == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
??CrossCallReturnLabel_33:
        MOV     C,0xE0 /* A   */.1
        JNC     ??Smart_home_Display_16
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:ON">` & 0xff
        MOV     R3,#(`?<Constant "K1:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1066         if((cmd & 0x01) == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
??Smart_home_Display_16:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_Display_17
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K1:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1067         if((cmd & 0x20) == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
??Smart_home_Display_17:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.5
        JNC     ??Smart_home_Display_18
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:ON">` & 0xff
        MOV     R3,#(`?<Constant "K2:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1068         if((cmd & 0x10) == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}      
??Smart_home_Display_18:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??Smart_home_Display_7
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K2:OFF">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_15
// 1069       }
// 1070 
// 1071       break;
// 1072     
// 1073     case 2:
// 1074       HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
??Smart_home_Display_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Motor Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine13 & 0xFFFF
// 1075       //清除屏幕显示
// 1076       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1077       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1078       if(DeviceList[relay].deviceStatus == DEVICE_OFFLINE)
??CrossCallReturnLabel_32:
        JNZ     ??Smart_home_Display_19
// 1079       {
// 1080         HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Motor Offline">` & 0xff
        MOV     R3,#(`?<Constant "Motor Offline">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_15
// 1081       }
// 1082       else  //设备在线回显  设备在线可能是 0/1
// 1083       {
// 1084         HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 ); 
??Smart_home_Display_19:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Motor Online">` & 0xff
        MOV     R3,#(`?<Constant "Motor Online">` >> 8) & 0xff
        LCALL   ?Subroutine14 & 0xFFFF
// 1085         //电机控制界面
// 1086         const uint16 speed =  (uint16) DeviceList[relay].data[0];
// 1087         const uint16 status = (uint16) DeviceList[relay].data[1];
// 1088         
// 1089         HalLcdWriteStringValue( "Status:", status, 10, HAL_LCD_LINE_2 );
??CrossCallReturnLabel_34:
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,#0xa
        MOV     DPTR,#DeviceList + 52
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Status:">` & 0xff
        MOV     R3,#(`?<Constant "Status:">` >> 8) & 0xff
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
// 1090         HalLcdWriteStringValue( "Speed:", speed, 10, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,#0xa
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Speed:">` & 0xff
        MOV     R3,#(`?<Constant "Speed:">` >> 8) & 0xff
        LCALL   ?Subroutine25 & 0xFFFF
// 1091       
// 1092       }
// 1093   }
??CrossCallReturnLabel_64:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
// 1094   
// 1095 #endif // LCD_SUPPORTED  
// 1096 }
??Smart_home_Display_7:
        MOV     A,#0xe
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        LCALL   ??HalLcdWriteString?relay
        MOV     DPTR,#DeviceList + 51
        MOVX    A,@DPTR
        MOV     R6,A
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker129 Using cfiCommon1
        CFI (cfiPicker129) NoFunction
        CFI (cfiPicker129) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPTR,#DeviceList + 50
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x1
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiPicker129

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond130 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_31
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_32
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        RET
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker143 Using cfiCommon1
        CFI (cfiPicker143) NoFunction
        CFI (cfiPicker143) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x5
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond148 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker150 Using cfiCommon1
        CFI (cfiPicker150) NoFunction
        CFI (cfiPicker150) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiPicker150

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??humit:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??temper:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??SoundVb:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Light:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??lightmp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??integer:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??decimals:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent_1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??kind:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??tmp1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??tmp2:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Data1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Data2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent_2:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??GasF:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Infrared:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent_3:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Relay_Ctl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Relay_Ctl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Display?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Display

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Smart_home">`:
        DB "Smart_home"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor max Speed">`:
        DB "Motor max Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor min Speed">`:
        DB "Motor min Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Allow networking">`:
        DB "Allow networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Ban   networking">`:
        DB "Ban   networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "      Menu      ">`:
        DB "      Menu      "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hum:">`:
        DB "Hum:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "% Tem_1:">`:
        DB "% Tem_1:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Sound">`:
        DB "Sound"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Temper_2:">`:
        DB "Temper_2:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ".">`:
        DB "."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Light:">`:
        DB "Light:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MFOne-S50">`:
        DB "MFOne-S50"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MFOne-S70">`:
        DB "MFOne-S70"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-UltraLight">`:
        DB "MF-UltraLight"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-Pro">`:
        DB "MF-Pro"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-DesFire">`:
        DB "MF-DesFire"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "No Card">`:
        DB "No Card"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GasFlame: ">`:
        DB "GasFlame: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Infrared: ">`:
        DB "Infrared: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Contrling">`:
        DB "Relay Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Offline">`:
        DB "Relay Offline"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Online">`:
        DB "Relay Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:ON">`:
        DB "K1:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:OFF">`:
        DB "K1:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:ON">`:
        DB "K2:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:OFF">`:
        DB "K2:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Contrling">`:
        DB "Motor Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Offline">`:
        DB "Motor Offline"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Online">`:
        DB "Motor Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Status:">`:
        DB "Status:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Speed:">`:
        DB "Speed:"

        END
// 1097 
// 1098 
// 
// 2 605 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//   399 bytes in segment XDATA_ROM_C
//   239 bytes in segment XDATA_Z
// 
// 2 641 bytes of CODE  memory
//   399 bytes of CONST memory
//   239 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
