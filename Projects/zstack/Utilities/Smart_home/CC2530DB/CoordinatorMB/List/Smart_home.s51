///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        29/Apr/2021  21:42:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\Source\Smart_home.c                 /
//    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1003                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\ /
//                          Projects\zstack\Utilities\Smart_home\Source\Smart /
//                          _home.c -D LCD_SUPPORTED -D ZDO_COORDINATOR -D    /
//                          NV_RESTORE -D HAL_UART=TRUE -D xNV_INIT -D        /
//                          xREFLECTOR -D xHAL_UART_TEST -lC                  /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\ -lA    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\Source\ -I              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\   /
//                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\include\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530MB\ -I        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\include\ -I D:\毕设\CC2530-smart_home\Project /
//                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\. /
//                          .\..\Components\mac\high_level\ -I                /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\ -I               /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\ -I D:\毕设\CC2530-smart_home\Projects\zstack\ /
//                          Utilities\Smart_home\CC2530DB\..\..\..\..\..\Comp /
//                          onents\osal\include\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          services\saddr\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\af\ -I D:\毕设\CC2530-smart_home\Projects\z /
//                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\. /
//                          .\Components\stack\nwk\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sapi\ -I D:\毕设\CC2530-smart_home\Projects /
//                          \zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\ -I                      /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sys\ -I D:\毕设\CC2530-smart_home\Projects\ /
//                          zstack\Utilities\Smart_home\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\zdo\ -I                       /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\ -I D:\毕设\CC2530-smart_home\Projects\zstac /
//                          k\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\ -Ohz                           /
//    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\Smart_h /
//                          ome.s51                                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Smart_home

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Smart_home_CallBack?relay
        FUNCTION ??Smart_home_CallBack?relay,0203H
        FUNCTION ??Smart_home_Display?relay,0203H
        FUNCTION ??Smart_home_HandleKeys?relay,0203H
        PUBLIC ??Smart_home_Init?relay
        FUNCTION ??Smart_home_Init?relay,0203H
        FUNCTION ??Smart_home_Motor_cmd?relay,0203H
        PUBLIC ??Smart_home_ProcessEvent?relay
        FUNCTION ??Smart_home_ProcessEvent?relay,0203H
        FUNCTION ??Smart_home_ProcessMSGCmd?relay,0203H
        FUNCTION ??Smart_home_Relay_Ctl?relay,0203H
        PUBLIC Coordinator_Msg
        PUBLIC DeviceList
        PUBLIC Smart_home_CallBack
        FUNCTION Smart_home_CallBack,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Smart_home_ClusterList_IN
        PUBLIC Smart_home_ClusterList_OUT
        FUNCTION Smart_home_Display,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        FUNCTION Smart_home_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Smart_home_Init
        FUNCTION Smart_home_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC Smart_home_MaxDataLength
        FUNCTION Smart_home_Motor_cmd,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC Smart_home_ProcessEvent
        FUNCTION Smart_home_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION Smart_home_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 45, STACK
        FUNCTION Smart_home_Relay_Ctl,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC Smart_home_SimpleDesc
        PUBLIC Smart_home_TaskID
        PUBLIC Smart_home_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
HalUARTWrite        SYMBOL "HalUARTWrite"
afDataReqMTU        SYMBOL "afDataReqMTU"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
HalLedSet           SYMBOL "HalLedSet"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
AF_DataRequest      SYMBOL "AF_DataRequest"
strlen              SYMBOL "strlen"
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
HalLcdDisplayPercentBar SYMBOL "HalLcdDisplayPercentBar"
memcpy              SYMBOL "memcpy"
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdDisplayPercentBar?relay SYMBOL "?relay", HalLcdDisplayPercentBar
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_PermitJoiningRequest?relay SYMBOL "?relay", NLME_PermitJoiningRequest
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
??afRegister?relay  SYMBOL "?relay", afRegister
??memcpy?relay      SYMBOL "?relay", memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??strlen?relay      SYMBOL "?relay", strlen
Smart_home_CallBack SYMBOL "Smart_home_CallBack"
??Smart_home_CallBack?relay SYMBOL "?relay", Smart_home_CallBack
Smart_home_Init     SYMBOL "Smart_home_Init"
??Smart_home_Init?relay SYMBOL "?relay", Smart_home_Init
Smart_home_ProcessEvent SYMBOL "Smart_home_ProcessEvent"
??Smart_home_ProcessEvent?relay SYMBOL "?relay", Smart_home_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afDataReqMTU
        FUNCTION afDataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdDisplayPercentBar
        FUNCTION HalLcdDisplayPercentBar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdDisplayPercentBar?relay
        FUNCTION ??HalLcdDisplayPercentBar?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,00H
        EXTERN ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_PermitJoiningRequest?relay
        FUNCTION ??NLME_PermitJoiningRequest?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H

// D:\毕设\CC2530-smart_home\Projects\zstack\Utilities\Smart_home\Source\Smart_home.c
//    1 /**************************************************************************************************
//    2   文件名：Smart_home.c
//    3   作 者： 柳成林
//    4   功 能： 作为网关节点，实现传感器信息的采集，并可以通过其控制一些节点
//    5           终端设备主要分为8个，分别为
//    6      1、温度与光照度传感器；2、烟雾与火焰传感器；3、继电器；4、温湿度传感器；
//    7      5、声音与震动传感器；  6、人体红外检测传感器；7、电机；8、RFID检测器。
//    8   更新日志(2021)
//    9   3.13
//   10   + 新增 8种传感器的Project并设置好编译情况
//   11   + 修改 Smart_home_ProcessEvent() （增加各种处理器的事件）
//   12          Smart_home_Init()         （初始化内容修改，添加设备默认离线）
//   13   3.14
//   14   + 修改 Smart_home_ProcessMSGCmd()（添加终端节点类型判断，具体处理留空）
//   15   + 新增 Hal层各种传感器驱动(头文件)
//   16          ClusterList (添加8个终端，分开出与入)
//   17   3.17
//   18   + 修改 Smart_home_ProcessMSGCmd() （完成接收后对于各终端处理）
//   19   + 添加 Smart_home_HandleKeys()     (修改原来函数增添概念，未补全)
//   20   + 删除 static void Smart_home_Send(void);
//   21          static void Smart_home_Resp(void);
//   22          两个函数
//   23   3.19
//   24   + 检查 出现的warning并做标识
//   25   + 修改 Smart_home_HandleKeys() （补全设计函数）
//   26   + 新增 Smart_home_Device_check() (设备是否在线检查)
//   27 
//   28   3.21
//   29   + 新增 DeviceList以方便初始化和设备在线检查（本地变量部分）
//   30          Smart_home_Display()    （屏幕显示，未补全）
//   31          Smart_home_Key_add()     (控制按键，附加项)
//   32   + 修改 Smart_home_Device_check()
//   33          Smart_home_Init()
//   34          Smart_home_ProcessMSGCmd()
//   35          调整有关DeviceList（设备列表）部分的修改
//   36          直接使用数组位置号作为设备编号
//   37          按键控制方式，用按键情况控制
//   38   3.22
//   39   + 修改 Smart_home_Display()    （屏幕显示，补全）
//   40          Smart_home_Key_add()     (屏幕显示中的电机与继电器部分加入这里)
//   41          重写别名方式减少内存损耗
//   42          出现无法初始化的问题，需要项目重构
//   43   3.23
//   44   + Warn 代码初始化后会产生直接进入key的情况,需debug
//   45          OK键问题无法修复，放弃使用OK键，修改为Cencel组网 禁止组网
//   46   3.23 正式完成网关节点部分，（显示函数部分除外）
//   47   3.24 
//   48   + 修改 Smart_home_Key_add()与display函数整合
//   49   + bug:在每十秒一次调用的周期检查函数中会导致显示屏将近一秒时间不显示
//   50     已解决： 在状态0的时候作为在线即可
//   51   + 完成 显示功能设置
//   52    
//   53   经调试程序无bug，可以接收各个传感器消息。//3.22
//   54   当我没说。。好像出了内存问题//3.22
//   55   项目重构啦！，现在又只有一个小问题了/3.23
//   56 *********************************************************************/
//   57 
//   58 /*********************************************************************
//   59  * INCLUDES
//   60  */
//   61 
//   62 #include "OSAL.h"
//   63 #include "AF.h"
//   64 #include "ZDObject.h"
//   65 #include "ZDProfile.h"
//   66 #include "nwk_util.h"
//   67 
//   68 #include "Smart_home.h"
//   69 #include "OnBoard.h"
//   70 
//   71 #include "DebugTrace.h"
//   72 #include "string.h"
//   73 
//   74 /* HAL */
//   75 #include "hal_lcd.h"
//   76 #include "hal_led.h"
//   77 #include "hal_key.h"
//   78 #include "hal_uart.h"
//   79 
//   80 /*********************************************************************
//   81  * MACROS
//   82  */
//   83 /*设备链接相关设置*/
//   84 /*判断设备是否在线的最大次数*/
//   85 #define DEVICE_HEART_BEAT    5
//   86 #define DEVICE_CHECK_DELAY   5000
//   87 #define DEVICE_CHECK_TIMER   2000
//   88 
//   89 /*LCD相关设置*/
//   90 /*单屏显示时常   MS*/
//   91 #define LCD_DISPLAY_LENGTH   10000
//   92 #define LCD_DISPLAY_TIMER    2000  //多久更新一次 
//   93 
//   94 /*关于显示部分相关的宏*/
//   95 #define LCD_PAGE_MAX         4     //目前目录页最多4页
//   96 
//   97 /* 直流电机状态(status)定义*/
//   98 #define  HAL_MOTOR_STOP            0x01
//   99 #define  HAL_MOTOR_FORWARD         0x02
//  100 #define  HAL_MOTOR_BACKWARD        0x03
//  101 #define  MOTOR_MAX_SPEED           2400
//  102 
//  103 /*********************************************************************
//  104  * CONSTANTS
//  105  */
//  106 
//  107 #define SMART_HOME_PORT  0x00
//  108 
//  109 //#define SMART_HOME_BAUD  HAL_UART_BR_38400
//  110 #define SMART_HOME_BAUD  HAL_UART_BR_115200
//  111 
//  112 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  113 #define SMART_HOME_THRESH  64
//  114 #define SMART_HOME_RX_SZ  128
//  115 #define SMART_HOME_TX_SZ  128
//  116 
//  117 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  118 #define SMART_HOME_IDLE  8
//  119 
//  120 // Loopback Rx bytes to Tx for throughput testing.
//  121 #if !defined( SMART_HOME_LOOPBACK )
//  122 #define SMART_HOME_LOOPBACK  FALSE
//  123 #endif
//  124 
//  125 // This is the max byte count per OTA message.
//  126 #if !defined( SMART_HOME_TX_MAX )
//  127 #define SMART_HOME_TX_MAX  80
//  128 #endif
//  129 
//  130 //3.14 This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  131 const cId_t Smart_home_ClusterList_IN[Smart_home_MAX_INCLUSTERS ] =
Smart_home_ClusterList_IN:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
        DW 7
        DW 8
        DW 0
//  132 {
//  133   Smart_home_CLUSTERID_HUMITMSG,              // 温湿度
//  134   Smart_home_CLUSTERID_TEMPLIGHTMSG,          // 温度光照
//  135   Smart_home_CLUSTERID_RFIDMSG,               // 射频卡
//  136   Smart_home_CLUSTERID_GASFLAMEMSG,           // 烟雾火焰
//  137   Smart_home_CLUSTERID_INFRAREDMSG,           // 人体红外
//  138   Smart_home_CLUSTERID_SOUNDVBMSG,            // 声音振动
//  139   Smart_home_CLUSTERID_MOTORSTATUSMSG,        // 直流电机状态信息
//  140   Smart_home_CLUSTERID_RELAYSTATUSMSG         // 继电器
//  141 };
//  142 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  143 const cId_t Smart_home_ClusterList_OUT[Smart_home_MAX_INCLUSTERS ] =
Smart_home_ClusterList_OUT:
        DATA16
        DW 12
        DW 11
        DW 10
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
//  144 {
//  145   Smart_home_CLUSTERID_TEXT,
//  146   Smart_home_CLUSTERID_MOTORCTRL,             //直流电机控制
//  147   Smart_home_CLUSTERID_RELAYCTRL              //继电器控制
//  148 };
//  149 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  150 const SimpleDescriptionFormat_t Smart_home_SimpleDesc =
Smart_home_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 9
        DATA16
        DW Smart_home_ClusterList_IN
        DATA8
        DB 3
        DATA16
        DW Smart_home_ClusterList_OUT
//  151 {
//  152   Smart_home_ENDPOINT,              //  int   Endpoint;
//  153   Smart_home_PROFID,                //  uint16 AppProfId[2];
//  154   Smart_home_DEVICEID,              //  uint16 AppDeviceId[2];
//  155   Smart_home_DEVICE_VERSION,        //  int   AppDevVer:4;
//  156   Smart_home_FLAGS,                 //  int   AppFlags:4;
//  157   Smart_home_MAX_INCLUSTERS,          //  byte  AppNumInClusters;
//  158   (cId_t *)Smart_home_ClusterList_IN,  //  byte *pAppInClusterList;
//  159   Smart_home_MAX_OUTCLUSTERS,          //  byte  AppNumOutClusters;
//  160   (cId_t *)Smart_home_ClusterList_OUT   //  byte *pAppOutClusterList;
//  161 };
//  162 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  163 const endPointDesc_t Smart_home_epDesc =
Smart_home_epDesc:
        DB 1
        DATA16
        DW Smart_home_TaskID
        DW Smart_home_SimpleDesc
        DATA8
        DB 0
//  164 {
//  165   Smart_home_ENDPOINT,
//  166   &Smart_home_TaskID,
//  167   (SimpleDescriptionFormat_t *)&Smart_home_SimpleDesc,
//  168   noLatencyReqs
//  169 };
//  170 
//  171 /*********************************************************************
//  172  * TYPEDEFS
//  173  */
//  174 
//  175 /*********************************************************************
//  176  * GLOBAL VARIABLES
//  177  */
//  178 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  179 uint8 Smart_home_TaskID;    // Task ID for internal task/event processing.
Smart_home_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  180 
//  181 /*********************************************************************
//  182  * EXTERNAL VARIABLES
//  183  */
//  184 
//  185 /*********************************************************************
//  186  * EXTERNAL FUNCTIONS
//  187  */
//  188 
//  189 /*********************************************************************
//  190  * LOCAL VARIABLES
//  191  */
//  192 
//  193 /*3.18 终端节点的设备详细信息缓存*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 static uint8 DeviceCnt[Smart_home_MAX_INCLUSTERS];
DeviceCnt:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  195 static int8 Ctrlcase = 0;    //0用来控制屏幕显示，1控制继电器，2控制电机
Ctrlcase:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 static int8 LCD_Page  =  0;  //终端状态显示
LCD_Page:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  197 DeviceInfo DeviceList[Smart_home_MAX_INCLUSTERS];                      //设备列表  
DeviceList:
        DS 63
        REQUIRE __INIT_XDATA_Z
//  198 /*********************************************************************************
//  199 //这些似乎会引起内存问题  3.22
//  200 DeviceInfo *Humit = DeviceList+Smart_home_CLUSTERID_HUMITMSG;          //温湿度缓存
//  201 DeviceInfo *TempLight = DeviceList+Smart_home_CLUSTERID_TEMPLIGHTMSG;  // 温度光照缓存
//  202 DeviceInfo *RfID = DeviceList+Smart_home_CLUSTERID_RFIDMSG;            // RFID 信息缓存
//  203 DeviceInfo *gasFlame = DeviceList+Smart_home_CLUSTERID_GASFLAMEMSG;    //气体火焰缓存
//  204 DeviceInfo *infrared = DeviceList+Smart_home_CLUSTERID_INFRAREDMSG;    //人体红外
//  205 DeviceInfo *motor = DeviceList+Smart_home_CLUSTERID_MOTORSTATUSMSG;     //电机状态
//  206 DeviceInfo *relay = DeviceList+Smart_home_CLUSTERID_RELAYSTATUSMSG;    //继电器状态
//  207 DeviceInfo *soundVb = DeviceList+Smart_home_CLUSTERID_SOUNDVBMSG;      //声音震动
//  208 修改如下
//  209 ***********************************************************************************/
//  210 #define Humit     1     //温湿度缓存
//  211 #define TempLight 2     // 温度光照缓存
//  212 #define RfID      3     // RFID 信息缓存
//  213 #define gasFlame  4     //气体火焰缓存
//  214 #define infrared  5     //人体红外
//  215 #define motor     6     //电机状态
//  216 #define relay     7     //继电器状态
//  217 #define soundVb   8     //声音震动
//  218 
//  219 /*3.14 消息发送部分*/
//  220 /*3.17短地址存储*/
//  221 static afAddrType_t Humit_addr;
//  222 static afAddrType_t Light_addr;
//  223 static afAddrType_t GasF_addr;
//  224 static afAddrType_t Sound_addr;
//  225 static afAddrType_t Card_addr;
//  226 static afAddrType_t Infrared_addr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  227 static afAddrType_t Relay_addr;
Relay_addr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  228 static afAddrType_t Motor_addr;
Motor_addr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  229 
//  230 /*消息发送数组*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  231 byte Coordinator_Msg[MSG_MAX_LEN];
Coordinator_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  232 uint16 Smart_home_MaxDataLength;
Smart_home_MaxDataLength:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  233 
//  234 /*3.19 协议栈中有但暂时不知道要他们干嘛的东西*/
//  235 /*3.21 现在我会了！！！*/
//  236 /*3.22 那些没用！删掉了！*/
//  237 //static uint8 Smart_home_MsgID;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  238 static uint8 RelayTransID;  // This is the unique message ID (counter)
RelayTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  239 static uint8 MotorTransID;  // This is the unique message ID (counter)
MotorTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  240 
//  241 /*********************************************************************
//  242  * LOCAL FUNCTIONS
//  243  */
//  244 
//  245 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  246 //static void Smart_home_Key_add(uint8 Ctrlcase);
//  247 static void Smart_home_HandleKeys( byte shift, byte keys );
//  248 static void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  249 static void Smart_home_Device_check(void);
//  250 static void Smart_home_Relay_Ctl(uint8 cmd);
//  251 static void Smart_home_Motor_Ctl(uint8 cmd,uint8 speed);
//  252 static void Smart_home_Display(void);
//  253 static void Smart_home_Motor_cmd(int8 speed);
//  254 void Smart_home_CallBack(uint8 port, uint8 event);
//  255 
//  256 /*********************************************************************
//  257  * @fn      Smart_home_Init
//  258  *
//  259  * @brief   This is called during OSAL tasks' initialization.
//  260  *
//  261  * @param   task_id - the Task ID assigned by OSAL.
//  262  *
//  263  * @return  none
//  264  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void Smart_home_Init( uint8 task_id )
Smart_home_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Smart_home_Init
        CODE
//  266 {
        FUNCALL Smart_home_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 31
        MOV     A,#-0x1f
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R1
        MOV     R6,A
//  267   halUARTCfg_t uartConfig;
//  268   uint8 DeviceNum;                                    //DeviceList初始化用变量
//  269   uint8 i;
//  270   afRegister( (endPointDesc_t *)&Smart_home_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Smart_home_epDesc & 0xff
        MOV     R3,#(Smart_home_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  271   Smart_home_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#Smart_home_TaskID
        MOVX    @DPTR,A
//  272   MotorTransID = 0;
        MOV     DPTR,#MotorTransID
        CLR     A
        MOVX    @DPTR,A
//  273   RelayTransID = 0;
        MOV     DPTR,#RelayTransID
        MOVX    @DPTR,A
//  274 
//  275   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  276 
//  277   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  278   uartConfig.baudRate             = SMART_HOME_BAUD;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  279   uartConfig.flowControl          = FALSE;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  280   uartConfig.flowControlThreshold = SMART_HOME_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        LCALL   ??Subroutine34_0 & 0xFFFF
//  281   uartConfig.rx.maxBufSize        = SMART_HOME_RX_SZ;  // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_74:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  282   uartConfig.tx.maxBufSize        = SMART_HOME_TX_SZ;  // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_84:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  283   uartConfig.idleTimeout          = SMART_HOME_IDLE;   // 2x30 don't care - see uart driver.
??CrossCallReturnLabel_85:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
//  284   uartConfig.intEnable            = FALSE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  285   uartConfig.callBackFunc         = Smart_home_CallBack;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??Smart_home_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??Smart_home_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  286   HalUARTOpen (SMART_HOME_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  287 
//  288 #if !defined ( TRANSMITAPP_FRAGMENTED )
//  289   afDataReqMTU_t mtu;
//  290 #endif  
//  291   
//  292 #if defined ( LCD_SUPPORTED )
//  293   HalLcdWriteString( "Smart_home", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Smart_home">` & 0xff
        MOV     R3,#(`?<Constant "Smart_home">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  294 #endif
//  295   
//  296 #if (HAL_UART == TRUE)
//  297   HalUARTWrite(HAL_UART_PORT_0, "Init Success!\n",   strlen("Init Success!\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Init Success!\\n">` & 0xff
        MOV     R3,#(`?<Constant "Init Success!\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  298 #endif
//  299   
//  300   // Set the data length
//  301 #if defined ( Smart_Home_FRAGMENTED )
//  302   Smart_home_MaxDataLength = MSG_MAX_LEN;
//  303 #else
//  304   mtu.kvp        = FALSE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  305   mtu.aps.secure = FALSE;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine10 & 0xFFFF
//  306   Smart_home_MaxDataLength = afDataReqMTU( &mtu );
??CrossCallReturnLabel_18:
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        MOV     DPTR,#Smart_home_MaxDataLength
        LCALL   ??Subroutine34_0 & 0xFFFF
//  307 #endif
//  308   
//  309   for(i=0;i<Smart_home_MaxDataLength;i++)
??CrossCallReturnLabel_75:
        MOV     DPTR,#Smart_home_MaxDataLength
        MOVX    A,@DPTR
        JZ      ??Smart_home_Init_0
//  310   {
//  311     Coordinator_Msg[i] = 0;
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPTR,#Coordinator_Msg
??Smart_home_Init_1:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        ORL     A,R0
        JNZ     ??Smart_home_Init_1
//  312   }
//  313   
//  314   ZDO_RegisterForZDOMsg( Smart_home_TaskID, End_Device_Bind_rsp );
??Smart_home_Init_0:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  315   ZDO_RegisterForZDOMsg( Smart_home_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  316   
//  317   //3.22 显示延时
//  318   osal_start_timerEx( Smart_home_TaskID, SMART_HOME_DISPLAY_EVT, 
//  319                       SMART_HOME_DEVICE_DISPLAY_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x10
        MOV     R5,#0x27
        MOV     R2,#0x10
        LCALL   ??Subroutine31_0 & 0xFFFF
//  320   
//  321   
//  322   //3.14 打开设备在线检测，第一次开启检测延时较长时间
//  323   osal_start_timerEx( Smart_home_TaskID, SMART_HOME_DEVICE_CHECK_EVT, 
//  324                       SMART_HOME_DEVICE_CHECK_DELAY);
??CrossCallReturnLabel_66:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        LCALL   ?Subroutine14 & 0xFFFF
//  325  
//  326   //3.13 关闭LED灯(D4)，表示协调器默认不允许组网
//  327   NLME_PermitJoiningRequest(0x00);
??CrossCallReturnLabel_64:
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        LCALL   ?Subroutine21 & 0xFFFF
//  328   HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
//  329   
//  330   //3.21 初始化页面为0 第一页
//  331   //LCD_Page=0;
//  332   
//  333   //3.13 设备离线状态检测初始化，初始化为离线
//  334   //3.21 修改为DeviceList方式，初始化DeviceCnt
//  335   for(DeviceNum=1;DeviceNum<Smart_home_MAX_INCLUSTERS;DeviceNum++) //只初始化终端
??CrossCallReturnLabel_45:
        MOV     R5,#0x1
//  336   {
//  337     DeviceList[DeviceNum].deviceid = DeviceNum;
??Smart_home_Init_2:
        MOV     DPL,R5
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#DeviceList & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(DeviceList >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,R5
        MOVX    @DPTR,A
//  338     DeviceList[DeviceNum].deviceStatus = DEVICE_OFFLINE;
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
//  339     DeviceCnt[DeviceNum]=0;
        MOV     A,#DeviceCnt & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(DeviceCnt >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  340   }
        INC     R5
        MOV     A,R5
        CLR     C
        SUBB    A,#0x9
        JC      ??Smart_home_Init_2
//  341 }
        MOV     A,#0x1f
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  342 
//  343 /*********************************************************************
//  344  * @fn      Smart_home_ProcessEvent
//  345  *
//  346  * @brief   Generic Application Task event processor.
//  347  *
//  348  * @param   task_id  - The OSAL assigned task ID.
//  349  * @param   events   - Bit map of events to process.
//  350  *
//  351  * @return  Event flags of all unprocessed events.
//  352  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  353 UINT16 Smart_home_ProcessEvent( uint8 task_id, UINT16 events )
Smart_home_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Smart_home_ProcessEvent
        CODE
//  354 {
        FUNCALL Smart_home_ProcessEvent, Smart_home_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_Display
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  355   afIncomingMSGPacket_t *MSGpkt;
//  356   (void)task_id;  // Intentionally unreferenced parameter
//  357   afDataConfirm_t *afDataConfirm;
//  358   
//  359   //3.13 数据确认消息字段
//  360   ZStatus_t sentStatus;
//  361   byte sentEP;
//  362   
//  363   if ( events & SYS_EVENT_MSG )   //3.13 系统消息事件
        ANL     A,#0x80
        JNZ     ??Smart_home_ProcessEvent_0
//  364   {
//  365 
//  366     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID )) )
//  367     {
//  368       switch ( MSGpkt->hdr.event )
//  369       {
//  370         case ZDO_CB_MSG:           //3.13 ZDO传入消息回调
//  371           Smart_home_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  372           break;
//  373           
//  374         case KEY_CHANGE:           //3.13 按键事件
//  375           Smart_home_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  376           break;
//  377          
//  378         case AF_DATA_CONFIRM_CMD:
//  379         //3.13 接收到此消息，作为对发送的数据包的确认。
//  380         //状态为ZStatus_t类型[在ZComDef.h中定义]
//  381         //消息字段在AF.h中定义
//  382           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  383           sentEP = afDataConfirm->endpoint;
//  384           sentStatus = afDataConfirm->hdr.status;
//  385  
//  386           if ( (ZSuccess == sentStatus) &&
//  387                (Smart_home_epDesc.endPoint == sentEP) )
//  388           {  
//  389             //3.13 在消息发送确认成功后绿灯闪烁一下
//  390             //HalLedSet(HAL_LED_1, HAL_LED_MODE_BLINK);
//  391           }
//  392           else
//  393           {
//  394             //3.13 红灯闪烁一下  硬件还没实现
//  395             //HalLedSet(HAL_LED_2, HAL_LED_MODE_BLINK);
//  396           }
//  397           break;
//  398           
//  399         case AF_INCOMING_MSG_CMD:   //3.13 消息传入处理
//  400           //3.13 在消息接收确认成功后绿灯闪烁一下
//  401           Smart_home_ProcessMSGCmd( MSGpkt );
//  402           break;
//  403         default:
//  404           break;
//  405       }
//  406 
//  407       osal_msg_deallocate( (uint8 *)MSGpkt );
//  408       
//  409       // Next
//  410       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID );
//  411     }
//  412     
//  413     // Squash compiler warnings until values are used.
//  414     (void)sentStatus;
//  415     (void)sentEP;
//  416     
//  417     return ( events ^ SYS_EVENT_MSG );
//  418   }
//  419 
//  420   if ( events & SMART_HOME_SEND_MSG_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_ProcessEvent_1
//  421   {
//  422     //Smart_home_Send();
//  423     return ( events ^ SMART_HOME_SEND_MSG_EVT );
        XRL     A,#0x1
        MOV     R2,A
        LJMP    ??Smart_home_ProcessEvent_2 & 0xFFFF
//  424   }
??Smart_home_ProcessEvent_3:
        ; Setup parameters for call to function Smart_home_ProcessMSGCmd
        LCALL   ??Smart_home_ProcessMSGCmd?relay
??Smart_home_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
??Smart_home_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??Smart_home_ProcessEvent_5
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Smart_home_ProcessEvent_3
        ADD     A,#0x5a
        JNZ     ??Smart_home_ProcessEvent_4
        ; Setup parameters for call to function Smart_home_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Smart_home_HandleKeys?relay
        SJMP    ??Smart_home_ProcessEvent_4
??Smart_home_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??Smart_home_ProcessEvent_6:
        MOV     R3,A
        LJMP    ??Smart_home_ProcessEvent_2 & 0xFFFF
//  425   
//  426   if ( events & SMART_HOME_DEVICE_CHECK_EVT )  //终端设备检查事件
??Smart_home_ProcessEvent_1:
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??Smart_home_ProcessEvent_7 & 0xFFFF
//  427   {
//  428     Smart_home_Device_check();  //调用终端设备检查函数
        MOV     DPTR,#??DeviceID
        MOV     A,#0x1
        MOVX    @DPTR,A
??Smart_home_ProcessEvent_8:
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_47:
        MOVX    A,@DPTR
        MOV     DPTR,#??Device_status
        MOVX    @DPTR,A
        MOV     A,#DeviceCnt & 0xff
        ADD     A,R2
        MOV     R0,A
        MOV     A,#(DeviceCnt >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#??counttmp
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#??Device_status
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPTR,#??counttmp + 1
        JZ      ??Smart_home_ProcessEvent_9
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_29:
        MOVX    A,@DPTR
        INC     A
        SJMP    ??Smart_home_ProcessEvent_10
??Smart_home_ProcessEvent_9:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_30:
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#??Device_status
??Smart_home_ProcessEvent_10:
        MOVX    @DPTR,A
        MOV     DPTR,#??counttmp
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x6
        JC      ??Smart_home_ProcessEvent_11
        MOV     DPTR,#??counttmp + 1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     A,#0x5
        MOVX    @DPTR,A
        MOV     DPTR,#??Device_status
        MOV     A,#0x2
        MOVX    @DPTR,A
??Smart_home_ProcessEvent_11:
        MOV     DPTR,#??Device_status
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#??DeviceID
        MOVX    A,@DPTR
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_48:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#??DeviceID
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x9
        JC      ??Smart_home_ProcessEvent_8
//  429     
//  430     osal_start_timerEx(Smart_home_TaskID,SMART_HOME_DEVICE_CHECK_EVT,
//  431                        DEVICE_CHECK_TIMER);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        LCALL   ?Subroutine14 & 0xFFFF
//  432     return (events ^ SMART_HOME_DEVICE_CHECK_EVT);
??CrossCallReturnLabel_65:
        MOV     A,R6
        XRL     A,#0x80
??Smart_home_ProcessEvent_12:
        MOV     R2,A
        MOV     A,R7
        LJMP    ??Smart_home_ProcessEvent_6 & 0xFFFF
//  433   }
//  434   
//  435   
//  436   if( events & SMART_HOME_DISPLAY_EVT )
??Smart_home_ProcessEvent_7:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??Smart_home_ProcessEvent_13
//  437   {
//  438     Smart_home_Display();
        ; Setup parameters for call to function Smart_home_Display
        LCALL   ??Smart_home_Display?relay
//  439     //周期性刷新
//  440     osal_start_timerEx( Smart_home_TaskID,events & SMART_HOME_DISPLAY_EVT,LCD_DISPLAY_TIMER);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     A,R6
        ANL     A,#0x10
        MOV     R2,A
        LCALL   ??Subroutine31_0 & 0xFFFF
//  441     return (events ^ SMART_HOME_DISPLAY_EVT);
??CrossCallReturnLabel_67:
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??Smart_home_ProcessEvent_12
//  442   }
//  443 
//  444   return ( 0 );  // Discard unknown events.
??Smart_home_ProcessEvent_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Smart_home_ProcessEvent_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  445 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+-1
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(DeviceList + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((DeviceList + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     R2,#-0x80
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     R3,#0x0
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  446 
//  447 /*********************************************************************
//  448  * @fn      Smart_home_ProcessZDOMsgs()
//  449  *
//  450  * @brief   Process response messages
//  451  *
//  452  * @param   none
//  453  *
//  454  * @return  none
//  455  */
//  456 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  457 {
//  458   /*
//  459   switch ( inMsg->clusterID )
//  460   {
//  461     case End_Device_Bind_rsp:
//  462       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  463       {
//  464         // Light LED
//  465         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  466       }
//  467 #if defined(BLINK_LEDS)
//  468       else
//  469       {
//  470         // Flash LED to show failure
//  471         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  472       }
//  473 #endif
//  474       break;
//  475       
//  476     case Match_Desc_rsp:
//  477       {
//  478         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  479         if ( pRsp )
//  480         {
//  481           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  482           {
//  483             
//  484             Smart_home_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  485             Smart_home_TxAddr.addr.shortAddr = pRsp->nwkAddr;
//  486             // Take the first endpoint, Can be changed to search through endpoints
//  487             Smart_home_TxAddr.endPoint = pRsp->epList[0];
//  488             
//  489             
//  490             // Light LED
//  491             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  492           }
//  493           osal_mem_free( pRsp );
//  494         }
//  495       }
//  496       break;
//  497   }
//  498   */
//  499 }
//  500 
//  501 /*********************************************************************
//  502  * @fn      Smart_home_Key_add
//  503  *
//  504  * @brief   3.21新增，用来标识目前处于的控制状态，是附加项
//  505  *          0 控制屏幕 1 控制继电器 2 控制电机
//  506  *            
//  507  *
//  508  * @param   Ctrlcase 目前的控制号
//  509  *
//  510  * @return  屏幕回显
//  511  *
//  512 static void Smart_home_Key_add(uint8 Ctrlcase)
//  513 {
//  514 #if defined ( LCD_SUPPORTED )
//  515   switch(Ctrlcase)
//  516   {
//  517     default:    
//  518     case 0:
//  519       HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
//  520       //清除屏幕显示
//  521       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  522       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  523       break;
//  524     
//  525     case 1:
//  526       HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
//  527       //清除屏幕显示
//  528       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  529       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  530       if(DeviceList[relay].deviceStatus == DEVICE_ONLINE)  //设备在线回显
//  531       {
//  532         HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
//  533       }
//  534       if(DeviceList[relay].deviceStatus != DEVICE_ONLINE)
//  535       {
//  536         HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
//  537       }
//  538       break;
//  539     
//  540     case 2:
//  541       HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
//  542       //清除屏幕显示
//  543       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  544       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  545       if(DeviceList[motor].deviceStatus == DEVICE_ONLINE)  //设备在线回显
//  546       {
//  547         HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 );
//  548       }
//  549       if(DeviceList[motor].deviceStatus != DEVICE_ONLINE)
//  550       {
//  551         HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
//  552       }      
//  553       break;
//  554 #endif     
//  555   }
//  556 }
//  557 */
//  558 /*********************************************************************
//  559  * @fn      Smart_home_Motor_cmd
//  560  * 
//  561  * @brief   通过电机速度判断电机转向
//  562  * 
//  563  * 
//  564  * @param   uint8 电机转速
//  565  * 
//  566  * @return  
//  567  *          #define  HAL_MOTOR_STOP            0x01
//  568  *          #define  HAL_MOTOR_FORWARD         0x02
//  569  *          #define  HAL_MOTOR_BACKWARD        0x03
//  570  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  571 void Smart_home_Motor_cmd(int8 speed)
Smart_home_Motor_cmd:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function Smart_home_Motor_cmd
        CODE
//  572 {
        FUNCALL Smart_home_Motor_cmd, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  573   uint8 outspeed;
//  574   uint8 cmd;
//  575   if(speed == 0)
        JNZ     ??Smart_home_Motor_cmd_0
//  576   {
//  577     outspeed = 0;
??Smart_home_Motor_cmd_1:
        MOV     R7,#0x0
//  578     cmd = HAL_MOTOR_STOP;
        MOV     R2,#0x1
        SJMP    ??Smart_home_Motor_cmd_2
//  579   }   
//  580   else if(speed > 0)
??Smart_home_Motor_cmd_0:
        CLR     C
        SUBB    A,#0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        MOV     A,R6
        JC      ??Smart_home_Motor_cmd_3
//  581   {
//  582     outspeed = speed;
        MOV     R7,A
//  583     cmd = HAL_MOTOR_FORWARD;
        MOV     R2,#0x2
        SJMP    ??Smart_home_Motor_cmd_2
//  584   }
//  585   
//  586   else if(speed < 0)
??Smart_home_Motor_cmd_3:
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??Smart_home_Motor_cmd_1
//  587   {
//  588     outspeed = 0xff - speed;
        MOV     A,#-0x1
        CLR     C
        SUBB    A,R6
        MOV     R7,A
//  589     cmd = HAL_MOTOR_BACKWARD;
        MOV     R2,#0x3
//  590   }
//  591   
//  592   else
//  593   {
//  594     outspeed = 0;
//  595     cmd = HAL_MOTOR_STOP;    
//  596   }
//  597   Smart_home_Motor_Ctl(cmd,outspeed); 
??Smart_home_Motor_cmd_2:
        MOV     DPTR,#DeviceList + 43
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Motor_cmd_4
        MOV     DPTR,#MotorTransID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R3,A
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Motor_cmd_5
        MOV     R0,#0x30
        SJMP    ??Smart_home_Motor_cmd_6
??Smart_home_Motor_cmd_5:
        MOV     R0,#0x37
??Smart_home_Motor_cmd_6:
        MOV     A,R0
        ADD     A,R3
        MOV     DPTR,#Coordinator_Msg + 2
        MOVX    @DPTR,A
        MOV     DPTR,#MotorTransID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R3,A
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Motor_cmd_7
        MOV     R0,#0x30
        SJMP    ??Smart_home_Motor_cmd_8
??Smart_home_Motor_cmd_7:
        MOV     R0,#0x37
??Smart_home_Motor_cmd_8:
        MOV     A,R0
        ADD     A,R3
        MOV     DPTR,#Coordinator_Msg + 3
        MOVX    @DPTR,A
        MOV     A,R7
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R2
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#MotorTransID & 0xff
        MOV     ?V0 + 1,#(MotorTransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#Coordinator_Msg & 0xff
        MOV     ?V0 + 1,#(Coordinator_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#Smart_home_epDesc & 0xff
        MOV     R5,#(Smart_home_epDesc >> 8) & 0xff
        MOV     R2,#Motor_addr & 0xff
        MOV     R3,#(Motor_addr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  598 }
??Smart_home_Motor_cmd_4:
        SJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock19

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??MotorSpeed:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??NetWorkAllow:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay1_on:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay2_on:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock20
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
//  599 
//  600 /*********************************************************************
//  601  * @fn      Smart_home_HandleKeys
//  602  *
//  603  * @brief   设置按键事件
//  604  *          目前事件设置    3.19
//  605  *
//  606  *          HAL_KEY_SW_1--UP     (上翻一页)
//  607  *          HAL_KEY_SW_2--RIGHT  (选项向右)
//  608  *          HAL_KEY_SW_3--DOWN   (下翻一页)
//  609  *          HAL_KEY_SW_4--LEFT   (选项向左)
//  610  *          HAL_KEY_SW_5--OK     (组网开)
//  611  *          HAL_KEY_SW_7--CANCEL (组网关) 
//  612  * + 3.21 新增  选项总共有3种，控制屏幕显示，控制继电器和控制电机
//  613  *              控制继电器时 UP控制1，DOWN控制2
//  614  *              控制电机时   UP加速， DOWN减速
//  615  *
//  616  * @param   shift - true if in shift/alt.
//  617  * @param   keys  - bit field for key events.
//  618  *
//  619  * @return  none
//  620  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  621 void Smart_home_HandleKeys( byte shift, byte keys )
Smart_home_HandleKeys:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function Smart_home_HandleKeys
        CODE
//  622 {
        FUNCALL Smart_home_HandleKeys, Smart_home_Relay_Ctl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, Smart_home_Motor_cmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, Smart_home_Relay_Ctl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, Smart_home_Motor_cmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  623   //zAddrType_t txAddr;
//  624   static int8 MotorSpeed = 0;
//  625   static uint8 NetWorkAllow = 0;
//  626   /*这里这么设置似乎会出现内存问题
//  627   static uint8 Relay1_on = 0x02;  //两个默认都是关闭
//  628   static uint8 Relay2_on = 0x10;
//  629   */
//  630   /*3.21 LCD 显示*/
//  631   static uint8 Relay1_on = 0;  //两个默认都是关闭
//  632   static uint8 Relay2_on = 0;
//  633   
//  634   
//  635   if ( keys & HAL_KEY_SW_1 )  //UP
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_HandleKeys_0
//  636   {
//  637     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_HandleKeys_1
        DEC     A
        JZ      ??Smart_home_HandleKeys_2
//  638     {
//  639       default:    
//  640       case 0:
//  641       {
//  642         if(LCD_Page < LCD_PAGE_MAX)       {LCD_Page++;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_33:
        JNC     ??Smart_home_HandleKeys_3
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  643         if(LCD_Page > LCD_PAGE_MAX - 1)       {LCD_Page = 0;}
??Smart_home_HandleKeys_3:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_34:
        JC      ??Smart_home_HandleKeys_0
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??Smart_home_HandleKeys_0
//  644         break;
//  645       }
//  646       case 1:
//  647       {  
//  648         uint8 switch1;
//  649         if(Relay1_on == 0)  {Relay1_on = 1 ; switch1 = 0x02;}
??Smart_home_HandleKeys_1:
        MOV     DPTR,#??Relay1_on
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_4
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x2
        SJMP    ??Smart_home_HandleKeys_5
//  650         else if(Relay1_on == 1)  {Relay1_on = 0; switch1 = 0x01;}
??Smart_home_HandleKeys_4:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  651         else  {Relay1_on = 0; switch1 = 0x01;}       
//  652         Smart_home_Relay_Ctl(switch1);  
??Smart_home_HandleKeys_5:
        ; Setup parameters for call to function Smart_home_Relay_Ctl
        LCALL   ??Smart_home_Relay_Ctl?relay
//  653         break;
        SJMP    ??Smart_home_HandleKeys_0
//  654       } 
//  655       case 2:
//  656       {
//  657         if(MotorSpeed < 50)     {MotorSpeed += 10;}
??Smart_home_HandleKeys_2:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_35:
        JNC     ??Smart_home_HandleKeys_6
        MOVX    A,@DPTR
        ADD     A,#0xa
        MOVX    @DPTR,A
//  658         if(MotorSpeed >= 50)     
??Smart_home_HandleKeys_6:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_36:
        JC      ??Smart_home_HandleKeys_7
//  659         {
//  660 #if defined ( LCD_SUPPORTED )
//  661            HalLcdWriteString( "Motor max Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor max Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor max Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  662 #endif 
//  663            MotorSpeed = 50;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#0x32
        MOVX    @DPTR,A
//  664         }
//  665         Smart_home_Motor_cmd(MotorSpeed);
??Smart_home_HandleKeys_7:
        ; Setup parameters for call to function Smart_home_Motor_cmd
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Smart_home_Motor_cmd?relay
//  666         
//  667         break;
//  668       }
//  669          
//  670     }    
//  671   }
//  672   
//  673   if ( keys & HAL_KEY_SW_3 )  //DOWN
??Smart_home_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??Smart_home_HandleKeys_8
//  674   {
//  675     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_HandleKeys_9
        DEC     A
        JZ      ??Smart_home_HandleKeys_10
//  676     {
//  677       default:    
//  678       case 0:
//  679       {
//  680         if(LCD_Page >= 0)       {LCD_Page--;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_25:
        JC      ??Smart_home_HandleKeys_11
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  681         if(LCD_Page < 0)        {LCD_Page = LCD_PAGE_MAX;}
??Smart_home_HandleKeys_11:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_26:
        JNC     ??Smart_home_HandleKeys_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        SJMP    ??Smart_home_HandleKeys_8
//  682         break;
//  683       }
//  684       case 1:  
//  685       {
//  686         uint8 switch2;
//  687         if(Relay2_on == 0)  {Relay2_on = 1 ; switch2 = 0x20;}
??Smart_home_HandleKeys_9:
        MOV     DPTR,#??Relay2_on
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_12
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x20
        SJMP    ??Smart_home_HandleKeys_13
//  688         else if(Relay2_on == 1)  {Relay2_on = 0; switch2 = 0x10;}
??Smart_home_HandleKeys_12:
        XRL     A,#0x1
        JNZ     ??Smart_home_HandleKeys_14
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x10
        SJMP    ??Smart_home_HandleKeys_13
//  689         else  {Relay2_on = 0; switch2 = 0x01;}       
??Smart_home_HandleKeys_14:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  690         Smart_home_Relay_Ctl(switch2);       
??Smart_home_HandleKeys_13:
        ; Setup parameters for call to function Smart_home_Relay_Ctl
        LCALL   ??Smart_home_Relay_Ctl?relay
//  691         break;
        SJMP    ??Smart_home_HandleKeys_8
//  692       } 
//  693       case 2:
//  694       {
//  695         /*
//  696         #define  HAL_MOTOR_STOP            0x01
//  697         #define  HAL_MOTOR_FORWORD         0x02
//  698         #define  HAL_MOTOR_BACKWORD        0x03*/
//  699         if(MotorSpeed > -50)     {MotorSpeed -= 10;}
??Smart_home_HandleKeys_10:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_37:
        JC      ??Smart_home_HandleKeys_15
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOVX    @DPTR,A
//  700         if(MotorSpeed <= -50)     
??Smart_home_HandleKeys_15:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_38:
        JNC     ??Smart_home_HandleKeys_16
//  701         {
//  702 #if defined ( LCD_SUPPORTED )
//  703            HalLcdWriteString( "Motor min Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor min Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor min Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  704 #endif 
//  705            MotorSpeed = -80;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#-0x50
        MOVX    @DPTR,A
//  706         }
//  707         Smart_home_Motor_cmd(MotorSpeed);
??Smart_home_HandleKeys_16:
        ; Setup parameters for call to function Smart_home_Motor_cmd
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Smart_home_Motor_cmd?relay
//  708         break; 
//  709       }
//  710     }
//  711   }
//  712   
//  713   if ( keys & HAL_KEY_SW_2 )  //RIGHT  
??Smart_home_HandleKeys_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??Smart_home_HandleKeys_17
//  714   /*3.22 这里在调试时出现问题，具体问题为 点击up时会出现屏幕变为禁止组网
//  715     控制方面变为控制电机，问题在于汇编中的key值会出现  keys & HAL_KEY_SW_2 = 2
//  716     的情况，暂时禁止，需要等待研究  还有key_7*/
//  717   {
//  718      if(Ctrlcase < 3)   { Ctrlcase++;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_39:
        JNC     ??Smart_home_HandleKeys_18
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  719      if(Ctrlcase > 2)   { Ctrlcase=0;}
??Smart_home_HandleKeys_18:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_40:
        JC      ??Smart_home_HandleKeys_17
        CLR     A
        MOVX    @DPTR,A
//  720      //Smart_home_Key_add(Ctrlcase);
//  721   }
//  722   
//  723   if ( keys & HAL_KEY_SW_4 )  //LEFT
??Smart_home_HandleKeys_17:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.3
        JNC     ??Smart_home_HandleKeys_19
//  724   {
//  725      if(Ctrlcase > -1)   { Ctrlcase--;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_27:
        JC      ??Smart_home_HandleKeys_20
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  726      if(Ctrlcase < 0)    { Ctrlcase=2;}
??Smart_home_HandleKeys_20:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_28:
        JNC     ??Smart_home_HandleKeys_19
        MOV     A,#0x2
        MOVX    @DPTR,A
//  727      //Smart_home_Key_add(Ctrlcase);    
//  728   }
//  729   
//  730   if ( keys & HAL_KEY_SW_5 )  //OK
//  731   {
//  732 
//  733   }
//  734   
//  735   if ( keys & HAL_KEY_SW_7 )  //CENCEL
??Smart_home_HandleKeys_19:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.6
        JNC     ??Smart_home_HandleKeys_21
//  736   {
//  737      if(NetWorkAllow == 0)
        MOV     DPTR,#??NetWorkAllow
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_22
//  738      {
//  739        NetWorkAllow = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  740        NLME_PermitJoiningRequest(0xFF); // 组网，允许随时加入
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#-0x1
        LCALL   ??NLME_PermitJoiningRequest?relay
//  741        HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  742 #if defined ( LCD_SUPPORTED )
//  743        HalLcdWriteString( "Allow networking", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Allow networking">` & 0xff
        MOV     R3,#(`?<Constant "Allow networking">` >> 8) & 0xff
        SJMP    ??Smart_home_HandleKeys_23
//  744 #endif
//  745      }
//  746      else
//  747      {
//  748        NetWorkAllow = 0;
??Smart_home_HandleKeys_22:
        CLR     A
        MOVX    @DPTR,A
//  749        NLME_PermitJoiningRequest(0x00); // 不允许组网
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,A
        LCALL   ?Subroutine21 & 0xFFFF
//  750        HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);  
//  751 #if defined ( LCD_SUPPORTED )
//  752        HalLcdWriteString( "Ban   networking", HAL_LCD_LINE_4 );
??CrossCallReturnLabel_46:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Ban   networking">` & 0xff
        MOV     R3,#(`?<Constant "Ban   networking">` >> 8) & 0xff
??Smart_home_HandleKeys_23:
        LCALL   ??HalLcdWriteString?relay
//  753 #endif        
//  754      }
//  755   }
//  756 }
??Smart_home_HandleKeys_21:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ??NLME_PermitJoiningRequest?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x31
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x32
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42
//  757 
//  758 /*********************************************************************
//  759  * @fn      Smart_home_ProcessMSGCmd
//  760  *
//  761  * @brief   Data message processor callback. This function processes
//  762  *          any incoming data - probably from other devices. Based
//  763  *          on the cluster ID, perform the intended action.
//  764  *
//  765  * @param   pkt - pointer to the incoming message packet
//  766  *
//  767  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  768  *          FALSE otherwise.
//  769  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  770 void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
Smart_home_ProcessMSGCmd:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function Smart_home_ProcessMSGCmd
        CODE
//  771 {
        FUNCALL Smart_home_ProcessMSGCmd, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 35
        MOV     A,#-0x23
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 45)
//  772   //HalUARTWrite(HAL_UART_PORT_0, "9",   1);
//  773   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for Smart_home_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_8
        CODE
//  774   {
//  775   /***********************************************************************
//  776     目前总共8种case
//  777    #define Smart_home_CLUSTERID_HUMITMSG            1  // 温湿度
//  778    #define Smart_home_CLUSTERID_TEMPLIGHTMSG        2  // 温度光照
//  779    #define Smart_home_CLUSTERID_RFIDMSG             3  // 射频卡
//  780    #define Smart_home_CLUSTERID_GASFLAMEMSG         4  // 烟雾火焰
//  781    #define Smart_home_CLUSTERID_INFRAREDMSG         5  // 人体红外
//  782    #define Smart_home_CLUSTERID_SOUNDVBMSG          6  // 声音振动
//  783    #define Smart_home_CLUSTERID_MOTORSTATUSMSG      7  // 直流电机状态信息
//  784    #define Smart_home_CLUSTERID_RELAYSTATUSMSG      8  // 继电器状态信息
//  785     
//  786    设备描述
//  787    typedef struct DeviceInfo
//  788    {
//  789      uint8 deviceID;
//  790      uint8 deviceStatus;
//  791      uint8 data[5];
//  792    } DeviceInfo; 
//  793    ************************************************************************/ 
//  794     //3.14 消息处理模块，共8个，行为类似 
//  795     //3.21 修改为指针方法（DeviceList相关）
//  796     case Smart_home_CLUSTERID_HUMITMSG:         // 温湿度
//  797       uint8 sendbufHumit[4] = {0};
??Smart_home_ProcessMSGCmd_1:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  798       sendbufHumit[0] = '1';
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x31
        MOVX    @DPTR,A
//  799       
//  800       DeviceList[Humit].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线
        MOV     DPTR,#DeviceList + 8
        LCALL   ?Subroutine2 & 0xFFFF
//  801       sendbufHumit[1] = DeviceList[Humit].data[0] = pkt->cmd.Data[4]; // 湿度 
??CrossCallReturnLabel_0:
        MOV     DPTR,#DeviceList + 9
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
//  802       sendbufHumit[2] = DeviceList[Humit].data[1] = pkt->cmd.Data[5]; // 温度
??CrossCallReturnLabel_12:
        MOV     DPTR,#DeviceList + 10
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  803 
//  804       sendbufHumit[3] = '\n';
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  805       
//  806 #if (HAL_UART == TRUE)
//  807       HalUARTWrite(HAL_UART_PORT_0, sendbufHumit,   strlen(sendbufHumit));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     A,#0x7
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  808 #endif
//  809       break;
//  810       
//  811     case Smart_home_CLUSTERID_TEMPLIGHTMSG:     // 温度光照
//  812       uint8 sendbufTempLight[6] = {0};
??Smart_home_ProcessMSGCmd_2:
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  813       sendbufTempLight[0] = '2';
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x32
        MOVX    @DPTR,A
//  814       
//  815       DeviceList[TempLight].deviceStatus = DEVICE_ONLINE;   //收到消息设置为在线
        MOV     DPTR,#DeviceList + 15
        LCALL   ?Subroutine2 & 0xFFFF
//  816       
//  817       sendbufTempLight[1] = DeviceList[TempLight].data[0] = pkt->cmd.Data[4]; // 温度整数
??CrossCallReturnLabel_1:
        MOV     DPTR,#DeviceList + 16
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  818       sendbufTempLight[2] = DeviceList[TempLight].data[1] = pkt->cmd.Data[5]; // 温度小数
??CrossCallReturnLabel_14:
        MOV     DPTR,#DeviceList + 17
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
//  819       sendbufTempLight[3] = DeviceList[TempLight].data[2] = pkt->cmd.Data[6]; // 光照
??CrossCallReturnLabel_10:
        MOV     DPTR,#DeviceList + 18
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  820       sendbufTempLight[4] = DeviceList[TempLight].data[3] = pkt->cmd.Data[7]; // 光照
??CrossCallReturnLabel_8:
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 19
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  821       /*
//  822       sendbufTempLight[1] = '1'; // 温度整数
//  823       sendbufTempLight[2] = '2'; // 温度小数
//  824       sendbufTempLight[3] = '3'; // 光照
//  825       sendbufTempLight[4] = '4'; // 光照
//  826       */
//  827       sendbufTempLight[5] = '\n';
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  828       
//  829 #if (HAL_UART == TRUE)
//  830       HalUARTWrite(HAL_UART_PORT_0, sendbufTempLight,   6);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x1d
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  831 #endif
//  832       break;
//  833       
//  834     case Smart_home_CLUSTERID_RFIDMSG:          // 射频卡
//  835       uint8 sendbufRfID[7] = {0};
??Smart_home_ProcessMSGCmd_3:
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_2` & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  836       sendbufRfID[0] = '3';
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x33
        MOVX    @DPTR,A
//  837       
//  838       DeviceList[RfID].deviceStatus = DEVICE_ONLINE;        //收到消息设置为在线
        MOV     DPTR,#DeviceList + 22
        LCALL   ?Subroutine2 & 0xFFFF
//  839       sendbufRfID[1] = DeviceList[RfID].data[0] = pkt->cmd.Data[4]; // 射频卡类型
??CrossCallReturnLabel_2:
        MOV     DPTR,#DeviceList + 23
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  840       sendbufRfID[2] = DeviceList[RfID].data[1] = pkt->cmd.Data[5]; // 4个字节的ID号
??CrossCallReturnLabel_15:
        MOV     DPTR,#DeviceList + 24
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
//  841       sendbufRfID[3] = DeviceList[RfID].data[2] = pkt->cmd.Data[6]; //
??CrossCallReturnLabel_11:
        MOV     DPTR,#DeviceList + 25
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine24 & 0xFFFF
//  842       sendbufRfID[4] = DeviceList[RfID].data[3] = pkt->cmd.Data[7]; //
??CrossCallReturnLabel_49:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 26
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  843       sendbufRfID[5] = DeviceList[RfID].data[4] = pkt->cmd.Data[8]; //  
??CrossCallReturnLabel_9:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 27
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  844       
//  845       sendbufRfID[6] = '\n';
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  846       
//  847 #if (HAL_UART == TRUE)
//  848       HalUARTWrite(HAL_UART_PORT_0, sendbufRfID,   strlen(sendbufRfID));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     A,#0x16
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  849 #endif
//  850       break;
//  851       
//  852     case Smart_home_CLUSTERID_GASFLAMEMSG:      // 烟雾火焰
//  853       uint8 sendbufgasFlame[3] = {0};
??Smart_home_ProcessMSGCmd_4:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_3` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  854       sendbufgasFlame[0] = '4';
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x34
        MOVX    @DPTR,A
//  855       
//  856       DeviceList[gasFlame].deviceStatus = DEVICE_ONLINE;    //收到消息设置为在线
        MOV     DPTR,#DeviceList + 29
        LCALL   ?Subroutine3 & 0xFFFF
//  857       sendbufgasFlame[1] = DeviceList[gasFlame].data[0] = pkt->cmd.Data[4]; // 烟雾与火焰报警信息
??CrossCallReturnLabel_4:
        MOV     DPTR,#DeviceList + 30
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  858 
//  859       sendbufgasFlame[2] = '\n';
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  860       
//  861 #if (HAL_UART == TRUE)
//  862       HalUARTWrite(HAL_UART_PORT_0, sendbufgasFlame,   3);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x3
        MOV     R5,#0x0
        INC     A
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  863 #endif
//  864       break;
//  865       
//  866     case Smart_home_CLUSTERID_INFRAREDMSG:      // 人体红外
//  867       uint8 sendbufinfrared[3] = {0};
??Smart_home_ProcessMSGCmd_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_4` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_4` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  868       sendbufinfrared[0] = '5';
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x35
        MOVX    @DPTR,A
//  869       
//  870       DeviceList[infrared].deviceStatus = DEVICE_ONLINE;    //收到消息设置为在线
        MOV     DPTR,#DeviceList + 36
        LCALL   ?Subroutine3 & 0xFFFF
//  871       sendbufinfrared[1] = DeviceList[infrared].data[0] = pkt->cmd.Data[4]; // 人体红外
??CrossCallReturnLabel_5:
        MOV     DPTR,#DeviceList + 37
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  872 
//  873       sendbufinfrared[2] = '\n';
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        LCALL   ?Subroutine10 & 0xFFFF
//  874       
//  875 #if (HAL_UART == TRUE)
//  876       HalUARTWrite(HAL_UART_PORT_0, sendbufinfrared,   strlen(sendbufinfrared));
??CrossCallReturnLabel_19:
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LJMP    ??Smart_home_ProcessMSGCmd_10 & 0xFFFF
//  877 #endif
//  878       break;
//  879 
//  880     case Smart_home_CLUSTERID_SOUNDVBMSG:       // 声音振动
//  881       uint8 sendbufsoundVb[4] = {0};
??Smart_home_ProcessMSGCmd_6:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_5` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_5` & 0xff
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  882       sendbufsoundVb[0] = '6';
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x36
        MOVX    @DPTR,A
//  883       
//  884       DeviceList[soundVb].deviceStatus = DEVICE_ONLINE;     //收到消息设置为在线
        MOV     DPTR,#DeviceList + 57
        LCALL   ?Subroutine3 & 0xFFFF
//  885       sendbufsoundVb[1] = DeviceList[soundVb].data[0] = pkt->cmd.Data[4]; // 声音震动信息
??CrossCallReturnLabel_6:
        MOV     DPTR,#DeviceList + 58
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  886       
//  887       
//  888       sendbufsoundVb[2] = '\n';
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  889       
//  890 #if (HAL_UART == TRUE)
//  891       HalUARTWrite(HAL_UART_PORT_0, sendbufsoundVb,   strlen(sendbufsoundVb));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     A,#0x12
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  892 #endif
//  893       break;
//  894       
//  895     case Smart_home_CLUSTERID_MOTORSTATUSMSG:   // 直流电机状态信息
//  896       uint8 sendbufmotor[4] = {0};
??Smart_home_ProcessMSGCmd_7:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_6` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_6` & 0xff
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  897       sendbufmotor[0] = '7';
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x37
        MOVX    @DPTR,A
//  898       
//  899       DeviceList[motor].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线
        MOV     DPTR,#DeviceList + 43
        MOV     A,#0x1
        MOVX    @DPTR,A
//  900       // 储存电机设备的网络地址，用于发送控制命令
//  901       Motor_addr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Motor_addr + 8
        LCALL   ?Subroutine8 & 0xFFFF
//  902       Motor_addr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
??CrossCallReturnLabel_16:
        MOV     DPTR,#Motor_addr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  903       
//  904       Motor_addr.endPoint = 1;  // 目的节点的端口号
        MOV     DPTR,#Motor_addr + 9
        LCALL   ?Subroutine2 & 0xFFFF
//  905       //TransmitApp_DstMotorAddr->endPoint = TRANSMITAPP_ENDPOINT;
//  906      
//  907       sendbufmotor[1] = DeviceList[motor].data[0] = pkt->cmd.Data[4]; // 电机转速
??CrossCallReturnLabel_3:
        MOV     DPTR,#DeviceList + 44
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
//  908       sendbufmotor[2] = DeviceList[motor].data[1] = pkt->cmd.Data[5]; // 电机状态
??CrossCallReturnLabel_13:
        MOV     DPTR,#DeviceList + 45
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  909 
//  910       sendbufmotor[3] = '\n';
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  911       
//  912 #if (HAL_UART == TRUE)
//  913       HalUARTWrite(HAL_UART_PORT_0, sendbufmotor,   strlen(sendbufmotor));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     A,#0x3
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  914 #endif
//  915       break;
//  916       
//  917     case Smart_home_CLUSTERID_RELAYSTATUSMSG:   // 继电器状态信息
//  918       uint8 sendbufrelay[4] = {0};
??Smart_home_ProcessMSGCmd_8:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_7` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_7` & 0xff
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  919       sendbufrelay[0] = '8';
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x38
        MOVX    @DPTR,A
//  920       
//  921       DeviceList[relay].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线    
        MOV     DPTR,#DeviceList + 50
        MOV     A,#0x1
        MOVX    @DPTR,A
//  922       
//  923       // 储存继电器设备的网络地址，用于发送控制命令
//  924       Relay_addr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Relay_addr + 8
        LCALL   ?Subroutine8 & 0xFFFF
//  925       Relay_addr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;    
??CrossCallReturnLabel_17:
        MOV     DPTR,#Relay_addr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  926       Relay_addr.endPoint = 1; // 目的节点的端口号
        MOV     DPTR,#Relay_addr + 9
        LCALL   ?Subroutine3 & 0xFFFF
//  927       sendbufrelay[1] = DeviceList[relay].data[0] = pkt->cmd.Data[4]; 
??CrossCallReturnLabel_7:
        MOV     DPTR,#DeviceList + 51
        MOVX    @DPTR,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  928 
//  929       sendbufrelay[3] = '\n';
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  930       
//  931 #if (HAL_UART == TRUE)
//  932       HalUARTWrite(HAL_UART_PORT_0, sendbufrelay,   strlen(sendbufrelay));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     A,#0xe
??Smart_home_ProcessMSGCmd_9:
        LCALL   ?XSTACK_DISP0_8
??Smart_home_ProcessMSGCmd_10:
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  933 #endif
//  934       break;
//  935       
//  936     default:
//  937       break;
//  938   }
//  939 }
??Smart_home_ProcessMSGCmd_0:
        MOV     A,#0x23
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function afDataReqMTU
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        INC     A
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_56:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_51:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_50:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_10
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_11
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_62:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_15
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_49
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_10
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_11
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_12
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_13
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_8
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_9
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_52:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_13
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_8
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_9
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_61:
        INC     DPTR
        RET
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond99 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_13
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_8
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_9
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_4
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_5
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_6
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_7
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond108 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker112 Using cfiCommon1
        CFI (cfiPicker112) NoFunction
        CFI (cfiPicker112) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_55:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_15
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_0
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_1
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_2
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_3
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_63:
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond120 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_10
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_11
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_14
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_15
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_0
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_1
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_2
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_3
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker129 Using cfiCommon1
        CFI (cfiPicker129) NoFunction
        CFI (cfiPicker129) Picker
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiPicker129

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond130 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_5
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_6
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_7
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_0
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_1
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_2
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_3
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiPicker138 Using cfiCommon1
        CFI (cfiPicker138) NoFunction
        CFI (cfiPicker138) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiPicker138
//  940 
//  941 /*********************************************************************
//  942  * @fn     Smart_home_Device_check
//  943  *
//  944  * @brief   设备计数器，用来检查设备在开始组网后多久在线.
//  945  *          目前搜索为4次HeartBeat  (DEVICE_HEART_BEAT 3)
//  946  *          3.21
//  947  * @param   none
//  948  *
//  949  * @return  none
//  950  */
//  951 /*3.24 这里的检测时常有点长 改为变量外提的方式加快处理速度*/
//  952 static void Smart_home_Device_check(void)
//  953 {

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  954   static uint8 DeviceID;
??DeviceID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  955   static uint8 Device_status =  0;
??Device_status:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  956   static uint8* counttmp;
??counttmp:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  957   for(DeviceID=1;DeviceID<Smart_home_MAX_INCLUSTERS;DeviceID++)
//  958   {  
//  959     Device_status = DeviceList[DeviceID].deviceStatus;
//  960     counttmp = & DeviceCnt[DeviceID];
//  961     if(Device_status != DEVICE_ONLINE)    //设备离线
//  962     {
//  963       (*counttmp)++;
//  964     }
//  965     if(Device_status == DEVICE_ONLINE)    //设备在线
//  966     {
//  967       *counttmp = 0;
//  968       Device_status = 0;
//  969     }
//  970     if((*counttmp) > DEVICE_HEART_BEAT)
//  971     {
//  972       *counttmp = DEVICE_HEART_BEAT;
//  973       Device_status = DEVICE_OFFLINE;
//  974     }
//  975     DeviceList[DeviceID].deviceStatus = Device_status;
//  976   }
//  977   /*温湿度缓存 温度光照缓存 RFID 信息缓存 气体火焰缓存 
//  978   人体红外 电机状态 继电器状态 声音震动*/
//  979 }
//  980 
//  981 
//  982 /*********************************************************************
//  983  * @fn      Smart_home_Relay_Ctl
//  984  *
//  985  * @brief   发送继电器控制消息
//  986  *
//  987  * @param   none
//  988  *
//  989  * @return  none
//  990  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  991 static void Smart_home_Relay_Ctl(uint8 cmd)
Smart_home_Relay_Ctl:
        CFI Block cfiBlock139 Using cfiCommon0
        CFI Function Smart_home_Relay_Ctl
        CODE
//  992 {
        FUNCALL Smart_home_Relay_Ctl, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  993   uint8 tmp;
//  994   
//  995   // 只有设备在线时, 方发送控制命令
//  996   if (DeviceList[relay].deviceStatus != DEVICE_OFFLINE)
        MOV     DPTR,#DeviceList + 50
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Relay_Ctl_0
//  997   {
//  998     // put the sequence number in the message
//  999     tmp = HI_UINT8( RelayTransID );
        MOV     DPTR,#RelayTransID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
// 1000     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Relay_Ctl_1
        MOV     R0,#0x30
        SJMP    ??Smart_home_Relay_Ctl_2
??Smart_home_Relay_Ctl_1:
        MOV     R0,#0x37
// 1001     Coordinator_Msg[2] = tmp;
??Smart_home_Relay_Ctl_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 2
        MOVX    @DPTR,A
// 1002     tmp = LO_UINT8( RelayTransID );
        MOV     DPTR,#RelayTransID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
// 1003     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Relay_Ctl_3
        MOV     R0,#0x30
        SJMP    ??Smart_home_Relay_Ctl_4
??Smart_home_Relay_Ctl_3:
        MOV     R0,#0x37
// 1004     Coordinator_Msg[3] = tmp;
??Smart_home_Relay_Ctl_4:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 3
        MOVX    @DPTR,A
// 1005     
// 1006     // 发送给继电器的控制命令 
// 1007     Coordinator_Msg[4] = cmd;
        MOV     A,R6
        INC     DPTR
        MOVX    @DPTR,A
// 1008     /********************************************
// 1009     *   屏幕显示部分*
// 1010 #if defined ( LCD_SUPPORTED )
// 1011     if(cmd == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
// 1012     if(cmd == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
// 1013     if(cmd == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
// 1014     if(cmd == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}
// 1015 #endif     
// 1016     ********************************************/
// 1017     tmp = AF_DataRequest( &Relay_addr,                         
// 1018                           (endPointDesc_t *)&Smart_home_epDesc,                  
// 1019                            Smart_home_CLUSTERID_RELAYCTRL,
// 1020                            RELAYSTATUSMSG_LEN,                 
// 1021                            Coordinator_Msg,                    
// 1022                           &RelayTransID,                       
// 1023                            AF_DISCV_ROUTE,                     
// 1024                            AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#RelayTransID & 0xff
        MOV     ?V0 + 1,#(RelayTransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#Coordinator_Msg & 0xff
        MOV     ?V0 + 1,#(Coordinator_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#Smart_home_epDesc & 0xff
        MOV     R5,#(Smart_home_epDesc >> 8) & 0xff
        MOV     R2,#Relay_addr & 0xff
        MOV     R3,#(Relay_addr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1025   } 
// 1026 }
??Smart_home_Relay_Ctl_0:
        LJMP    ??Subroutine32_0 & 0xFFFF
        CFI EndBlock cfiBlock139
// 1027 
// 1028 /*********************************************************************
// 1029  * @fn      Smart_home_Motor_Ctl
// 1030  *
// 1031  * @brief   发送电机控制消息
// 1032  *
// 1033  * @param   none
// 1034  *
// 1035  * @return  none
// 1036  */
// 1037 static void Smart_home_Motor_Ctl(uint8 cmd,uint8 speed)
// 1038 {
// 1039   uint8 tmp;
// 1040   
// 1041   // 只有设备在线时, 方发送控制命令
// 1042   if (DeviceList[motor].deviceStatus != DEVICE_OFFLINE)
// 1043   {
// 1044     // put the sequence number in the message
// 1045     tmp = HI_UINT8( MotorTransID );
// 1046     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
// 1047     Coordinator_Msg[2] = tmp;
// 1048     tmp = LO_UINT8( MotorTransID );
// 1049     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
// 1050     Coordinator_Msg[3] = tmp;
// 1051     
// 1052     // 发送给电机的控制命令 
// 1053     Coordinator_Msg[4] = speed;
// 1054     Coordinator_Msg[5] = cmd;
// 1055     
// 1056     tmp = AF_DataRequest( &Motor_addr,                         
// 1057                           (endPointDesc_t *)&Smart_home_epDesc,                  
// 1058                            Smart_home_CLUSTERID_MOTORCTRL,
// 1059                            MOTORSTATUSMSG_LEN,                 
// 1060                            Coordinator_Msg,                    
// 1061                           &MotorTransID,                       
// 1062                            AF_DISCV_ROUTE,                     
// 1063                            AF_DEFAULT_RADIUS );
// 1064   }   
// 1065 }
// 1066 
// 1067 
// 1068 /*********************************************************************
// 1069  * @fn      Smart_home_Display
// 1070  *
// 1071  * @brief   屏幕回显函数，定义了内容如何显示.
// 1072  *
// 1073  * @param   port - UART port.
// 1074  * @param   event - the UART port event flag.
// 1075  *
// 1076  * @return  none
// 1077  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1078 static void Smart_home_Display(void)
Smart_home_Display:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function Smart_home_Display
        CODE
// 1079 {
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdDisplayPercentBar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1080 #if defined LCD_SUPPORTED
// 1081   switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_0 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_1 & 0xFFFF
// 1082   {
// 1083     default:    
// 1084     case 0:
// 1085       HalLcdWriteString( "      Menu      ", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "      Menu      ">` & 0xff
        MOV     R3,#(`?<Constant "      Menu      ">` >> 8) & 0xff
        LCALL   ?Subroutine11 & 0xFFFF
// 1086       //HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
// 1087       //清除屏幕显示
// 1088       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1089       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1090       
// 1091       switch(LCD_Page)
??CrossCallReturnLabel_20:
        MOV     DPTR,#LCD_Page
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_2 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??Smart_home_Display_4 & 0xFFFF
// 1092       {
// 1093         default:
// 1094         case 0:
// 1095         {
// 1096           static uint16 humit=0x14;
// 1097           static uint16 temper=0x14;
// 1098           static uint16 SoundVb; 
// 1099           
// 1100           
// 1101           DeviceInfo Devhum = DeviceList[Humit];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 7) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 7) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1102           DeviceInfo DevSound = DeviceList[soundVb];
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 56) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 56) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1103           //第一页第二行显示温度
// 1104           //      第三行显示光照
// 1105           if(Devhum.deviceStatus == DEVICE_ONLINE)
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_77
// 1106           {
// 1107               humit = (uint16)Devhum.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??humit
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1108               temper = (uint16)Devhum.data[1];          
??CrossCallReturnLabel_76:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??temper
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1109           }
// 1110 
// 1111           SoundVb = (uint16)DevSound.data[0];
??CrossCallReturnLabel_77:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??SoundVb
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1112 
// 1113           HalLcdWriteStringValueValue( "Hum:", humit, 10, "% T_1:", temper, 10, HAL_LCD_LINE_2 );
??CrossCallReturnLabel_78:
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPTR,#??temper
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#`?<Constant "% T_1:">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "% T_1:">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0xa
        MOV     DPTR,#??humit
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     R2,#`?<Constant "Hum:">` & 0xff
        MOV     R3,#(`?<Constant "Hum:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1114           
// 1115           if(SoundVb & 0x01 == 0x01) { HalLcdWriteString( "Sound: Voice", HAL_LCD_LINE_3 ); }
        MOV     DPTR,#??SoundVb
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     R1,#0x3
        JNC     ??Smart_home_Display_5
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Sound: Voice">` & 0xff
        MOV     R3,#(`?<Constant "Sound: Voice">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_6
// 1116           else if(SoundVb & 0x02 == 0x02) { HalLcdWriteString( "Sound: Vibration", HAL_LCD_LINE_3 ); }
// 1117           else if(SoundVb & 0x03 == 0x03) { HalLcdWriteString( "Sound: All", HAL_LCD_LINE_3 ); }
// 1118           else {HalLcdWriteString( "Sound: None", HAL_LCD_LINE_3 );}
??Smart_home_Display_5:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Sound: None">` & 0xff
        MOV     R3,#(`?<Constant "Sound: None">` >> 8) & 0xff
??Smart_home_Display_6:
        LCALL   ??HalLcdWriteString?relay
// 1119           
// 1120           //HalLcdWriteStringValue( "Sound:", SoundVb, 16, HAL_LCD_LINE_3 );
// 1121           
// 1122           
// 1123           //显示最下面的百分比条
// 1124           static uint8 percent;
// 1125           percent = (1 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent
        MOV     A,#0x19
??Smart_home_Display_7:
        MOVX    @DPTR,A
// 1126           HalLcdDisplayPercentBar("",percent);
        ; Setup parameters for call to function HalLcdDisplayPercentBar
        MOV     R1,A
        MOV     R2,#`?<Constant "">` & 0xff
        MOV     R3,#(`?<Constant "">` >> 8) & 0xff
        LCALL   ??HalLcdDisplayPercentBar?relay
// 1127           break;
        LJMP    ??Smart_home_Display_8 & 0xFFFF
// 1128         }
// 1129         case 1:
// 1130         {
// 1131           static uint16 Light;
// 1132           static uint8 lightmp;
// 1133           static uint16 integer;
// 1134           static uint16 decimals;
// 1135           DeviceInfo Devtmp = DeviceList[TempLight];
??Smart_home_Display_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 14) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 14) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1136           //第一页第二行显示温度
// 1137           //      第三行显示光照
// 1138           integer = (uint16)Devtmp.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??integer
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1139           decimals = (uint16)Devtmp.data[1];
??CrossCallReturnLabel_79:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??decimals
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1140           lightmp = Devtmp.data[3];
??CrossCallReturnLabel_80:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??lightmp
        MOVX    @DPTR,A
// 1141           Light = (uint16)Devtmp.data[4];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??Light
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1142           memcpy(&Light,&lightmp,sizeof(lightmp));
??CrossCallReturnLabel_81:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#??lightmp & 0xff
        MOV     R5,#(??lightmp >> 8) & 0xff
        MOV     R2,#??Light & 0xff
        MOV     R3,#(??Light >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1143           
// 1144           HalLcdWriteStringValueValue( "Temper_2:", integer, 10, ".", decimals, 10, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPTR,#??decimals
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#`?<Constant ".">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant ".">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0xa
        MOV     DPTR,#??integer
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R2,#`?<Constant "Temper_2:">` & 0xff
        MOV     R3,#(`?<Constant "Temper_2:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1145           HalLcdWriteStringValue( "Light:", Light, 10, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R1,#0xa
        MOV     DPTR,#??Light
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     R2,#`?<Constant "Light:">` & 0xff
        MOV     R3,#(`?<Constant "Light:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1146           
// 1147           //显示最下面的百分比条
// 1148           static uint8 percent;
// 1149           percent = (2 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent_1
        MOV     A,#0x32
        LJMP    ??Smart_home_Display_7 & 0xFFFF
// 1150           HalLcdDisplayPercentBar("",percent);
// 1151           break;
// 1152         }
// 1153         
// 1154       case 2:
// 1155       {
// 1156           static uint8 kind;
// 1157           static uint8 tmp1,tmp2;
// 1158           static uint8 tmp3,tmp4;
// 1159           static uint16 Data1;
// 1160           static uint16 Data2;
// 1161           //显示最下面的百分比条
// 1162           DeviceInfo rfid = DeviceList[RfID];
??Smart_home_Display_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 21) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 21) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1163           
// 1164           kind = rfid.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??kind
        MOVX    @DPTR,A
// 1165           tmp1 = rfid.data[1];
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??tmp1
        MOVX    @DPTR,A
// 1166           tmp2 = rfid.data[2];
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??tmp2
        MOVX    @DPTR,A
// 1167           tmp3 = rfid.data[3];
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??tmp3
        MOVX    @DPTR,A
// 1168           tmp4 = rfid.data[4];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??tmp4
        MOVX    @DPTR,A
// 1169           
// 1170           Data1 = (tmp1 << 8) | tmp2;
        MOV     DPTR,#??tmp1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#??tmp2
        MOVX    A,@DPTR
        MOV     DPTR,#??Data1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1171           Data2 = (tmp3 << 8) | tmp4;
        MOV     DPTR,#??tmp3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#??tmp4
        MOVX    A,@DPTR
        MOV     DPTR,#??Data2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1172           
// 1173           if(kind == 0x01) {HalLcdWriteString( "MFOne-S50", HAL_LCD_LINE_2 );}
        MOV     DPTR,#??kind
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Smart_home_Display_9
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MFOne-S50">` & 0xff
        MOV     R3,#(`?<Constant "MFOne-S50">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_10
// 1174           else if(kind == 0x02) {HalLcdWriteString( "MFOne-S70", HAL_LCD_LINE_2 );}
??Smart_home_Display_9:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??Smart_home_Display_11
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MFOne-S70">` & 0xff
        MOV     R3,#(`?<Constant "MFOne-S70">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_10
// 1175           else if(kind == 0x03) {HalLcdWriteString( "MF-UltraLight", HAL_LCD_LINE_2 );}
??Smart_home_Display_11:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??Smart_home_Display_12
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MF-UltraLight">` & 0xff
        MOV     R3,#(`?<Constant "MF-UltraLight">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_10
// 1176           else if(kind == 0x04) {HalLcdWriteString( "MF-Pro", HAL_LCD_LINE_2 );}
??Smart_home_Display_12:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Smart_home_Display_13
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "MF-Pro">` & 0xff
        MOV     R3,#(`?<Constant "MF-Pro">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_10
// 1177           else if(kind == 0x05) {HalLcdWriteString( "MF-DesFire", HAL_LCD_LINE_2 );}
??Smart_home_Display_13:
        MOVX    A,@DPTR
        XRL     A,#0x5
        MOV     R1,#0x2
        JNZ     ??Smart_home_Display_14
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "MF-DesFire">` & 0xff
        MOV     R3,#(`?<Constant "MF-DesFire">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_10
// 1178           else {HalLcdWriteString( "No Card", HAL_LCD_LINE_2 );}
??Smart_home_Display_14:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "No Card">` & 0xff
        MOV     R3,#(`?<Constant "No Card">` >> 8) & 0xff
??Smart_home_Display_10:
        LCALL   ?Subroutine12 & 0xFFFF
// 1179           
// 1180 
// 1181           HalLcdWriteStringValueValue( "ID: ", Data1, 16, "-", Data2, 16, HAL_LCD_LINE_3 );
??CrossCallReturnLabel_23:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPTR,#??Data2
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#`?<Constant "-">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "-">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0x10
        MOV     DPTR,#??Data1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     R2,#`?<Constant "ID: ">` & 0xff
        MOV     R3,#(`?<Constant "ID: ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1182           
// 1183           static uint8 percent;
// 1184           percent = (3 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent_2
        MOV     A,#0x4b
        LJMP    ??Smart_home_Display_7 & 0xFFFF
// 1185           HalLcdDisplayPercentBar("",percent);
// 1186           break;
// 1187       }
// 1188       
// 1189       case 3:
// 1190       {
// 1191           static uint16 GasF;
// 1192           static uint16 Infrared;         
// 1193 
// 1194           DeviceInfo DevGas = DeviceList[GasF];
??Smart_home_Display_4:
        MOV     DPTR,#??GasF
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#DeviceList & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(DeviceList >> 8) & 0xff
        ADDC    A,R1
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,A
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1195           DeviceInfo DevInf = DeviceList[infrared]; 
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((DeviceList + 35) >> 8) & 0xff
        MOV     DPL,#(DeviceList + 35) & 0xff
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1196           
// 1197           GasF = (uint16)DevGas.data[0];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??GasF
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1198           Infrared = (uint16)DevInf.data[0];
??CrossCallReturnLabel_82:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#??Infrared
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1199           
// 1200           if(GasF & 0x01 == 0x01) { HalLcdWriteString( "GasFlame: Flame", HAL_LCD_LINE_2 ); }         //0位是火焰
??CrossCallReturnLabel_83:
        MOV     DPTR,#??GasF
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     R1,#0x2
        JNC     ??Smart_home_Display_15
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "GasFlame: Flame">` & 0xff
        MOV     R3,#(`?<Constant "GasFlame: Flame">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_16
// 1201           else if(GasF & 0x02 == 0x02) { HalLcdWriteString( "GasFlame: Gas", HAL_LCD_LINE_2 ); }//1位是气体
// 1202           else if(GasF & 0x03 == 0x03) { HalLcdWriteString( "GasFlame: All", HAL_LCD_LINE_2 ); }
// 1203           else {HalLcdWriteString( "GasFlame: None", HAL_LCD_LINE_2 );}
??Smart_home_Display_15:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "GasFlame: None">` & 0xff
        MOV     R3,#(`?<Constant "GasFlame: None">` >> 8) & 0xff
??Smart_home_Display_16:
        LCALL   ??HalLcdWriteString?relay
// 1204           
// 1205           //HalLcdWriteStringValue("GasFlame: ", GasF, 16, HAL_LCD_LINE_2 );
// 1206           if(Infrared == 0x01)
        MOV     DPTR,#??Infrared
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Smart_home_Display_17
        INC     DPTR
        MOVX    A,@DPTR
??Smart_home_Display_17:
        MOV     R1,#0x3
        JNZ     ??Smart_home_Display_18
// 1207           {
// 1208             HalLcdWriteString("Infrared: Human", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Infrared: Human">` & 0xff
        MOV     R3,#(`?<Constant "Infrared: Human">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_19
// 1209           }
// 1210           else{
// 1211             HalLcdWriteString("Infrared: NoHuman", HAL_LCD_LINE_3 );
??Smart_home_Display_18:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Infrared: NoHuman">` & 0xff
        MOV     R3,#(`?<Constant "Infrared: NoHuman">` >> 8) & 0xff
??Smart_home_Display_19:
        LCALL   ??HalLcdWriteString?relay
// 1212           }
// 1213           
// 1214           
// 1215           //显示最下面的百分比条
// 1216           static uint8 percent;
// 1217           percent = (4 * 100) / LCD_PAGE_MAX;
        MOV     DPTR,#??percent_3
        MOV     A,#0x64
        LJMP    ??Smart_home_Display_7 & 0xFFFF
// 1218           HalLcdDisplayPercentBar("",percent);
// 1219           break;
// 1220       }
// 1221           
// 1222     }
// 1223       
// 1224       break;
// 1225     
// 1226     case 1:
// 1227       HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
??Smart_home_Display_0:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Relay Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Relay Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine11 & 0xFFFF
// 1228       //清除屏幕显示
// 1229       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1230       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1231       //这里的deviceStatus 可能是0x00,所以会出现bug 这个0在Device检查时被设置 2.24
// 1232       if(DeviceList[relay].deviceStatus == DEVICE_OFFLINE)
??CrossCallReturnLabel_21:
        MOV     DPTR,#DeviceList + 50
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x1
        JNZ     ??Smart_home_Display_20
// 1233       {
// 1234         HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Relay Offline">` & 0xff
        MOV     R3,#(`?<Constant "Relay Offline">` >> 8) & 0xff
??Smart_home_Display_21:
        LCALL   ??HalLcdWriteString?relay
        LJMP    ??Smart_home_Display_8 & 0xFFFF
// 1235       }
// 1236       else  //设备在线回显  设备在线可能是 0/1
// 1237       {
// 1238         HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
??Smart_home_Display_20:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Relay Online">` & 0xff
        MOV     R3,#(`?<Constant "Relay Online">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1239         //继电器控制界面
// 1240         const uint8 cmd =  DeviceList[relay].data[0];
        MOV     DPTR,#DeviceList + 51
        MOVX    A,@DPTR
        MOV     R6,A
// 1241 
// 1242         if((cmd & 0x02) == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
        MOV     C,0xE0 /* A   */.1
        JNC     ??Smart_home_Display_22
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:ON">` & 0xff
        MOV     R3,#(`?<Constant "K1:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1243         if((cmd & 0x01) == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
??Smart_home_Display_22:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_Display_23
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K1:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1244         if((cmd & 0x20) == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
??Smart_home_Display_23:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.5
        JNC     ??Smart_home_Display_24
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:ON">` & 0xff
        MOV     R3,#(`?<Constant "K2:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1245         if((cmd & 0x10) == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}      
??Smart_home_Display_24:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??Smart_home_Display_8
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K2:OFF">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_21
// 1246       }
// 1247 
// 1248       break;
// 1249     
// 1250     case 2:
// 1251       HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
??Smart_home_Display_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Motor Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine11 & 0xFFFF
// 1252       //清除屏幕显示
// 1253       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
// 1254       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
// 1255       if(DeviceList[motor].deviceStatus == DEVICE_OFFLINE)
??CrossCallReturnLabel_22:
        MOV     DPTR,#DeviceList + 43
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x1
        JNZ     ??Smart_home_Display_25
// 1256       {
// 1257         HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Motor Offline">` & 0xff
        MOV     R3,#(`?<Constant "Motor Offline">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_21
// 1258       }
// 1259       else  //设备在线回显  设备在线可能是 0/1
// 1260       {
// 1261         HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 ); 
??Smart_home_Display_25:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Motor Online">` & 0xff
        MOV     R3,#(`?<Constant "Motor Online">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
// 1262         //电机控制界面
// 1263         const uint16 speed =  (uint16) DeviceList[motor].data[0];
        MOV     DPTR,#DeviceList + 44
        MOVX    A,@DPTR
        MOV     R6,A
// 1264         const uint16 status = (uint16) DeviceList[motor].data[1];
// 1265         switch(status)
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#-0x2
        JZ      ??Smart_home_Display_26
        DEC     A
        MOV     R1,#0x2
        JZ      ??Smart_home_Display_27
// 1266         {
// 1267         default:
// 1268         case 1:
// 1269           HalLcdWriteString( "Status: STOP", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Status: STOP">` & 0xff
        MOV     R3,#(`?<Constant "Status: STOP">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_28
// 1270           break;
// 1271         case 2:
// 1272           HalLcdWriteString( "Status: FORWARD", HAL_LCD_LINE_2 );
??Smart_home_Display_26:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Status: FORWARD">` & 0xff
        MOV     R3,#(`?<Constant "Status: FORWARD">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_28
// 1273           break;
// 1274         case 3:
// 1275           HalLcdWriteString( "Status: BACKWARD", HAL_LCD_LINE_2 );
??Smart_home_Display_27:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Status: BACKWARD">` & 0xff
        MOV     R3,#(`?<Constant "Status: BACKWARD">` >> 8) & 0xff
// 1276           break;
// 1277         }
// 1278         
// 1279         HalLcdWriteStringValue( "Speed:", speed, 10, HAL_LCD_LINE_3 );
// 1280       
// 1281       }
// 1282   }
??Smart_home_Display_28:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R1,#0xa
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Speed:">` & 0xff
        MOV     R3,#(`?<Constant "Speed:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1283   
// 1284 #endif // LCD_SUPPORTED  
// 1285 }
??Smart_home_Display_8:
        MOV     A,#0xe
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        RET
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond153 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        MOV     A,#-0x80
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 40)
        CFI Block cfiPicker168 Using cfiCommon1
        CFI (cfiPicker168) NoFunction
        CFI (cfiPicker168) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiPicker168

        RSEG XDATA_I:XDATA:NOROOT(0)
??humit:
        DATA16
        DS 2
        REQUIRE `?<Initializer for humit>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
??temper:
        DATA16
        DS 2
        REQUIRE `?<Initializer for temper>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??SoundVb:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Light:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??lightmp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??integer:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??decimals:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent_1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??kind:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??tmp1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??tmp2:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??tmp3:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??tmp4:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Data1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Data2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent_2:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??GasF:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Infrared:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??percent_3:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1286 
// 1287 
// 1288 /*******************************************************************************
// 1289  * @fn      Smart_home_CallBack
// 1290  *
// 1291  * @brief   Send data OTA.
// 1292  *
// 1293  * @param   port - UART port.
// 1294  * @param   event - the UART port event flag.
// 1295  *
// 1296  * @return  none
// 1297  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1298 void Smart_home_CallBack(uint8 port, uint8 event)
Smart_home_CallBack:
        CFI Block cfiBlock169 Using cfiCommon0
        CFI Function Smart_home_CallBack
        CODE
// 1299 { 
        ; Saved register size: 0
        ; Auto size: 0
// 1300 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock169

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for humit>`:
        DATA16
        DW 20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for temper>`:
        DATA16
        DW 20

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Motor_cmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Motor_cmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Relay_Ctl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Relay_Ctl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Display?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Display

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_CallBack

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Smart_home">`:
        DB "Smart_home"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Init Success!\\n">`:
        DB "Init Success!\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor max Speed">`:
        DB "Motor max Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor min Speed">`:
        DB "Motor min Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Allow networking">`:
        DB "Allow networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Ban   networking">`:
        DB "Ban   networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0}>`:
        DATA8
        DB 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_3`:
        DB 0
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_4`:
        DB 0
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0}>_5`:
        DATA8
        DB 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0}>_6`:
        DATA8
        DB 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0}>_7`:
        DATA8
        DB 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "      Menu      ">`:
        DB "      Menu      "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hum:">`:
        DB "Hum:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "% T_1:">`:
        DB "% T_1:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Sound: Voice">`:
        DB "Sound: Voice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "Sound: Vibration"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "Sound: All"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Sound: None">`:
        DB "Sound: None"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Temper_2:">`:
        DB "Temper_2:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ".">`:
        DB "."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Light:">`:
        DB "Light:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MFOne-S50">`:
        DB "MFOne-S50"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MFOne-S70">`:
        DB "MFOne-S70"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-UltraLight">`:
        DB "MF-UltraLight"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-Pro">`:
        DB "MF-Pro"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "MF-DesFire">`:
        DB "MF-DesFire"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "No Card">`:
        DB "No Card"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ID: ">`:
        DB "ID: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "-">`:
        DB "-"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GasFlame: Flame">`:
        DB "GasFlame: Flame"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "GasFlame: Gas"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
        DB "GasFlame: All"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GasFlame: None">`:
        DB "GasFlame: None"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Infrared: Human">`:
        DB "Infrared: Human"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Infrared: NoHuman">`:
        DB "Infrared: NoHuman"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Contrling">`:
        DB "Relay Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Offline">`:
        DB "Relay Offline"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Online">`:
        DB "Relay Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:ON">`:
        DB "K1:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:OFF">`:
        DB "K1:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:ON">`:
        DB "K2:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:OFF">`:
        DB "K2:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Contrling">`:
        DB "Motor Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Offline">`:
        DB "Motor Offline"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Online">`:
        DB "Motor Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Status: STOP">`:
        DB "Status: STOP"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Status: FORWARD">`:
        DB "Status: FORWARD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Status: BACKWARD">`:
        DB "Status: BACKWARD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Speed:">`:
        DB "Speed:"

        END
// 1301 
// 1302 /*******************************************************************************
// 1303 *******************************************************************************/
// 
// 3 298 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//   610 bytes in segment XDATA_ROM_C
//   239 bytes in segment XDATA_Z
// 
// 3 350 bytes of CODE  memory
//   610 bytes of CONST memory
//   243 bytes of XDATA memory
//
//Errors: none
//Warnings: 21
