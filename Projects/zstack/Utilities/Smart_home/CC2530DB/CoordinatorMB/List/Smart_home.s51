///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        24/Mar/2021  16:13:22 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\Source\Smart_home.c                 /
//    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\ /
//                          Projects\zstack\Utilities\Smart_home\Source\Smart /
//                          _home.c -D LCD_SUPPORTED -D ZDO_COORDINATOR -D    /
//                          xNV_RESTORE -D xNV_INIT -D xREFLECTOR -D          /
//                          xHAL_UART=TRUE -D xHAL_UART_TEST -lC              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\ -lA    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\Source\ -I              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\   /
//                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\include\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530MB\ -I        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\include\ -I D:\毕设\CC2530-smart_home\Project /
//                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\. /
//                          .\..\Components\mac\high_level\ -I                /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\ -I               /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\ -I D:\毕设\CC2530-smart_home\Projects\zstack\ /
//                          Utilities\Smart_home\CC2530DB\..\..\..\..\..\Comp /
//                          onents\osal\include\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          services\saddr\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\af\ -I D:\毕设\CC2530-smart_home\Projects\z /
//                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\. /
//                          .\Components\stack\nwk\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sapi\ -I D:\毕设\CC2530-smart_home\Projects /
//                          \zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\ -I                      /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sys\ -I D:\毕设\CC2530-smart_home\Projects\ /
//                          zstack\Utilities\Smart_home\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\zdo\ -I                       /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\ -I D:\毕设\CC2530-smart_home\Projects\zstac /
//                          k\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\ -Ohz                           /
//    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\CoordinatorMB\List\Smart_h /
//                          ome.s51                                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Smart_home

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Smart_home_Display?relay,0203H
        FUNCTION ??Smart_home_HandleKeys?relay,0203H
        PUBLIC ??Smart_home_Init?relay
        FUNCTION ??Smart_home_Init?relay,0203H
        PUBLIC ??Smart_home_ProcessEvent?relay
        FUNCTION ??Smart_home_ProcessEvent?relay,0203H
        FUNCTION ??Smart_home_ProcessMSGCmd?relay,0203H
        FUNCTION ??Smart_home_Relay_Ctl?relay,0203H
        PUBLIC Coordinator_Msg
        PUBLIC DeviceList
        PUBLIC Smart_home_ClusterList_IN
        PUBLIC Smart_home_ClusterList_OUT
        FUNCTION Smart_home_Display,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION Smart_home_HandleKeys,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Smart_home_Init
        FUNCTION Smart_home_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC Smart_home_ProcessEvent
        FUNCTION Smart_home_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION Smart_home_ProcessMSGCmd,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION Smart_home_Relay_Ctl,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC Smart_home_SimpleDesc
        PUBLIC Smart_home_TaskID
        PUBLIC Smart_home_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
HalLedSet           SYMBOL "HalLedSet"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_mem_free       SYMBOL "osal_mem_free"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??NLME_PermitJoiningRequest?relay SYMBOL "?relay", NLME_PermitJoiningRequest
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
Smart_home_Init     SYMBOL "Smart_home_Init"
??Smart_home_Init?relay SYMBOL "?relay", Smart_home_Init
Smart_home_ProcessEvent SYMBOL "Smart_home_ProcessEvent"
??Smart_home_ProcessEvent?relay SYMBOL "?relay", Smart_home_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??NLME_PermitJoiningRequest?relay
        FUNCTION ??NLME_PermitJoiningRequest?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// D:\毕设\CC2530-smart_home\Projects\zstack\Utilities\Smart_home\Source\Smart_home.c
//    1 /**************************************************************************************************
//    2   文件名：Smart_home.c
//    3   作 者： 柳成林
//    4   功 能： 作为网关节点，实现传感器信息的采集，并可以通过其控制一些节点
//    5           终端设备主要分为8个，分别为
//    6      1、温度与光照度传感器；2、烟雾与火焰传感器；3、继电器；4、温湿度传感器；
//    7      5、声音与震动传感器；  6、人体红外检测传感器；7、电机；8、RFID检测器。
//    8   更新日志(2021)
//    9   3.13
//   10   + 新增 8种传感器的Project并设置好编译情况
//   11   + 修改 Smart_home_ProcessEvent() （增加各种处理器的事件）
//   12          Smart_home_Init()         （初始化内容修改，添加设备默认离线）
//   13   3.14
//   14   + 修改 Smart_home_ProcessMSGCmd()（添加终端节点类型判断，具体处理留空）
//   15   + 新增 Hal层各种传感器驱动(头文件)
//   16          ClusterList (添加8个终端，分开出与入)
//   17   3.17
//   18   + 修改 Smart_home_ProcessMSGCmd() （完成接收后对于各终端处理）
//   19   + 添加 Smart_home_HandleKeys()     (修改原来函数增添概念，未补全)
//   20   + 删除 static void Smart_home_Send(void);
//   21          static void Smart_home_Resp(void);
//   22          两个函数
//   23   3.19
//   24   + 检查 出现的warning并做标识
//   25   + 修改 Smart_home_HandleKeys() （补全设计函数）
//   26   + 新增 Smart_home_Device_check() (设备是否在线检查)
//   27 
//   28   3.21
//   29   + 新增 DeviceList以方便初始化和设备在线检查（本地变量部分）
//   30          Smart_home_Display()    （屏幕显示，未补全）
//   31          Smart_home_Key_add()     (控制按键，附加项)
//   32   + 修改 Smart_home_Device_check()
//   33          Smart_home_Init()
//   34          Smart_home_ProcessMSGCmd()
//   35          调整有关DeviceList（设备列表）部分的修改
//   36          直接使用数组位置号作为设备编号
//   37          按键控制方式，用按键情况控制
//   38   3.22
//   39   + 修改 Smart_home_Display()    （屏幕显示，补全）
//   40          Smart_home_Key_add()     (屏幕显示中的电机与继电器部分加入这里)
//   41          重写别名方式减少内存损耗
//   42          出现无法初始化的问题，需要项目重构
//   43   3.23
//   44   + Warn 代码初始化后会产生直接进入key的情况,需debug
//   45          OK键问题无法修复，放弃使用OK键，修改为Cencel组网 禁止组网
//   46   3.23 正式完成网关节点部分，（显示函数部分除外）
//   47   3.24 
//   48   + 修改 Smart_home_Key_add()与display函数整合
//   49    
//   50   经调试程序无bug，可以接收各个传感器消息。//3.22
//   51   当我没说。。好像出了内存问题//3.22
//   52   项目重构啦！，现在又只有一个小问题了/3.23
//   53 *********************************************************************/
//   54 
//   55 /*********************************************************************
//   56  * INCLUDES
//   57  */
//   58 
//   59 #include "OSAL.h"
//   60 #include "AF.h"
//   61 #include "ZDObject.h"
//   62 #include "ZDProfile.h"
//   63 #include "nwk_util.h"
//   64 
//   65 #include "Smart_home.h"
//   66 #include "OnBoard.h"
//   67 
//   68 #include "DebugTrace.h"
//   69 #include "string.h"
//   70 
//   71 /* HAL */
//   72 #include "hal_lcd.h"
//   73 #include "hal_led.h"
//   74 #include "hal_key.h"
//   75 #include "hal_uart.h"
//   76 
//   77 /*********************************************************************
//   78  * MACROS
//   79  */
//   80 /*设备链接相关设置*/
//   81 /*判断设备是否在线的最大次数*/
//   82 #define DEVICE_HEART_BEAT    5
//   83 #define DEVICE_CHECK_DELAY   5000
//   84 
//   85 /*LCD相关设置*/
//   86 /*单屏显示时常   MS*/
//   87 #define LCD_DISPLAY_LENGTH   10000
//   88 #define LCD_DISPLAY_TIMER    1000  //多久更新一次 
//   89 
//   90 /*********************************************************************
//   91  * CONSTANTS
//   92  */
//   93 
//   94 #if !defined( SMART_HOME_PORT )
//   95 #define SMART_HOME_PORT  0
//   96 #endif
//   97 
//   98 #if !defined( SMART_HOME_BAUD )
//   99 #define SMART_HOME_BAUD  HAL_UART_BR_38400
//  100 //#define SMART_HOME_BAUD  HAL_UART_BR_115200
//  101 #endif
//  102 
//  103 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  104 #if !defined( SMART_HOME_THRESH )
//  105 #define SMART_HOME_THRESH  64
//  106 #endif
//  107 
//  108 #if !defined( SMART_HOME_RX_SZ )
//  109 #define SMART_HOME_RX_SZ  128
//  110 #endif
//  111 
//  112 #if !defined( SMART_HOME_TX_SZ )
//  113 #define SMART_HOME_TX_SZ  128
//  114 #endif
//  115 
//  116 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  117 #if !defined( SMART_HOME_IDLE )
//  118 #define SMART_HOME_IDLE  6
//  119 #endif
//  120 
//  121 // Loopback Rx bytes to Tx for throughput testing.
//  122 #if !defined( SMART_HOME_LOOPBACK )
//  123 #define SMART_HOME_LOOPBACK  FALSE
//  124 #endif
//  125 
//  126 // This is the max byte count per OTA message.
//  127 #if !defined( SMART_HOME_TX_MAX )
//  128 #define SMART_HOME_TX_MAX  80
//  129 #endif
//  130 
//  131 #define SMART_HOME_RSP_CNT  4
//  132 
//  133 //3.14 This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  134 const cId_t Smart_home_ClusterList_IN[Smart_home_MAX_INCLUSTERS ] =
Smart_home_ClusterList_IN:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
        DW 7
        DW 8
        DW 0
//  135 {
//  136   Smart_home_CLUSTERID_HUMITMSG,              // 温湿度
//  137   Smart_home_CLUSTERID_TEMPLIGHTMSG,          // 温度光照
//  138   Smart_home_CLUSTERID_RFIDMSG,               // 射频卡
//  139   Smart_home_CLUSTERID_GASFLAMEMSG,           // 烟雾火焰
//  140   Smart_home_CLUSTERID_INFRAREDMSG,           // 人体红外
//  141   Smart_home_CLUSTERID_SOUNDVBMSG,            // 声音振动
//  142   Smart_home_CLUSTERID_MOTORSTATUSMSG,        // 直流电机状态信息
//  143   Smart_home_CLUSTERID_RELAYSTATUSMSG         // 继电器
//  144 };
//  145 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  146 const cId_t Smart_home_ClusterList_OUT[Smart_home_MAX_INCLUSTERS ] =
Smart_home_ClusterList_OUT:
        DATA16
        DW 11
        DW 10
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
//  147 {
//  148   Smart_home_CLUSTERID_MOTORCTRL,             //直流电机控制
//  149   Smart_home_CLUSTERID_RELAYCTRL              //继电器控制
//  150 };
//  151 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  152 const SimpleDescriptionFormat_t Smart_home_SimpleDesc =
Smart_home_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 9
        DATA16
        DW Smart_home_ClusterList_IN
        DATA8
        DB 3
        DATA16
        DW Smart_home_ClusterList_OUT
//  153 {
//  154   Smart_home_ENDPOINT,              //  int   Endpoint;
//  155   Smart_home_PROFID,                //  uint16 AppProfId[2];
//  156   Smart_home_DEVICEID,              //  uint16 AppDeviceId[2];
//  157   Smart_home_DEVICE_VERSION,        //  int   AppDevVer:4;
//  158   Smart_home_FLAGS,                 //  int   AppFlags:4;
//  159   Smart_home_MAX_INCLUSTERS,          //  byte  AppNumInClusters;
//  160   (cId_t *)Smart_home_ClusterList_IN,  //  byte *pAppInClusterList;
//  161   Smart_home_MAX_OUTCLUSTERS,          //  byte  AppNumOutClusters;
//  162   (cId_t *)Smart_home_ClusterList_OUT   //  byte *pAppOutClusterList;
//  163 };
//  164 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  165 const endPointDesc_t Smart_home_epDesc =
Smart_home_epDesc:
        DB 1
        DATA16
        DW Smart_home_TaskID
        DW Smart_home_SimpleDesc
        DATA8
        DB 0
//  166 {
//  167   Smart_home_ENDPOINT,
//  168   &Smart_home_TaskID,
//  169   (SimpleDescriptionFormat_t *)&Smart_home_SimpleDesc,
//  170   noLatencyReqs
//  171 };
//  172 
//  173 /*********************************************************************
//  174  * TYPEDEFS
//  175  */
//  176 
//  177 /*********************************************************************
//  178  * GLOBAL VARIABLES
//  179  */
//  180 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 uint8 Smart_home_TaskID;    // Task ID for internal task/event processing.
Smart_home_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  182 
//  183 /*********************************************************************
//  184  * EXTERNAL VARIABLES
//  185  */
//  186 
//  187 /*********************************************************************
//  188  * EXTERNAL FUNCTIONS
//  189  */
//  190 
//  191 /*********************************************************************
//  192  * LOCAL VARIABLES
//  193  */
//  194 
//  195 /*3.18 终端节点的设备详细信息缓存*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 static uint8 DeviceCnt[Smart_home_MAX_INCLUSTERS];
DeviceCnt:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  197 static int8 Ctrlcase = 0;    //0用来控制屏幕显示，1控制继电器，2控制电机
Ctrlcase:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  198 static int8 LCD_Page  =  0;  //终端状态显示
LCD_Page:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  199 DeviceInfo DeviceList[Smart_home_MAX_INCLUSTERS];                      //设备列表  
DeviceList:
        DS 63
        REQUIRE __INIT_XDATA_Z
//  200 /*********************************************************************************
//  201 //这些似乎会引起内存问题  3.22
//  202 DeviceInfo *Humit = DeviceList+Smart_home_CLUSTERID_HUMITMSG;          //温湿度缓存
//  203 DeviceInfo *TempLight = DeviceList+Smart_home_CLUSTERID_TEMPLIGHTMSG;  // 温度光照缓存
//  204 DeviceInfo *RfID = DeviceList+Smart_home_CLUSTERID_RFIDMSG;            // RFID 信息缓存
//  205 DeviceInfo *gasFlame = DeviceList+Smart_home_CLUSTERID_GASFLAMEMSG;    //气体火焰缓存
//  206 DeviceInfo *infrared = DeviceList+Smart_home_CLUSTERID_INFRAREDMSG;    //人体红外
//  207 DeviceInfo *motor = DeviceList+Smart_home_CLUSTERID_MOTORSTATUSMSG;     //电机状态
//  208 DeviceInfo *relay = DeviceList+Smart_home_CLUSTERID_RELAYSTATUSMSG;    //继电器状态
//  209 DeviceInfo *soundVb = DeviceList+Smart_home_CLUSTERID_SOUNDVBMSG;      //声音震动
//  210 修改如下
//  211 ***********************************************************************************/
//  212 #define Humit     1     //温湿度缓存
//  213 #define TempLight 2     // 温度光照缓存
//  214 #define RfID      3     // RFID 信息缓存
//  215 #define gasFlame  4     //气体火焰缓存
//  216 #define infrared  5     //人体红外
//  217 #define motor     6     //电机状态
//  218 #define relay     7     //继电器状态
//  219 #define soundVb   8     //声音震动
//  220 
//  221 /*3.14 消息发送部分*/
//  222 /*3.17短地址存储*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  223 static afAddrType_t Relay_addr;
Relay_addr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  224 static afAddrType_t Motor_addr;
Motor_addr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  225 
//  226 /*消息发送数组*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  227 byte Coordinator_Msg[MSG_MAX_LEN];
Coordinator_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//  228 
//  229 
//  230 /*3.19 协议栈中有但暂时不知道要他们干嘛的东西*/
//  231 /*3.21 现在我会了！！！*/
//  232 /*3.22 那些没用！删掉了！*/
//  233 //static uint8 Smart_home_MsgID;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  234 static uint8 RelayTransID;  // This is the unique message ID (counter)
RelayTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  235 static uint8 MotorTransID;  // This is the unique message ID (counter)
MotorTransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  236 
//  237 /*********************************************************************
//  238  * LOCAL FUNCTIONS
//  239  */
//  240 
//  241 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  242 //static void Smart_home_Key_add(uint8 Ctrlcase);
//  243 static void Smart_home_HandleKeys( byte shift, byte keys );
//  244 static void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  245 static void Smart_home_Device_check(void);
//  246 static void Smart_home_Relay_Ctl(uint8 cmd);
//  247 static void Smart_home_Motor_Ctl(uint8 cmd,uint8 speed);
//  248 static void Smart_home_Display(void);
//  249 
//  250 /*********************************************************************
//  251  * @fn      Smart_home_Init
//  252  *
//  253  * @brief   This is called during OSAL tasks' initialization.
//  254  *
//  255  * @param   task_id - the Task ID assigned by OSAL.
//  256  *
//  257  * @return  none
//  258  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  259 void Smart_home_Init( uint8 task_id )
Smart_home_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Smart_home_Init
        CODE
//  260 {
        FUNCALL Smart_home_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  261   halUARTCfg_t uartConfig;
//  262   uint8 DeviceNum;                                    //DeviceList初始化用变量
//  263 
//  264   Smart_home_TaskID = task_id;
        MOV     DPTR,#Smart_home_TaskID
        MOVX    @DPTR,A
//  265   MotorTransID = 0;
        MOV     DPTR,#MotorTransID
        CLR     A
        MOVX    @DPTR,A
//  266   RelayTransID = 0;
        MOV     DPTR,#RelayTransID
        MOVX    @DPTR,A
//  267 
//  268   afRegister( (endPointDesc_t *)&Smart_home_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Smart_home_epDesc & 0xff
        MOV     R3,#(Smart_home_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  269 
//  270   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  271 
//  272   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  273   uartConfig.baudRate             = SMART_HOME_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  274   uartConfig.flowControl          = TRUE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  275   uartConfig.flowControlThreshold = SMART_HOME_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  276   uartConfig.rx.maxBufSize        = SMART_HOME_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  277   uartConfig.tx.maxBufSize        = SMART_HOME_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  278   uartConfig.idleTimeout          = SMART_HOME_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  279   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  280   //uartConfig.callBackFunc         = Smart_home_CallBack;
//  281   HalUARTOpen (SMART_HOME_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  282 
//  283 #if defined ( LCD_SUPPORTED )
//  284   HalLcdWriteString( "Smart_home", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Smart_home">` & 0xff
        MOV     R3,#(`?<Constant "Smart_home">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  285 #endif
//  286   
//  287   ZDO_RegisterForZDOMsg( Smart_home_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  288   ZDO_RegisterForZDOMsg( Smart_home_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  289   
//  290   //3.22 显示延时
//  291   osal_start_timerEx( Smart_home_TaskID, SMART_HOME_DISPLAY_EVT, 
//  292                       SMART_HOME_DEVICE_DISPLAY_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x10
        MOV     R5,#0x27
        MOV     R2,#0x10
        LCALL   ??Subroutine27_0 & 0xFFFF
//  293   
//  294   
//  295   //3.14 打开设备在线检测，第一次开启检测延时较长时间
//  296   osal_start_timerEx( Smart_home_TaskID, SMART_HOME_DEVICE_CHECK_EVT, 
//  297                       SMART_HOME_DEVICE_CHECK_DELAY);
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine13 & 0xFFFF
//  298  
//  299   //3.13 关闭LED灯(D4)，表示协调器默认不允许组网
//  300   NLME_PermitJoiningRequest(0x00);
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        LCALL   ?Subroutine17 & 0xFFFF
//  301   HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
//  302   
//  303   //3.21 初始化页面为0 第一页
//  304   //LCD_Page=0;
//  305   
//  306   //3.13 设备离线状态检测初始化，初始化为离线
//  307   //3.21 修改为DeviceList方式，初始化DeviceCnt
//  308   for(DeviceNum=1;DeviceNum<Smart_home_MAX_INCLUSTERS;DeviceNum++) //只初始化终端
??CrossCallReturnLabel_35:
        MOV     R5,#0x1
//  309   {
//  310     DeviceList[DeviceNum].deviceid = DeviceNum;
??Smart_home_Init_0:
        MOV     DPL,R5
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#DeviceList & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(DeviceList >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,R5
        MOVX    @DPTR,A
//  311     DeviceList[DeviceNum].deviceStatus = DEVICE_OFFLINE;
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
//  312     DeviceCnt[DeviceNum]=0;
        LCALL   ?Subroutine23 & 0xFFFF
//  313   }
??CrossCallReturnLabel_47:
        CLR     A
        MOVX    @DPTR,A
        INC     R5
        MOV     A,R5
        CLR     C
        SUBB    A,#0x9
        JC      ??Smart_home_Init_0
//  314 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  315 
//  316 /*********************************************************************
//  317  * @fn      Smart_home_ProcessEvent
//  318  *
//  319  * @brief   Generic Application Task event processor.
//  320  *
//  321  * @param   task_id  - The OSAL assigned task ID.
//  322  * @param   events   - Bit map of events to process.
//  323  *
//  324  * @return  Event flags of all unprocessed events.
//  325  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 UINT16 Smart_home_ProcessEvent( uint8 task_id, UINT16 events )
Smart_home_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Smart_home_ProcessEvent
        CODE
//  327 {
        FUNCALL Smart_home_ProcessEvent, Smart_home_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, Smart_home_Display
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  328   (void)task_id;  // Intentionally unreferenced parameter
//  329   afDataConfirm_t *afDataConfirm;
//  330   
//  331   //3.13 数据确认消息字段
//  332   ZStatus_t sentStatus;
//  333   byte sentEP;
//  334   
//  335   if ( events & SYS_EVENT_MSG )   //3.13 系统消息事件
        ANL     A,#0x80
        JNZ     ??Smart_home_ProcessEvent_0
//  336   {
//  337     afIncomingMSGPacket_t *MSGpkt;
//  338 
//  339     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID )) )
//  340     {
//  341       switch ( MSGpkt->hdr.event )
//  342       {
//  343         case ZDO_CB_MSG:           //3.13 ZDO传入消息回调
//  344           Smart_home_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  345           break;
//  346           
//  347         case KEY_CHANGE:           //3.13 按键事件
//  348           Smart_home_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  349           break;
//  350          
//  351         case AF_DATA_CONFIRM_CMD:
//  352         //3.13 接收到此消息，作为对发送的数据包的确认。
//  353         //状态为ZStatus_t类型[在ZComDef.h中定义]
//  354         //消息字段在AF.h中定义
//  355           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  356           sentEP = afDataConfirm->endpoint;
//  357           sentStatus = afDataConfirm->hdr.status;
//  358  
//  359           if ( (ZSuccess == sentStatus) &&
//  360                (Smart_home_epDesc.endPoint == sentEP) )
//  361           {  
//  362             //3.13 在消息发送确认成功后绿灯闪烁一下
//  363             HalLedSet(HAL_LED_1, HAL_LED_MODE_BLINK);
//  364           }
//  365           else
//  366           {
//  367             //3.13 红灯闪烁一下  硬件还没实现
//  368             //HalLedSet(HAL_LED_2, HAL_LED_MODE_BLINK);
//  369           }
//  370           break;
//  371           
//  372         case AF_INCOMING_MSG_CMD:   //3.13 消息传入处理
//  373           //3.13 在消息接收确认成功后绿灯闪烁一下
//  374           Smart_home_ProcessMSGCmd( MSGpkt );
//  375           break;
//  376         default:
//  377           break;
//  378       }
//  379 
//  380       osal_msg_deallocate( (uint8 *)MSGpkt );
//  381       
//  382       // Next
//  383       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID );
//  384     }
//  385     
//  386     // Squash compiler warnings until values are used.
//  387     (void)sentStatus;
//  388     (void)sentEP;
//  389     
//  390     return ( events ^ SYS_EVENT_MSG );
//  391   }
//  392 
//  393   if ( events & SMART_HOME_SEND_MSG_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??Smart_home_ProcessEvent_1 & 0xFFFF
//  394   {
//  395     //Smart_home_Send();
//  396     return ( events ^ SMART_HOME_SEND_MSG_EVT );
        XRL     A,#0x1
        MOV     R2,A
        LJMP    ??Smart_home_ProcessEvent_2 & 0xFFFF
//  397   }
??Smart_home_ProcessEvent_3:
        ; Setup parameters for call to function Smart_home_ProcessMSGCmd
        LCALL   ??Smart_home_ProcessMSGCmd?relay
??Smart_home_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
??Smart_home_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??Smart_home_ProcessEvent_5 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Smart_home_ProcessEvent_3
        ADD     A,#0x5a
        JZ      ??Smart_home_ProcessEvent_6
        ADD     A,#-0x13
        JZ      ??Smart_home_ProcessEvent_7
        ADD     A,#-0x2a
        JZ      ??Smart_home_ProcessEvent_8
        SJMP    ??Smart_home_ProcessEvent_4
??Smart_home_ProcessEvent_7:
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for Smart_home_ProcessEvent>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessEvent_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessEvent_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessEvent_4
        CODE
??Smart_home_ProcessEvent_9:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??Smart_home_ProcessEvent_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??Smart_home_ProcessEvent_11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??Smart_home_ProcessEvent_11
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
??Smart_home_ProcessEvent_11:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
??Smart_home_ProcessEvent_10:
        MOV     A,R2
        ADD     A,#0x13
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_45:
        MOVX    A,@DPTR
        JNZ     ??Smart_home_ProcessEvent_12
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??Smart_home_ProcessEvent_13:
        MOV     R1,#0x8
??Smart_home_ProcessEvent_14:
        LCALL   ??HalLedSet?relay
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
??Smart_home_ProcessEvent_12:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??Smart_home_ProcessEvent_13
??Smart_home_ProcessEvent_6:
        ; Setup parameters for call to function Smart_home_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Smart_home_HandleKeys?relay
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
??Smart_home_ProcessEvent_8:
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??Smart_home_ProcessEvent_4 & 0xFFFF
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x2
        MOV     R1,#0x1
        SJMP    ??Smart_home_ProcessEvent_14
??Smart_home_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??Smart_home_ProcessEvent_15:
        MOV     R3,A
        SJMP    ??Smart_home_ProcessEvent_2
//  398   
//  399   if ( events & SMART_HOME_DEVICE_CHECK_EVT )  //终端设备检查事件
??Smart_home_ProcessEvent_1:
        ANL     A,#0x80
        JZ      ??Smart_home_ProcessEvent_16
//  400   {
//  401     Smart_home_Device_check();  //调用终端设备检查函数
        MOV     DPTR,#??DeviceID
        MOV     A,#0x1
        MOVX    @DPTR,A
??Smart_home_ProcessEvent_17:
        MOVX    A,@DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPTR,#??DeviceID
        JZ      ??Smart_home_ProcessEvent_18
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x6
        JC      ??Smart_home_ProcessEvent_19
        MOV     DPTR,#??DeviceID
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,#0x5
        MOVX    @DPTR,A
        MOV     A,R0
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     A,#0x2
??Smart_home_ProcessEvent_20:
        MOVX    @DPTR,A
??Smart_home_ProcessEvent_19:
        MOV     DPTR,#??DeviceID
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x9
        JC      ??Smart_home_ProcessEvent_17
//  402     
//  403     osal_start_timerEx(Smart_home_TaskID,SMART_HOME_DEVICE_CHECK_EVT,
//  404                        DEVICE_CHECK_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine13 & 0xFFFF
//  405     return (events ^ SMART_HOME_DEVICE_CHECK_EVT);
??CrossCallReturnLabel_57:
        MOV     A,R6
        XRL     A,#0x80
??Smart_home_ProcessEvent_21:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??Smart_home_ProcessEvent_15
??Smart_home_ProcessEvent_18:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        LCALL   ??Subroutine26_0 & 0xFFFF
//  406   }
??CrossCallReturnLabel_53:
        CLR     A
        SJMP    ??Smart_home_ProcessEvent_20
//  407   
//  408   
//  409   if( events & SMART_HOME_DISPLAY_EVT )
??Smart_home_ProcessEvent_16:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??Smart_home_ProcessEvent_22
//  410   {
//  411     Smart_home_Display();
        ; Setup parameters for call to function Smart_home_Display
        LCALL   ??Smart_home_Display?relay
//  412     //周期性刷新
//  413     osal_start_timerEx( Smart_home_TaskID,events & SMART_HOME_DISPLAY_EVT,LCD_DISPLAY_TIMER);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     A,R6
        ANL     A,#0x10
        MOV     R2,A
        LCALL   ??Subroutine27_0 & 0xFFFF
//  414     return (events ^ SMART_HOME_DISPLAY_EVT);
??CrossCallReturnLabel_59:
        MOV     A,R6
        XRL     A,#0x10
        SJMP    ??Smart_home_ProcessEvent_21
//  415   }
//  416 
//  417   return ( 0 );  // Discard unknown events.
??Smart_home_ProcessEvent_22:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Smart_home_ProcessEvent_2:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  418 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     A,#(DeviceList + 1) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((DeviceList + 1) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#-0x80
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     R3,#0x0
        MOV     DPTR,#Smart_home_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_48:
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_20
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_21
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_22
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        MOV     A,#DeviceCnt & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(DeviceCnt >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26
//  419 
//  420 /*********************************************************************
//  421  * @fn      Smart_home_ProcessZDOMsgs()
//  422  *
//  423  * @brief   Process response messages
//  424  *
//  425  * @param   none
//  426  *
//  427  * @return  none
//  428  */
//  429 static void Smart_home_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  430 {
//  431   switch ( inMsg->clusterID )
//  432   {
//  433     case End_Device_Bind_rsp:
//  434       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  435       {
//  436         // Light LED
//  437         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  438       }
//  439 #if defined(BLINK_LEDS)
//  440       else
//  441       {
//  442         // Flash LED to show failure
//  443         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  444       }
//  445 #endif
//  446       break;
//  447       
//  448     case Match_Desc_rsp:
//  449       {
//  450         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  451         if ( pRsp )
//  452         {
//  453           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  454           {
//  455             /*
//  456             Smart_home_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  457             Smart_home_TxAddr.addr.shortAddr = pRsp->nwkAddr;
//  458             // Take the first endpoint, Can be changed to search through endpoints
//  459             Smart_home_TxAddr.endPoint = pRsp->epList[0];
//  460             */
//  461             
//  462             // Light LED
//  463             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  464           }
//  465           osal_mem_free( pRsp );
//  466         }
//  467       }
//  468       break;
//  469   }
//  470 }
//  471 
//  472 /*********************************************************************
//  473  * @fn      Smart_home_Key_add
//  474  *
//  475  * @brief   3.21新增，用来标识目前处于的控制状态，是附加项
//  476  *          0 控制屏幕 1 控制继电器 2 控制电机
//  477  *            
//  478  *
//  479  * @param   Ctrlcase 目前的控制号
//  480  *
//  481  * @return  屏幕回显
//  482  *
//  483 static void Smart_home_Key_add(uint8 Ctrlcase)
//  484 {
//  485 #if defined ( LCD_SUPPORTED )
//  486   switch(Ctrlcase)
//  487   {
//  488     default:    
//  489     case 0:
//  490       HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
//  491       //清除屏幕显示
//  492       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  493       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  494       break;
//  495     
//  496     case 1:
//  497       HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
//  498       //清除屏幕显示
//  499       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  500       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  501       if(DeviceList[relay].deviceStatus == DEVICE_ONLINE)  //设备在线回显
//  502       {
//  503         HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
//  504       }
//  505       if(DeviceList[relay].deviceStatus != DEVICE_ONLINE)
//  506       {
//  507         HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
//  508       }
//  509       break;
//  510     
//  511     case 2:
//  512       HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
//  513       //清除屏幕显示
//  514       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  515       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  516       if(DeviceList[motor].deviceStatus == DEVICE_ONLINE)  //设备在线回显
//  517       {
//  518         HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 );
//  519       }
//  520       if(DeviceList[motor].deviceStatus != DEVICE_ONLINE)
//  521       {
//  522         HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
//  523       }      
//  524       break;
//  525 #endif     
//  526   }
//  527 }
//  528 */
//  529 /*********************************************************************
//  530  * @fn      Smart_home_HandleKeys
//  531  *
//  532  * @brief   设置按键事件
//  533  *          目前事件设置    3.19
//  534  *
//  535  *          HAL_KEY_SW_1--UP     (上翻一页)
//  536  *          HAL_KEY_SW_2--RIGHT  (选项向右)
//  537  *          HAL_KEY_SW_3--DOWN   (下翻一页)
//  538  *          HAL_KEY_SW_4--LEFT   (选项向左)
//  539  *          HAL_KEY_SW_5--OK     (组网开)
//  540  *          HAL_KEY_SW_7--CANCEL (组网关) 
//  541  * + 3.21 新增  选项总共有3种，控制屏幕显示，控制继电器和控制电机
//  542  *              控制继电器时 UP控制1，DOWN控制2
//  543  *              控制电机时   UP加速， DOWN减速
//  544  *
//  545  * @param   shift - true if in shift/alt.
//  546  * @param   keys  - bit field for key events.
//  547  *
//  548  * @return  none
//  549  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  550 void Smart_home_HandleKeys( byte shift, byte keys )
Smart_home_HandleKeys:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function Smart_home_HandleKeys
        CODE
//  551 {
        FUNCALL Smart_home_HandleKeys, Smart_home_Relay_Ctl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, Smart_home_Relay_Ctl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  552   //zAddrType_t txAddr;
//  553   static int8 MotorSpeed = 0;
//  554   static uint8 NetWorkAllow = 0;
//  555   /*这里这么设置似乎会出现内存问题
//  556   static uint8 Relay1_on = 0x02;  //两个默认都是关闭
//  557   static uint8 Relay2_on = 0x10;
//  558   */
//  559   /*3.21 LCD 显示*/
//  560   static uint8 Relay1_on = 0;  //两个默认都是关闭
//  561   static uint8 Relay2_on = 0;
//  562   
//  563   
//  564   if ( keys & HAL_KEY_SW_1 )  //UP
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_HandleKeys_0
//  565   {
//  566     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_HandleKeys_1
        DEC     A
        JZ      ??Smart_home_HandleKeys_2
//  567     {
//  568       default:    
//  569       case 0:
//  570       {
//  571         if(LCD_Page < 3)       {LCD_Page++;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        JNC     ??Smart_home_HandleKeys_3
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  572         if(LCD_Page > 2)       {LCD_Page=0;}
??Smart_home_HandleKeys_3:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_24:
        JC      ??Smart_home_HandleKeys_0
        CLR     A
        SJMP    ??Smart_home_HandleKeys_4
//  573         break;
//  574       }
//  575       case 1:
//  576       {  
//  577         uint8 switch1;
//  578         if(Relay1_on == 0)  {Relay1_on = 1 ; switch1 = 0x02;}
??Smart_home_HandleKeys_1:
        MOV     DPTR,#??Relay1_on
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_5
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x2
        SJMP    ??Smart_home_HandleKeys_6
//  579         else if(Relay1_on == 1)  {Relay1_on = 0; switch1 = 0x01;}
??Smart_home_HandleKeys_5:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  580         else  {Relay1_on = 0; switch1 = 0x01;}       
//  581         Smart_home_Relay_Ctl(switch1);  
??Smart_home_HandleKeys_6:
        ; Setup parameters for call to function Smart_home_Relay_Ctl
        LCALL   ??Smart_home_Relay_Ctl?relay
//  582         break;
        SJMP    ??Smart_home_HandleKeys_0
//  583       } 
//  584       case 2:
//  585       {
//  586         if(MotorSpeed < 80)     {MotorSpeed += 10;}
??Smart_home_HandleKeys_2:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_31:
        JNC     ??Smart_home_HandleKeys_7
        MOVX    A,@DPTR
        ADD     A,#0xa
        MOVX    @DPTR,A
//  587         if(MotorSpeed >= 80)     
??Smart_home_HandleKeys_7:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        JC      ??Smart_home_HandleKeys_0
//  588         {
//  589 #if defined ( LCD_SUPPORTED )
//  590            HalLcdWriteString( "Motor max Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor max Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor max Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  591 #endif 
//  592            MotorSpeed = 80;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#0x50
??Smart_home_HandleKeys_4:
        MOVX    @DPTR,A
//  593         }
//  594         break;
//  595       }
//  596          
//  597     }    
//  598   }
//  599   
//  600   if ( keys & HAL_KEY_SW_3 )  //DOWN
??Smart_home_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??Smart_home_HandleKeys_8
//  601   {
//  602     switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_HandleKeys_9
        DEC     A
        JZ      ??Smart_home_HandleKeys_10
//  603     {
//  604       default:    
//  605       case 0:
//  606       {
//  607         if(LCD_Page >= 0)       {LCD_Page--;}
        MOV     DPTR,#LCD_Page
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_27:
        JC      ??Smart_home_HandleKeys_11
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  608         if(LCD_Page < 0)        {LCD_Page=2;}
??Smart_home_HandleKeys_11:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_28:
        JNC     ??Smart_home_HandleKeys_8
        MOV     A,#0x2
        SJMP    ??Smart_home_HandleKeys_12
//  609         break;
//  610       }
//  611       case 1:  
//  612       {
//  613         uint8 switch2;
//  614         if(Relay2_on == 0)  {Relay2_on = 1 ; switch2 = 0x20;}
??Smart_home_HandleKeys_9:
        MOV     DPTR,#??Relay2_on
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_13
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     R1,#0x20
        SJMP    ??Smart_home_HandleKeys_14
//  615         else if(Relay2_on == 1)  {Relay2_on = 0; switch2 = 0x10;}
??Smart_home_HandleKeys_13:
        XRL     A,#0x1
        JNZ     ??Smart_home_HandleKeys_15
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x10
        SJMP    ??Smart_home_HandleKeys_14
//  616         else  {Relay2_on = 0; switch2 = 0x01;}       
??Smart_home_HandleKeys_15:
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
//  617         Smart_home_Relay_Ctl(switch2);       
??Smart_home_HandleKeys_14:
        ; Setup parameters for call to function Smart_home_Relay_Ctl
        LCALL   ??Smart_home_Relay_Ctl?relay
//  618         break;
        SJMP    ??Smart_home_HandleKeys_8
//  619       } 
//  620       case 2:
//  621       {
//  622         if(MotorSpeed > -80)     {MotorSpeed -= 10;}
??Smart_home_HandleKeys_10:
        MOV     DPTR,#??MotorSpeed
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_33:
        JC      ??Smart_home_HandleKeys_16
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOVX    @DPTR,A
//  623         if(MotorSpeed <= -80)     
??Smart_home_HandleKeys_16:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_34:
        JNC     ??Smart_home_HandleKeys_8
//  624         {
//  625 #if defined ( LCD_SUPPORTED )
//  626            HalLcdWriteString( "Motor min Speed", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Motor min Speed">` & 0xff
        MOV     R3,#(`?<Constant "Motor min Speed">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  627 #endif 
//  628            MotorSpeed = -80;
        MOV     DPTR,#??MotorSpeed
        MOV     A,#-0x50
??Smart_home_HandleKeys_12:
        MOVX    @DPTR,A
//  629         }
//  630         break; 
//  631       }
//  632     }
//  633   }
//  634   
//  635   if ( keys & HAL_KEY_SW_2 )  //RIGHT  
??Smart_home_HandleKeys_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??Smart_home_HandleKeys_17
//  636   /*3.22 这里在调试时出现问题，具体问题为 点击up时会出现屏幕变为禁止组网
//  637     控制方面变为控制电机，问题在于汇编中的key值会出现  keys & HAL_KEY_SW_2 = 2
//  638     的情况，暂时禁止，需要等待研究  还有key_7*/
//  639   {
//  640      if(Ctrlcase < 3)   { Ctrlcase++;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_25:
        JNC     ??Smart_home_HandleKeys_18
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  641      if(Ctrlcase > 2)   { Ctrlcase=0;}
??Smart_home_HandleKeys_18:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_26:
        JC      ??Smart_home_HandleKeys_17
        CLR     A
        MOVX    @DPTR,A
//  642      //Smart_home_Key_add(Ctrlcase);
//  643   }
//  644   
//  645   if ( keys & HAL_KEY_SW_4 )  //LEFT
??Smart_home_HandleKeys_17:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.3
        JNC     ??Smart_home_HandleKeys_19
//  646   {
//  647      if(Ctrlcase > -1)   { Ctrlcase--;}
        MOV     DPTR,#Ctrlcase
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_29:
        JC      ??Smart_home_HandleKeys_20
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  648      if(Ctrlcase < 0)    { Ctrlcase=2;}
??Smart_home_HandleKeys_20:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_30:
        JNC     ??Smart_home_HandleKeys_19
        MOV     A,#0x2
        MOVX    @DPTR,A
//  649      //Smart_home_Key_add(Ctrlcase);    
//  650   }
//  651   
//  652   if ( keys & HAL_KEY_SW_5 )  //OK
//  653   {
//  654 
//  655   }
//  656   
//  657   if ( keys & HAL_KEY_SW_7 )  //CENCEL
??Smart_home_HandleKeys_19:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.6
        JNC     ??Smart_home_HandleKeys_21
//  658   {
//  659      if(NetWorkAllow == 0)
        MOV     DPTR,#??NetWorkAllow
        MOVX    A,@DPTR
        JNZ     ??Smart_home_HandleKeys_22
//  660      {
//  661        NetWorkAllow = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  662        NLME_PermitJoiningRequest(0xFF); // 组网，允许随时加入
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#-0x1
        LCALL   ??NLME_PermitJoiningRequest?relay
//  663        HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  664 #if defined ( LCD_SUPPORTED )
//  665        HalLcdWriteString( "Allow networking", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Allow networking">` & 0xff
        MOV     R3,#(`?<Constant "Allow networking">` >> 8) & 0xff
        SJMP    ??Smart_home_HandleKeys_23
//  666 #endif
//  667      }
//  668      else
//  669      {
//  670        NetWorkAllow = 0;
??Smart_home_HandleKeys_22:
        CLR     A
        MOVX    @DPTR,A
//  671        NLME_PermitJoiningRequest(0x00); // 不允许组网
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,A
        LCALL   ?Subroutine17 & 0xFFFF
//  672        HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);  
//  673 #if defined ( LCD_SUPPORTED )
//  674        HalLcdWriteString( "Ban   networking", HAL_LCD_LINE_4 );
??CrossCallReturnLabel_36:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Ban   networking">` & 0xff
        MOV     R3,#(`?<Constant "Ban   networking">` >> 8) & 0xff
??Smart_home_HandleKeys_23:
        LCALL   ??HalLcdWriteString?relay
//  675 #endif        
//  676      }
//  677   }
//  678 }
??Smart_home_HandleKeys_21:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        LCALL   ??NLME_PermitJoiningRequest?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x4f
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x50
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??MotorSpeed:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??NetWorkAllow:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay1_on:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Relay2_on:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  679 
//  680 /*********************************************************************
//  681  * @fn      Smart_home_ProcessMSGCmd
//  682  *
//  683  * @brief   Data message processor callback. This function processes
//  684  *          any incoming data - probably from other devices. Based
//  685  *          on the cluster ID, perform the intended action.
//  686  *
//  687  * @param   pkt - pointer to the incoming message packet
//  688  *
//  689  * @return  TRUE if the 'pkt' parameter is being used and will be freed later,
//  690  *          FALSE otherwise.
//  691  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  692 void Smart_home_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
Smart_home_ProcessMSGCmd:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function Smart_home_ProcessMSGCmd
        CODE
//  693 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  694   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for Smart_home_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Smart_home_ProcessMSGCmd_8
        CODE
//  695   {
//  696   /***********************************************************************
//  697     目前总共8种case
//  698    #define Smart_home_CLUSTERID_HUMITMSG            1  // 温湿度
//  699    #define Smart_home_CLUSTERID_TEMPLIGHTMSG        2  // 温度光照
//  700    #define Smart_home_CLUSTERID_RFIDMSG             3  // 射频卡
//  701    #define Smart_home_CLUSTERID_GASFLAMEMSG         4  // 烟雾火焰
//  702    #define Smart_home_CLUSTERID_INFRAREDMSG         5  // 人体红外
//  703    #define Smart_home_CLUSTERID_SOUNDVBMSG          6  // 声音振动
//  704    #define Smart_home_CLUSTERID_MOTORSTATUSMSG      7  // 直流电机状态信息
//  705    #define Smart_home_CLUSTERID_RELAYSTATUSMSG      8  // 继电器状态信息
//  706     
//  707    设备描述
//  708    typedef struct DeviceInfo
//  709    {
//  710      uint8 deviceID;
//  711      uint8 deviceStatus;
//  712      uint8 data[5];
//  713    } DeviceInfo; 
//  714    ************************************************************************/ 
//  715     //3.14 消息处理模块，共8个，行为类似 
//  716     //3.21 修改为指针方法（DeviceList相关）
//  717     case Smart_home_CLUSTERID_HUMITMSG:         // 温湿度
//  718       DeviceList[Humit].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线
??Smart_home_ProcessMSGCmd_1:
        MOV     DPTR,#DeviceList + 8
        LCALL   ?Subroutine2 & 0xFFFF
//  719       DeviceList[Humit].data[0] = pkt->cmd.Data[4]; // 湿度 
??CrossCallReturnLabel_0:
        MOV     DPTR,#DeviceList + 9
        LCALL   ?Subroutine7 & 0xFFFF
//  720       DeviceList[Humit].data[1] = pkt->cmd.Data[5]; // 温度
??CrossCallReturnLabel_14:
        MOV     DPTR,#DeviceList + 10
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  721       break;
//  722       
//  723     case Smart_home_CLUSTERID_TEMPLIGHTMSG:     // 温度光照
//  724       DeviceList[TempLight].deviceStatus = DEVICE_ONLINE;   //收到消息设置为在线
??Smart_home_ProcessMSGCmd_2:
        MOV     DPTR,#DeviceList + 15
        LCALL   ?Subroutine2 & 0xFFFF
//  725       DeviceList[TempLight].data[0] = pkt->cmd.Data[4]; // 温度整数
??CrossCallReturnLabel_1:
        MOV     DPTR,#DeviceList + 16
        LCALL   ?Subroutine8 & 0xFFFF
//  726       DeviceList[TempLight].data[1] = pkt->cmd.Data[5]; // 温度小数
??CrossCallReturnLabel_16:
        MOV     DPTR,#DeviceList + 17
        LCALL   ?Subroutine6 & 0xFFFF
//  727       DeviceList[TempLight].data[2] = pkt->cmd.Data[6]; // 光照
??CrossCallReturnLabel_12:
        MOV     DPTR,#DeviceList + 18
        LCALL   ?Subroutine5 & 0xFFFF
//  728       DeviceList[TempLight].data[3] = pkt->cmd.Data[7]; // 光照
??CrossCallReturnLabel_10:
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 19
        LJMP    ??Smart_home_ProcessMSGCmd_9 & 0xFFFF
//  729       break;
//  730       
//  731     case Smart_home_CLUSTERID_RFIDMSG:          // 射频卡
//  732       DeviceList[RfID].deviceStatus = DEVICE_ONLINE;        //收到消息设置为在线
??Smart_home_ProcessMSGCmd_3:
        MOV     DPTR,#DeviceList + 22
        LCALL   ?Subroutine2 & 0xFFFF
//  733       DeviceList[RfID].data[0] = pkt->cmd.Data[4]; // 射频卡类型
??CrossCallReturnLabel_2:
        MOV     DPTR,#DeviceList + 23
        LCALL   ?Subroutine8 & 0xFFFF
//  734       DeviceList[RfID].data[1] = pkt->cmd.Data[5]; // 4个字节的ID号
??CrossCallReturnLabel_17:
        MOV     DPTR,#DeviceList + 24
        LCALL   ?Subroutine6 & 0xFFFF
//  735       DeviceList[RfID].data[2] = pkt->cmd.Data[6]; //
??CrossCallReturnLabel_13:
        MOV     DPTR,#DeviceList + 25
        LCALL   ?Subroutine18 & 0xFFFF
//  736       DeviceList[RfID].data[3] = pkt->cmd.Data[7]; //
??CrossCallReturnLabel_37:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 26
        LCALL   ?Subroutine5 & 0xFFFF
//  737       DeviceList[RfID].data[4] = pkt->cmd.Data[8]; //  
??CrossCallReturnLabel_11:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DeviceList + 27
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  738       break;
//  739       
//  740     case Smart_home_CLUSTERID_GASFLAMEMSG:      // 烟雾火焰
//  741       DeviceList[gasFlame].deviceStatus = DEVICE_ONLINE;    //收到消息设置为在线
??Smart_home_ProcessMSGCmd_4:
        MOV     DPTR,#DeviceList + 29
        LCALL   ?Subroutine3 & 0xFFFF
//  742       DeviceList[gasFlame].data[0] = pkt->cmd.Data[4]; // 烟雾与火焰报警信息
??CrossCallReturnLabel_4:
        MOV     DPTR,#DeviceList + 30
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  743       break;
//  744       
//  745     case Smart_home_CLUSTERID_INFRAREDMSG:      // 人体红外
//  746       DeviceList[infrared].deviceStatus = DEVICE_ONLINE;    //收到消息设置为在线
??Smart_home_ProcessMSGCmd_5:
        MOV     DPTR,#DeviceList + 36
        LCALL   ?Subroutine3 & 0xFFFF
//  747       DeviceList[infrared].data[0] = pkt->cmd.Data[4]; // 人体红外 
??CrossCallReturnLabel_5:
        MOV     DPTR,#DeviceList + 37
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  748       break;
//  749 
//  750     case Smart_home_CLUSTERID_SOUNDVBMSG:       // 声音振动
//  751       DeviceList[soundVb].deviceStatus = DEVICE_ONLINE;     //收到消息设置为在线
??Smart_home_ProcessMSGCmd_6:
        MOV     DPTR,#DeviceList + 57
        LCALL   ?Subroutine3 & 0xFFFF
//  752       DeviceList[soundVb].data[0] = pkt->cmd.Data[4]; // 声音震动信息
??CrossCallReturnLabel_6:
        MOV     DPTR,#DeviceList + 58
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  753       break;
//  754       
//  755     case Smart_home_CLUSTERID_MOTORSTATUSMSG:   // 直流电机状态信息
//  756       DeviceList[motor].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线
??Smart_home_ProcessMSGCmd_7:
        MOV     DPTR,#DeviceList + 43
        MOV     A,#0x1
        MOVX    @DPTR,A
//  757       // 储存电机设备的网络地址，用于发送控制命令
//  758       Motor_addr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Motor_addr + 8
        LCALL   ?Subroutine9 & 0xFFFF
//  759       Motor_addr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
??CrossCallReturnLabel_18:
        MOV     DPTR,#Motor_addr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  760       
//  761       Motor_addr.endPoint = 1;  // 目的节点的端口号
        MOV     DPTR,#Motor_addr + 9
        LCALL   ?Subroutine2 & 0xFFFF
//  762       //TransmitApp_DstMotorAddr->endPoint = TRANSMITAPP_ENDPOINT;
//  763      
//  764       DeviceList[motor].data[0] = pkt->cmd.Data[4]; // 电机转速
??CrossCallReturnLabel_3:
        MOV     DPTR,#DeviceList + 44
        LCALL   ?Subroutine7 & 0xFFFF
//  765       DeviceList[motor].data[1] = pkt->cmd.Data[5]; // 电机状态
??CrossCallReturnLabel_15:
        MOV     DPTR,#DeviceList + 45
        SJMP    ??Smart_home_ProcessMSGCmd_9
//  766       break;
//  767       
//  768     case Smart_home_CLUSTERID_RELAYSTATUSMSG:   // 继电器状态信息
//  769       DeviceList[relay].deviceStatus = DEVICE_ONLINE;       //收到消息设置为在线    
??Smart_home_ProcessMSGCmd_8:
        MOV     DPTR,#DeviceList + 50
        MOV     A,#0x1
        MOVX    @DPTR,A
//  770       
//  771       // 储存继电器设备的网络地址，用于发送控制命令
//  772       Relay_addr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Relay_addr + 8
        LCALL   ?Subroutine9 & 0xFFFF
//  773       Relay_addr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;    
??CrossCallReturnLabel_19:
        MOV     DPTR,#Relay_addr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  774       Relay_addr.endPoint = 1; // 目的节点的端口号
        MOV     DPTR,#Relay_addr + 9
        LCALL   ?Subroutine3 & 0xFFFF
//  775       DeviceList[relay].data[0] = pkt->cmd.Data[4]; 
??CrossCallReturnLabel_7:
        MOV     DPTR,#DeviceList + 51
??Smart_home_ProcessMSGCmd_9:
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock47
//  776       break;
//  777       
//  778     default:
//  779       break;
//  780   }
//  781 }
??Smart_home_ProcessMSGCmd_0:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        INC     A
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_44:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_39:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_38:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_12
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_13
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_49:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_40:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_15
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_10
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_11
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_51:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x22
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_46:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_4
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_5
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_6
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_7
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_52:
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_15
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_10
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_11
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_45
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_4
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_5
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_6
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_7
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_43:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond99 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_17
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_2
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_3
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_50:
        RET
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_12
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_13
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_16
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_17
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_2
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_3
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115
//  782 
//  783 /*********************************************************************
//  784  * @fn     Smart_home_Device_check
//  785  *
//  786  * @brief   设备计数器，用来检查设备在开始组网后多久在线.
//  787  *          目前搜索为4次HeartBeat  (DEVICE_HEART_BEAT 3)
//  788  *          3.21
//  789  * @param   none
//  790  *
//  791  * @return  none
//  792  */
//  793 static void Smart_home_Device_check(void)
//  794 {

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  795   static uint8 DeviceID;
??DeviceID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  796   for(DeviceID=1;DeviceID<Smart_home_MAX_INCLUSTERS;DeviceID++)
//  797   {
//  798     if(DeviceList[DeviceID].deviceStatus != DEVICE_ONLINE)    //设备离线
//  799     {
//  800       DeviceCnt[DeviceID]++;
//  801     }
//  802     if(DeviceList[DeviceID].deviceStatus == DEVICE_ONLINE)    //设备在线
//  803     {
//  804       DeviceCnt[DeviceID] = 0;
//  805       DeviceList[DeviceID].deviceStatus = 0;
//  806     }
//  807     if(DeviceCnt[DeviceID] > DEVICE_HEART_BEAT)
//  808     {
//  809       DeviceCnt[DeviceID] = DEVICE_HEART_BEAT;
//  810       DeviceList[DeviceID].deviceStatus = DEVICE_OFFLINE;
//  811     }
//  812   }
//  813   /*温湿度缓存 温度光照缓存 RFID 信息缓存 气体火焰缓存 
//  814   人体红外 电机状态 继电器状态 声音震动*/
//  815 }
//  816 
//  817 
//  818 /*********************************************************************
//  819  * @fn      Smart_home_Relay_Ctl
//  820  *
//  821  * @brief   发送继电器控制消息
//  822  *
//  823  * @param   none
//  824  *
//  825  * @return  none
//  826  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  827 static void Smart_home_Relay_Ctl(uint8 cmd)
Smart_home_Relay_Ctl:
        CFI Block cfiBlock116 Using cfiCommon0
        CFI Function Smart_home_Relay_Ctl
        CODE
//  828 {
        FUNCALL Smart_home_Relay_Ctl, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  829   uint8 tmp;
//  830   
//  831   // 只有设备在线时, 方发送控制命令
//  832   if (DeviceList[relay].deviceStatus != DEVICE_OFFLINE)
        MOV     DPTR,#DeviceList + 50
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??Smart_home_Relay_Ctl_0
//  833   {
//  834     // put the sequence number in the message
//  835     tmp = HI_UINT8( RelayTransID );
        MOV     DPTR,#RelayTransID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
//  836     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Relay_Ctl_1
        MOV     R0,#0x30
        SJMP    ??Smart_home_Relay_Ctl_2
??Smart_home_Relay_Ctl_1:
        MOV     R0,#0x37
//  837     Coordinator_Msg[2] = tmp;
??Smart_home_Relay_Ctl_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 2
        MOVX    @DPTR,A
//  838     tmp = LO_UINT8( RelayTransID );
        MOV     DPTR,#RelayTransID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
//  839     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??Smart_home_Relay_Ctl_3
        MOV     R0,#0x30
        SJMP    ??Smart_home_Relay_Ctl_4
??Smart_home_Relay_Ctl_3:
        MOV     R0,#0x37
//  840     Coordinator_Msg[3] = tmp;
??Smart_home_Relay_Ctl_4:
        MOV     A,R0
        ADD     A,R2
        MOV     DPTR,#Coordinator_Msg + 3
        MOVX    @DPTR,A
//  841     
//  842     // 发送给继电器的控制命令 
//  843     Coordinator_Msg[4] = cmd;
        MOV     A,R6
        INC     DPTR
        MOVX    @DPTR,A
//  844     /********************************************
//  845     *   屏幕显示部分*
//  846 #if defined ( LCD_SUPPORTED )
//  847     if(cmd == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
//  848     if(cmd == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
//  849     if(cmd == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
//  850     if(cmd == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}
//  851 #endif     
//  852     ********************************************/
//  853     tmp = AF_DataRequest( &Relay_addr,                         
//  854                           (endPointDesc_t *)&Smart_home_epDesc,                  
//  855                            Smart_home_CLUSTERID_RELAYCTRL,
//  856                            RELAYSTATUSMSG_LEN,                 
//  857                            Coordinator_Msg,                    
//  858                           &RelayTransID,                       
//  859                            AF_DISCV_ROUTE,                     
//  860                            AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#RelayTransID & 0xff
        MOV     ?V0 + 1,#(RelayTransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#Coordinator_Msg & 0xff
        MOV     ?V0 + 1,#(Coordinator_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#Smart_home_epDesc & 0xff
        MOV     R5,#(Smart_home_epDesc >> 8) & 0xff
        MOV     R2,#Relay_addr & 0xff
        MOV     R3,#(Relay_addr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  861   } 
//  862 }
??Smart_home_Relay_Ctl_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock116
//  863 
//  864 /*********************************************************************
//  865  * @fn      Smart_home_Motor_Ctl
//  866  *
//  867  * @brief   发送电机控制消息
//  868  *
//  869  * @param   none
//  870  *
//  871  * @return  none
//  872  */
//  873 static void Smart_home_Motor_Ctl(uint8 cmd,uint8 speed)
//  874 {
//  875   uint8 tmp;
//  876   
//  877   // 只有设备在线时, 方发送控制命令
//  878   if (DeviceList[motor].deviceStatus != DEVICE_OFFLINE)
//  879   {
//  880     // put the sequence number in the message
//  881     tmp = HI_UINT8( MotorTransID );
//  882     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
//  883     Coordinator_Msg[2] = tmp;
//  884     tmp = LO_UINT8( RelayTransID );
//  885     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
//  886     Coordinator_Msg[3] = tmp;
//  887     
//  888     // 发送给继电器的控制命令 
//  889     Coordinator_Msg[4] = speed;
//  890     Coordinator_Msg[5] = cmd;
//  891     
//  892     tmp = AF_DataRequest( &Motor_addr,                         
//  893                           (endPointDesc_t *)&Smart_home_epDesc,                  
//  894                            Smart_home_CLUSTERID_MOTORCTRL,
//  895                            MOTORSTATUSMSG_LEN,                 
//  896                            Coordinator_Msg,                    
//  897                           &MotorTransID,                       
//  898                            AF_DISCV_ROUTE,                     
//  899                            AF_DEFAULT_RADIUS );
//  900   }   
//  901 }
//  902 
//  903 
//  904 /*********************************************************************
//  905  * @fn      Smart_home_Display
//  906  *
//  907  * @brief   屏幕回显函数，定义了内容如何显示.
//  908  *
//  909  * @param   port - UART port.
//  910  * @param   event - the UART port event flag.
//  911  *
//  912  * @return  none
//  913  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  914 static void Smart_home_Display(void)
Smart_home_Display:
        CFI Block cfiBlock117 Using cfiCommon0
        CFI Function Smart_home_Display
        CODE
//  915 {
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Smart_home_Display, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  916 #if defined LCD_SUPPORTED
//  917   switch(Ctrlcase)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        DEC     A
        JZ      ??Smart_home_Display_0
        DEC     A
        MOV     R1,#0x4
        JZ      ??Smart_home_Display_1
//  918   {
//  919     default:    
//  920     case 0:
//  921       HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Flip use UP/DOWN">` & 0xff
        MOV     R3,#(`?<Constant "Flip use UP/DOWN">` >> 8) & 0xff
        LCALL   ?Subroutine20 & 0xFFFF
//  922       //清除屏幕显示
//  923       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  924       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
??CrossCallReturnLabel_41:
        LJMP    ??Smart_home_Display_2 & 0xFFFF
//  925       break;
//  926     
//  927     case 1:
//  928       HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
??Smart_home_Display_0:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "Relay Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Relay Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
//  929       //清除屏幕显示
//  930       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  931       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  932       if(DeviceList[relay].deviceStatus == DEVICE_ONLINE)  //设备在线回显
??CrossCallReturnLabel_8:
        MOV     DPTR,#DeviceList + 50
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Smart_home_Display_3
//  933       {
//  934         HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "Relay Online">` & 0xff
        MOV     R3,#(`?<Constant "Relay Online">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  935       //继电器控制界面
//  936         if(Ctrlcase == 1)
        MOV     DPTR,#Ctrlcase
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Smart_home_Display_3
//  937         {
//  938           const uint8 cmd =  DeviceList[relay].data[0];
        MOV     DPTR,#DeviceList + 51
        MOVX    A,@DPTR
        MOV     R6,A
//  939           //消除抖动
//  940           if((cmd & 0x02) == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
        MOV     C,0xE0 /* A   */.1
        JNC     ??Smart_home_Display_4
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:ON">` & 0xff
        MOV     R3,#(`?<Constant "K1:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  941           if((cmd & 0x01) == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
??Smart_home_Display_4:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Smart_home_Display_5
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "K1:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K1:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  942           if((cmd & 0x20) == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
??Smart_home_Display_5:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.5
        JNC     ??Smart_home_Display_6
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:ON">` & 0xff
        MOV     R3,#(`?<Constant "K2:ON">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  943           if((cmd & 0x10) == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}      
??Smart_home_Display_6:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??Smart_home_Display_3
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "K2:OFF">` & 0xff
        MOV     R3,#(`?<Constant "K2:OFF">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  944         } 
//  945       }
//  946       if(DeviceList[relay].deviceStatus != DEVICE_ONLINE)
??Smart_home_Display_3:
        MOV     DPTR,#DeviceList + 50
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??Smart_home_Display_7
//  947       {
//  948         HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "Relay Offline">` & 0xff
        MOV     R3,#(`?<Constant "Relay Offline">` >> 8) & 0xff
        SJMP    ??Smart_home_Display_2
//  949       }
//  950       break;
//  951     
//  952     case 2:
//  953       HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
??Smart_home_Display_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Motor Contrling">` & 0xff
        MOV     R3,#(`?<Constant "Motor Contrling">` >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
//  954       //清除屏幕显示
//  955       HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
//  956       HalLcdWriteString( " ", HAL_LCD_LINE_3 );
//  957       if(DeviceList[motor].deviceStatus == DEVICE_ONLINE)  //设备在线回显
??CrossCallReturnLabel_9:
        MOV     DPTR,#DeviceList + 43
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Smart_home_Display_8
//  958       {
//  959         HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "Motor Online">` & 0xff
        MOV     R3,#(`?<Constant "Motor Online">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  960       }
//  961       if(DeviceList[motor].deviceStatus != DEVICE_ONLINE)
??Smart_home_Display_8:
        MOV     DPTR,#DeviceList + 43
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??Smart_home_Display_7
//  962       {
//  963         HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "Motor Offline">` & 0xff
        MOV     R3,#(`?<Constant "Motor Offline">` >> 8) & 0xff
??Smart_home_Display_2:
        LCALL   ??HalLcdWriteString?relay
//  964       }      
//  965       break;
//  966   }
//  967   
//  968 #endif // LCD_SUPPORTED  
//  969 }
??Smart_home_Display_7:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ??HalLcdWriteString?relay
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_8
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_9
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker124 Using cfiCommon1
        CFI (cfiPicker124) NoFunction
        CFI (cfiPicker124) Picker
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiPicker124

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Relay_Ctl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Relay_Ctl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Smart_home_Display?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Smart_home_Display

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Smart_home">`:
        DB "Smart_home"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor max Speed">`:
        DB "Motor max Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor min Speed">`:
        DB "Motor min Speed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Allow networking">`:
        DB "Allow networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Ban   networking">`:
        DB "Ban   networking"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Flip use UP/DOWN">`:
        DB "Flip use UP/DOWN"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Contrling">`:
        DB "Relay Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Online">`:
        DB "Relay Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:ON">`:
        DB "K1:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K1:OFF">`:
        DB "K1:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:ON">`:
        DB "K2:ON"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "K2:OFF">`:
        DB "K2:OFF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Relay Offline">`:
        DB "Relay Offline"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Contrling">`:
        DB "Motor Contrling"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Online">`:
        DB "Motor Online"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Motor Offline">`:
        DB "Motor Offline"

        END
//  970 
//  971 
// 
// 1 701 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//   262 bytes in segment XDATA_ROM_C
//   208 bytes in segment XDATA_Z
// 
// 1 737 bytes of CODE  memory
//   262 bytes of CONST memory
//   208 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
