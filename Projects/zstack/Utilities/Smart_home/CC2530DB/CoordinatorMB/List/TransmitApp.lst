###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         22/Mar/2021  22:01:54 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03       #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\Source\TransmitApp.c            #
#    Command line       =  -f "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03   #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03   #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0           #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ #
#                          ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2. #
#                          5.1a_EB\Projects\zstack\MY_BOARD\Exp4\Source\Trans #
#                          mitApp.c" -D LCD_SUPPORTED -D ZDO_COORDINATOR -D   #
#                          xNV_RESTORE -D xNV_INIT -D xREFLECTOR -D           #
#                          xHAL_UART=TRUE -D xHAL_UART_TEST -lC               #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\CoordinatorMB\List\"   #
#                          -lA "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\CoordinatorMB\List\"   #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\CoordinatorMB\Obj\"    #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜ #
#                          Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2 #
#                          .5.1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\"  #
#                          -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03   #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\Source\" -I         #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\ZMain\TI2530D #
#                          B\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\ #
#                          03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects #
#                          \zstack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Comp #
#                          onents\hal\include\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜ #
#                          Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2 #
#                          .5.1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\target\CC2530MB\" -I   #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\include\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬ #
#                          Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5. #
#                          1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\..\.. #
#                          \..\..\..\Components\mac\high_level\" -I           #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\low_level\srf04\" -I                       #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\low_level\srf04\single_chip\" -I           #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mt\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘ #
#                          ∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Pro #
#                          jects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\.. #
#                          \Components\osal\include\" -I                      #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\services\saddr\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜ #
#                          Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2 #
#                          .5.1a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\.. #
#                          \..\..\..\..\Components\services\sdata\" -I        #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\af\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€ #
#                          ∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_ #
#                          EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\nwk\" -I                   #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\sapi\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á #
#                          ◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1 #
#                          a_EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sec\" -I                 #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊ #
#                          €∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a #
#                          _EB\Projects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I                  #
#                          "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03      #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\..\Compone #
#                          nts\zmac\" -I "D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µ #
#                          º˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\P #
#                          rojects\zstack\MY_BOARD\Exp4\CC2530DB\..\..\..\..\ #
#                          ..\Components\zmac\f8w\" -Ohz                      #
#    List file          =  D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03       #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\CoordinatorMB\List\Tra #
#                          nsmitApp.lst                                       #
#    Object file        =  D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03       #
#                           µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zs #
#                          tack\MY_BOARD\Exp4\CC2530DB\CoordinatorMB\Obj\Tran #
#                          smitApp.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\±œ…Ë\ µ—Èœ‰_Œﬁœﬂ¥´∏–∆˜Õ¯¬Á◊€∫œ µº˘∆ΩÃ®\03  µ—È≥Ã–Ú”Î ÷≤·\ZStack-CC2530-2.5.1a_EB\Projects\zstack\MY_BOARD\Exp4\Source\TransmitApp.c
      1          /*******************************************************************************
      2            Œƒ º˛ √˚£∫TransmitApp.c
      3            ◊˜    ’ﬂ£∫ƒœæ©∞≤Â∑≤©—–µÁ◊”ø∆ºº”–œﬁπ´Àæ
      4            ¥¥Ω® ±º‰£∫2013.9.20
      5            –ﬁ∏ƒ ±º‰£∫2020.12.22
      6            IAR ∞Ê±æ£∫IAR for 8051 V8.10.1
      7            ≤‚ ‘∆ΩÃ®£∫MotherBoard V2.1
      8          
      9            Àµ    √˜£∫
     10            ±æ≥Ã–Ú µœ÷–≠µ˜∆˜◊ÈÕ¯£¨≤…ºØ¥´∏–∆˜–≈œ¢≤¢‘⁄LCD…œœ‘ æ£¨«“ø…Õ®π˝∞¥º¸øÿ÷∆…Ë±∏‘À––°£
     11            –≠µ˜∆˜π‹¿Ì8∏ˆ÷’∂À…Ë±∏£¨æﬂÃÂ»Áœ¬£∫
     12                1°¢Œ¬∂»”Îπ‚’’∂»¥´∏–∆˜£ª2°¢—ÃŒÌ”Îª—Ê¥´∏–∆˜£ª3°¢ºÃµÁ∆˜£ª4°¢Œ¬ ™∂»¥´∏–∆˜£ª
     13                5°¢…˘“Ù”Î’∂Ø¥´∏–∆˜£ª  6°¢»ÀÃÂ∫ÏÕ‚ºÏ≤‚¥´∏–∆˜£ª7°¢µÁª˙£ª8°¢RFIDºÏ≤‚∆˜°£
     14          
     15            ÷’∂À…Ë±∏÷‹∆⁄–‘∑¢ÀÕ–≈œ¢∏¯–≠µ˜∆˜£¨–≠µ˜∆˜Ω´ ˝æ›ª∫¥Ê∆¿¥£¨»ª∫Û∂® ±2s‘⁄LCDœ‘ æ≥ˆ¿¥°£
     16            ‘⁄÷’∂À…Ë±∏÷–£¨DHT11Œ¬ ™∂»¥´∏–∆˜ «√ø∏Ù5√Î≤…ºØ“ª¥Œ£¨∆‰”‡∂º «√ø∏Ù1√Î≤…ºØ“ª¥Œ°£
     17           
     18            ∞¥º¸£∫
     19                 (¥À¥¶µƒ∞¥º¸±Í∫≈ «»Ìº˛ƒ⁄≤ø±Í∫≈£¨”Îø™∑¢∞Â…œµƒ±Í∫≈≤¢∑«“ª“ª∂‘”¶)
     20                 SW1(UP)    £∫––œ‘ æ++(“≥√Ê…œ∑≠)£ª
     21                 SW2(RIGHT) £∫øÿ÷∆ºÃµÁ∆˜£¨√ø∞¥“ªœ¬∞¥º¸£¨ºÃµÁ∆˜◊¥Ã¨«–ªª“ª¥Œ£ª
     22                 SW3(DOWN)  £∫––œ‘ æ--(“≥√Êœ¬∑≠)£ª
     23                 SW4(LEFT)  £∫øÿ÷∆÷±¡˜µÁª˙£¨√ø∞¥œ¬“ª¥Œ∞¥º¸£¨÷±¡˜µÁª˙µƒ◊¥Ã¨«–ªª“ª¥Œ£ª
     24                 SW5(OK)    £∫œ‘ æ«–ªª£¨Õ¨ ±¥Úø™∆¡ƒªπˆ∂Øœ‘ æ£ªœ‘ æ–≈œ¢∑÷Œ™¡Ω∆¡£¨
     25                              1°¢µ⁄“ª∆¡œ‘ æ≤…ºØµΩµƒŒ¬ ™∂»°¢π‚’’–≈œ¢°¢ºÃµÁ∆˜∫Õ÷±¡˜µÁª˙£¨
     26                                ”…”⁄‘ˆº”µÁª˙◊™ÀŸœ‘ æ∫Û£¨–Ë“™πˆ∂Øœ‘ æ£ª
     27                              2°¢»°œ˚µ⁄“ª∆¡µƒπˆ∂Øœ‘ æ£ª
     28                              3°¢µ⁄∂˛∆¡œ‘ æ∏ÊæØ–≈œ¢£¨µ⁄∂˛∆¡Àƒ––œ‘ æ≤ª»´£¨–Ë“™πˆ∂Øœ‘ æ£ª
     29                              4°¢»°œ˚µ⁄∂˛∆¡µƒπˆ∂Øœ‘ æ£ª
     30                 SW7(CANCEL)£∫¥Úø™/πÿ±’–≠µ˜∆˜◊ÈÕ¯π¶ƒ‹£¨µ∆¡¡±Ì æ‘ –Ì£¨µ∆√±Ì æ≤ª‘ –Ì°£
     31                              «Î◊¢“‚£∫œµÕ≥ƒ¨»œπÿ±’◊ÈÕ¯π¶ƒ‹£¨»Á”––Ë“™£¨«Î∞¥SW7º¸¥Úø™°£
     32          
     33            LCD:
     34                œ‘ æ≤ø∑÷£¨¥´∏–∆˜–≈œ¢œ‘ æ ¬º˛ «◊‘∂Ø‘À––µƒ£¨ƒ¨»œœ‘ æµƒ «µ⁄“ª∆¡–≈œ¢£¨ ÷∂Ø
     35                ∞¥º¸SW5ø…“‘«–ªªµΩµ⁄∂˛∆¡£¨µ⁄∂˛∆¡ƒ¨»œπˆ∂Øœ‘ æ£¨‘Ÿ¥Œ∞¥œ¬∞¥º¸SW5ø…“‘πÿ±’πˆ
     36                ∂Øœ‘ æ£¨¥À ±∞¥º¸SW1∫ÕSW3ø…“‘øÿ÷∆πˆ∂Ø∆¡ƒªœÚ…œªÚ’ﬂœÚœ¬£¨
     37                LCDœ‘ ææŸ¿˝Àµ√˜£∫
     38                         µ⁄“ª∆¡£∫H:OFF T:OFF( ™∂»°¢Œ¬∂»…Ë±∏¿Îœﬂ)
     39                                 T:32.5C L:320L(Œ¬∂»32.5∂»£¨π‚’’«ø∂»£∫320¡˜√˜)
     40                                 K1:off K2:on(ºÃµÁ∆˜K1πÿ±’£¨K2¥Úø™£¨»Áπ˚ «OFF±Ì æ¿Îœﬂ)
     41                                 Motor:Stop(µÁª˙Õ£◊™£¨»Áπ˚ «OFF±Ì æ¿Îœﬂ)
     42                                 Speed:0RPS(µÁª˙ƒø«∞◊™ÀŸŒ™0◊™/∑÷÷”)
     43          
     44                         µ⁄∂˛∆¡£∫Gas:OFF(—ÃŒÌ¥´∏–∆˜¿Îœﬂ)
     45                                 Flame:OFF(ª—Ê¥´∏–∆˜¿Îœﬂ)
     46                                 Sound:ON(…˘“Ù¥´∏–∆˜‘⁄œﬂ£¨√ª”–±®æØ)
     47                                 Vibrate:Alarm!(’∂Ø±®æØ)
     48                                 Infrared:ON(»ÀÃÂ∫ÏÕ‚ºÏ≤‚‘⁄œﬂ£¨√ª”–±®æØ)
     49                                 Card:OFF(…‰∆µø®…Ë±∏¿Îœﬂ)
     50                                         (¥À––ø’∞◊£¨“ÚŒ™…‰∆µø®…Ë±∏¿Îœﬂ£¨À˘“‘√ª”–ID–≈œ¢)
     51            
     52            …Ë±∏‘⁄œﬂºÏ≤‚£∫
     53                ÷˜“™ «TransmitApp_DeviceNWKCheck(void)∫Ø ˝¿¥ºÏ≤‚∏˜∏ˆ…Ë±∏ «∑Ò‘⁄œﬁ∂®µƒ ±º‰ƒ⁄
     54                ∑¢ÀÕ ˝æ›£¨»Áπ˚≥¨ ±£¨≈–∂®…Ë±∏¿Îœﬂ°£»Áπ˚…Ë±∏∑¢ÀÕ ˝æ›£¨ƒ«√¥œ‡”¶µƒdeviceInfo_t
     55                Ω·ππÃÂ÷–µƒdeviceNWKStatus±Íº«Œ™1£¨»Áπ˚≥¨ ±£¨±Íº«Œ™0£¨œ‘ æ≤ø∑÷µƒ∫Ø ˝÷ª–Ë∂¡
     56                »°…Ë±∏µƒÕ¯¬Á◊¥Ã¨æÕø…“‘≈–∂® «∑Ò¿Îœﬂ¡À°£
     57          *******************************************************************************/
     58          
     59          /*******************************************************************************
     60           * INCLUDES
     61           */
     62          #include "OSAL.h"
     63          #include "AF.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          #include "nwk_util.h"
     67          
     68          #include "TransmitApp.h"
     69          #include "OnBoard.h"
     70          
     71          #include "DebugTrace.h"
     72          #include "string.h"
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          
     80          /*******************************************************************************
     81           * MACROS
     82           */
     83          
     84          // …Ë±∏¿Îœﬂ∂® ±º∆ ˝¡ŸΩÁ÷µ
     85          #define  DEVICE_NWK_CNT_LIMIT 3
     86          
     87          // Send with or without APS ACKs
     88          #define TRANSMITAPP_TX_OPTIONS              AF_DISCV_ROUTE
     89          
     90          // µ⁄“ª¥ŒLCDœ‘ æ—” ±
     91          #define TRANSMITAPP_DISPLAY_DELAY           10000
     92          // LCD√ø¥Œœ‘ æ ±º‰º‰∏Ù
     93          #define TRANSMITAPP_DISPLAY_TIMER           2000
     94          
     95          #define TRANSMITAPP_DEVICE_CHECK_DELAY      5000
     96          #define TRANSMITAPP_DEVICE_CHECK_TIMER      2000 
     97          // not used here
     98          #define TRANSMITAPP_MATCH_TIMER     
     99          // not used here
    100          #define TRANSMITAPP_BIND_TIMER      
    101          
    102          #if defined ( TRANSMITAPP_FRAGMENTED )
    103          #define TRANSMITAPP_MAX_DATA_LEN            225
    104          #else
    105          #define TRANSMITAPP_MAX_DATA_LEN            102
    106          #endif
    107          
    108          /*******************************************************************************
    109           * GLOBAL VARIABLES
    110           */
    111          
    112          // This is the buffer that is sent out as data.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
    114          
    115          // This is the Cluster ID List and should be filled with Application
    116          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    117          const cId_t TransmitApp_InClusterList[TRANSMITAPP_MAX_INCLUSTERS] =
   \                     TransmitApp_InClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0500         DW 5
   \   00000A   0600         DW 6
   \   00000C   0700         DW 7
   \   00000E   0800         DW 8
    118          {
    119            TRANSMITAPP_CLUSTERID_HUMITMSG,      // Œ¬ ™∂»
    120            TRANSMITAPP_CLUSTERID_TEMPLIGHTMSG,  // Œ¬∂»π‚’’
    121            TRANSMITAPP_CLUSTERID_RFIDMSG,       // …‰∆µø®
    122            TRANSMITAPP_CLUSTERID_GASFLAMEMSG,   // ∆¯ÃÂª—Ê
    123            TRANSMITAPP_CLUSTERID_INFRAREDMSG,   // »ÀÃÂ∫ÏÕ‚
    124            TRANSMITAPP_CLUSTERID_SOUNDVBMSG,    // …˘“Ù’∂Ø
    125            TRANSMITAPP_CLUSTERID_MOTORSTATUSMSG,// µÁª˙◊¥Ã¨
    126            TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG // ºÃµÁ∆˜◊¥Ã¨
    127          };
    128          

   \                                 In  segment XDATA_ROM_C, align 1
    129          const cId_t TransmitApp_OutClusterList[TRANSMITAPP_MAX_OUTCLUSTERS] =
   \                     TransmitApp_OutClusterList:
   \   000000   0900         DW 9
   \   000002   0A00         DW 10
   \   000004   0B00         DW 11
    130          {
    131            TRANSMITAPP_CLUSTERID_TESTMSG,    
    132            TRANSMITAPP_CLUSTERID_RELAYCTLMSG,   // ºÃµÁ∆˜
    133            TRANSMITAPP_CLUSTERID_MOTORCTLMSG    // ÷±¡˜µÁª˙
    134          };
    135          

   \                                 In  segment XDATA_ROM_C, align 1
    136          const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
   \                     TransmitApp_SimpleDesc:
   \   000000   01           DB 1
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   08           DB 8
   \   000007   ....         DW TransmitApp_InClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW TransmitApp_OutClusterList
    137          {
    138            TRANSMITAPP_ENDPOINT,                //  int    Endpoint;
    139            TRANSMITAPP_PROFID,                  //  uint16 AppProfId[2];
    140            TRANSMITAPP_DEVICEID,                //  uint16 AppDeviceId[2];
    141            TRANSMITAPP_DEVICE_VERSION,          //  int    AppDevVer:4;
    142            TRANSMITAPP_FLAGS,                   //  int    AppFlags:4;
    143            TRANSMITAPP_MAX_INCLUSTERS,          
    144            (cId_t *)TransmitApp_InClusterList,  
    145            TRANSMITAPP_MAX_OUTCLUSTERS,         
    146            (cId_t *)TransmitApp_OutClusterList  
    147          };
    148          
    149          // This is the Endpoint/Interface description.  It is defined here, but
    150          // filled-in in TransmitApp_Init().  Another way to go would be to fill
    151          // in the structure here and make it a "const" (in code space).  The
    152          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          endPointDesc_t TransmitApp_epDesc;    // ∂®“ÂΩ⁄µ„
   \                     TransmitApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    154          
    155          
    156          /*******************************************************************************
    157           *¥Æø⁄≈‰÷√
    158           */
    159          #define TRANSMIT_APP_PORT  0
    160          // zstack default: 38400
    161          #define TRANSMIT_APP_BAUD  HAL_UART_BR_38400
    162          // When the Rx buf space is less than this threshold, invoke the Rx callback.
    163          #define TRANSMIT_APP_THRESH  64
    164          #define TRANSMIT_APP_RX_SZ  128
    165          #define TRANSMIT_APP_TX_SZ  128
    166          // Millisecs of idle time after a byte is received before invoking Rx callback.
    167          #define TRANSMIT_APP_IDLE  6
    168          // Loopback Rx bytes to Tx for throughput testing.
    169          #define TRANSMIT_APP_LOOPBACK  FALSE
    170          
    171          /*********************************************************************
    172           * LOCAL VARIABLES
    173           */
    174          // Œ¬ ™∂»ª∫¥Ê, µ⁄“ª∏ˆ◊÷Ω⁄ « ™∂»£¨µ⁄∂˛∏ˆ◊÷Ω⁄ «Œ¬∂»(æ˘ «’˚ ˝)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          deviceInfo_t Humit;
   \                     Humit:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    176          // Œ¬∂»π‚’’ª∫¥Ê, «∞¡Ω∏ˆ◊÷Ω⁄ «Œ¬∂»’˚ ˝∫Õ–° ˝, ∫Û¡Ω∏ˆ◊÷Ω⁄ «π‚’’µƒ16Œª’˚ ˝ 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          deviceInfo_t TempLight;
   \                     TempLight:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    178          // RFID –≈œ¢

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          deviceInfo_t RfID;
   \                     RfID:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    180          //∆¯ÃÂª—Ê

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          deviceInfo_t gasFlame;
   \                     gasFlame:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    182          //»ÀÃÂ∫ÏÕ‚

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          deviceInfo_t infrared;
   \                     infrared:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    184          //µÁª˙◊¥Ã¨

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          deviceInfo_t motor;
   \                     motor:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    186          //ºÃµÁ∆˜◊¥Ã¨

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          deviceInfo_t relay;
   \                     relay:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    188          //…˘“Ù’∂Ø

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          deviceInfo_t soundVb;
   \                     soundVb:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    190          
    191          // Task ID for event processing - received when TransmitApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          byte TransmitApp_TaskID;
   \                     TransmitApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          static byte TransmitApp_RelayTransID;  // This is the unique message ID (counter)
   \                     TransmitApp_RelayTransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          static byte TransmitApp_MotorTransID;  // This is the unique message ID (counter)
   \                     TransmitApp_MotorTransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    196          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          afAddrType_t TransmitApp_DstAddr;
   \                     TransmitApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    198          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          afAddrType_t TransmitApp_DstRelayAddr;
   \                     TransmitApp_DstRelayAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          afAddrType_t TransmitApp_DstMotorAddr;
   \                     TransmitApp_DstMotorAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    202          
    203          // Max Data Request Length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          uint16 TransmitApp_MaxDataLength;
   \                     TransmitApp_MaxDataLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    205          
    206          // LCDœ‘ æ

   \                                 In  segment XDATA_I, align 1, keep-with-next
    207          static uint8 dispPage=1;
   \                     dispPage:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for dispPage>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static uint8 scrollLine=0;
   \                     scrollLine:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209          //LCD∆¡ƒªπˆ∂Øø™πÿ

   \                                 In  segment XDATA_I, align 1, keep-with-next
    210          static uint8 autoScrollEnable=1;
   \                     autoScrollEnable:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for autoScrollEnable>`
   \   000001                REQUIRE __INIT_XDATA_I
    211          
    212          /*******************************************************************************
    213           * LOCAL FUNCTIONS
    214           */
    215          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    216          void TransmitApp_HandleKeys( byte shift, byte keys );
    217          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    218          void TransmitApp_SendToRelayMSG( uint8 cmd );
    219          void TransmitApp_SendToMotorMSG( uint8 cmd,uint8 speed );
    220          void TransmitAPP_CallBack(uint8 port, uint8 event);
    221          void TransmitApp_DisplayResults( uint8 dispPage, uint8 *scrollLine);
    222          void TransmitApp_DeviceNWKCheck(void);
    223          
    224          /*******************************************************************************
    225           * @fn      TransmitApp_Init
    226           *
    227           * @brief   Initialization function for the Generic App Task.
    228           *          This is called during initialization and should contain
    229           *          any application specific initialization (ie. hardware
    230           *          initialization/setup, table initialization, power up
    231           *          notificaiton ... ).
    232           *
    233           * @param   task_id - the ID assigned by OSAL.  This ID should be
    234           *                    used to send messages and set timers.
    235           *
    236           * @return  none
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          void TransmitApp_Init( byte task_id )
   \                     TransmitApp_Init:
    239          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    240          #if HAL_UART==TRUE
    241            halUARTCfg_t uartConfig;
    242          
    243            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
    244            uartConfig.baudRate             = TRANSMIT_APP_BAUD;
    245            uartConfig.flowControl          = FALSE;
    246            uartConfig.flowControlThreshold = TRANSMIT_APP_THRESH; // 2x30 don't care - see uart driver.
    247            uartConfig.rx.maxBufSize        = TRANSMIT_APP_RX_SZ;  // 2x30 don't care - see uart driver.
    248            uartConfig.tx.maxBufSize        = TRANSMIT_APP_TX_SZ;  // 2x30 don't care - see uart driver.
    249            uartConfig.idleTimeout          = TRANSMIT_APP_IDLE;   // 2x30 don't care - see uart driver.
    250            uartConfig.intEnable            = FALSE;              // 2x30 don't care - see uart driver.
    251            uartConfig.callBackFunc         = TransmitAPP_CallBack;
    252            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
    253          #endif
    254            
    255          #if !defined ( TRANSMITAPP_FRAGMENTED )
    256            afDataReqMTU_t mtu;
    257          #endif
    258            uint16 i;
    259          
    260            TransmitApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
    261            TransmitApp_RelayTransID = 0;
   \   00000F   90....       MOV     DPTR,#TransmitApp_RelayTransID
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    262            TransmitApp_MotorTransID = 0;
   \   000014   90....       MOV     DPTR,#TransmitApp_MotorTransID
   \   000017   F0           MOVX    @DPTR,A
    263          
    264            // Device hardware initialization can be added here or in main() (Zmain.c).
    265            // If the hardware is application specific - add it here.
    266            // If the hardware is other parts of the device add it in main().
    267          
    268            //TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
    269            //TransmitApp_DstAddr.endPoint = 0;
    270            //TransmitApp_DstAddr.addr.shortAddr = 0;
    271          
    272            // Fill out the endpoint description.
    273            // ≥ı ºªØΩ⁄µ„
    274            TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;   // ∂Àø⁄∫≈
   \   000018   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00001B   04           INC     A
   \   00001C   F0           MOVX    @DPTR,A
    275            TransmitApp_epDesc.task_id = &TransmitApp_TaskID;     // »ŒŒÒID
   \   00001D   A3           INC     DPTR
   \   00001E   74..         MOV     A,#TransmitApp_TaskID & 0xff
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   74..         MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
   \   000024   F0           MOVX    @DPTR,A
    276            TransmitApp_epDesc.simpleDesc                         // ºÚµ•√Ë ˆ∑˚¿¥√Ë ˆ∂Àø⁄
    277                      = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
   \   000025   A3           INC     DPTR
   \   000026   74..         MOV     A,#TransmitApp_SimpleDesc & 0xff
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   74..         MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
   \   00002C   F0           MOVX    @DPTR,A
    278            TransmitApp_epDesc.latencyReq = noLatencyReqs;
   \   00002D   A3           INC     DPTR
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    279          
    280            // Register the endpoint/interface description with the AF
    281            afRegister( &TransmitApp_epDesc );
   \   000030                ; Setup parameters for call to function afRegister
   \   000030   7A..         MOV     R2,#TransmitApp_epDesc & 0xff
   \   000032   7B..         MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
   \   000034   12....       LCALL   ??afRegister?relay
    282          
    283            // Register for all key events - This app will handle all key events
    284            RegisterForKeys( TransmitApp_TaskID );
   \   000037                ; Setup parameters for call to function RegisterForKeys
   \   000037   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??RegisterForKeys?relay
    285          
    286            // Update the display
    287          #if defined ( LCD_SUPPORTED )
    288            HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
   \   00003F                ; Setup parameters for call to function HalLcdWriteString
   \   00003F   7902         MOV     R1,#0x2
   \   000041   7A..         MOV     R2,#`?<Constant "TransmitApp">` & 0xff
   \   000043   7B..         MOV     R3,#(`?<Constant "TransmitApp">` >> 8) & 0xff
   \   000045   12....       LCALL   ??HalLcdWriteString?relay
    289          #endif
    290          
    291            // Set the data length
    292          #if defined ( TRANSMITAPP_FRAGMENTED )
    293            TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
    294          #else
    295            mtu.kvp        = FALSE;
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    296            mtu.aps.secure = FALSE;
   \   000050   04           INC     A
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E4           CLR     A
   \   000055   F0           MOVX    @DPTR,A
    297            TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
   \   000056                ; Setup parameters for call to function afDataReqMTU
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   AA82         MOV     R2,DPL
   \   00005E   AB83         MOV     R3,DPH
   \   000060   12....       LCALL   ??afDataReqMTU?relay
   \   000063   E9           MOV     A,R1
   \   000064   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    298          #endif
    299          
    300            // ∑¢ÀÕ ˝æ›«Â¡„
    301            for (i = 0; i < TransmitApp_MaxDataLength; i++)
   \   00006B   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6014         JZ      ??TransmitApp_Init_0
    302            {
    303              TransmitApp_Msg[i] = 0;
   \   000071   F8           MOV     R0,A
   \   000072   7900         MOV     R1,#0x0
   \   000074   90....       MOV     DPTR,#TransmitApp_Msg
   \                     ??TransmitApp_Init_1:
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E8           MOV     A,R0
   \   00007B   24FF         ADD     A,#-0x1
   \   00007D   18           DEC     R0
   \   00007E   E9           MOV     A,R1
   \   00007F   34FF         ADDC    A,#-0x1
   \   000081   F9           MOV     R1,A
   \   000082   48           ORL     A,R0
   \   000083   70F2         JNZ     ??TransmitApp_Init_1
    304            }
    305          
    306            // ◊¢≤·¡Ω∏ˆMSG
    307            // ∞Û∂®–Ë“™“ª÷÷º¥ø…, Œﬁ–Ë¡Ω÷÷?????
    308            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
   \                     ??TransmitApp_Init_0:
   \   000085                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000085   7A20         MOV     R2,#0x20
   \   000087   7B80         MOV     R3,#-0x80
   \   000089   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    309            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
   \   000091                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000091   7A06         MOV     R2,#0x6
   \   000093   7B80         MOV     R3,#-0x80
   \   000095   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    310            
    311            // ¥Úø™œ‘ æ£¨µ⁄“ª¥Œ—” ±÷‹∆⁄Ωœ≥§
    312            osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DISPLAY_EVT, 
    313                                TRANSMITAPP_DISPLAY_DELAY);
   \   00009D                ; Setup parameters for call to function osal_start_timerEx
   \   00009D   7C10         MOV     R4,#0x10
   \   00009F   7D27         MOV     R5,#0x27
   \   0000A1   12....       LCALL   ?Subroutine11 & 0xFFFF
    314            
    315            // ¥Úø™…Ë±∏‘⁄œﬂºÏ≤‚£¨µ⁄“ª¥Œø™∆ÙºÏ≤‚—” ±Ωœ≥§ ±º‰
    316            osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DEVICE_CHECK_EVT, 
    317                                TRANSMITAPP_DEVICE_CHECK_DELAY);
   \                     ??CrossCallReturnLabel_61:
   \   0000A4                ; Setup parameters for call to function osal_start_timerEx
   \   0000A4   7C88         MOV     R4,#-0x78
   \   0000A6   7D13         MOV     R5,#0x13
   \   0000A8   7A80         MOV     R2,#-0x80
   \   0000AA   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    318            
    319            // πÿ±’LEDµ∆(D4)£¨±Ì æ–≠µ˜∆˜ƒ¨»œ≤ª‘ –Ì◊ÈÕ¯
    320            NLME_PermitJoiningRequest(0x00);
   \                     ??CrossCallReturnLabel_63:
   \   0000AD                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   0000AD   7900         MOV     R1,#0x0
   \   0000AF   12....       LCALL   ??NLME_PermitJoiningRequest?relay
    321            HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
   \   0000B2                ; Setup parameters for call to function HalLedSet
   \   0000B2   7A00         MOV     R2,#0x0
   \   0000B4   7901         MOV     R1,#0x1
   \   0000B6   12....       LCALL   ??HalLedSet?relay
    322            
    323            // …Ë±∏¿Îœﬂ◊¥Ã¨ºÏ≤‚≥ı ºªØ£¨≥ı ºªØŒ™¿Îœﬂ
    324            Humit.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
   \   0000B9   90....       MOV     DPTR,#Humit
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   F0           MOVX    @DPTR,A
    325            TempLight.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   0000BF   90....       MOV     DPTR,#TempLight
   \   0000C2   F0           MOVX    @DPTR,A
    326            RfID.deviceNWKStatus      = DEVICE_NWK_OFFLINE;
   \   0000C3   90....       MOV     DPTR,#RfID
   \   0000C6   F0           MOVX    @DPTR,A
    327            gasFlame.deviceNWKStatus  = DEVICE_NWK_OFFLINE;
   \   0000C7   90....       MOV     DPTR,#gasFlame
   \   0000CA   F0           MOVX    @DPTR,A
    328            infrared.deviceNWKStatus  = DEVICE_NWK_OFFLINE;
   \   0000CB   90....       MOV     DPTR,#infrared
   \   0000CE   F0           MOVX    @DPTR,A
    329            soundVb.deviceNWKStatus   = DEVICE_NWK_OFFLINE;
   \   0000CF   90....       MOV     DPTR,#soundVb
   \   0000D2   F0           MOVX    @DPTR,A
    330            motor.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
   \   0000D3   90....       MOV     DPTR,#motor
   \   0000D6   F0           MOVX    @DPTR,A
    331            relay.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
   \   0000D7   90....       MOV     DPTR,#relay
   \   0000DA   F0           MOVX    @DPTR,A
    332          }
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DE                REQUIRE ?Subroutine0
   \   0000DE                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A10         MOV     R2,#0x10
   \   000002                REQUIRE ??Subroutine30_0
   \   000002                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET
    333          
    334          /*******************************************************************************
    335           * @fn      TransmitApp_ProcessEvent
    336           *
    337           * @brief   Generic Application Task event processor.  This function
    338           *          is called to process all events for the task.  Events
    339           *          include timers, messages and any other user defined events.
    340           *
    341           * @param   task_id  - The OSAL assigned task ID.
    342           * @param   events - events to process.  This is a bit map and can
    343           *                   contain more than one event.
    344           *
    345           * @return  none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
   \                     TransmitApp_ProcessEvent:
    348          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    349            afIncomingMSGPacket_t *MSGpkt;
    350            afDataConfirm_t *afDataConfirm;
    351            (void)task_id;  // Intentionally unreferenced parameter
    352          
    353            // Data Confirmation message fields
    354            ZStatus_t sentStatus;
    355            byte sentEP;
    356          
    357            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   604D         JZ      ??TransmitApp_ProcessEvent_0
    358            {
    359              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   800E         SJMP    ??TransmitApp_ProcessEvent_1
    360              while ( MSGpkt )
    361              {
    362                switch ( MSGpkt->hdr.event )
    363                {
    364                  case ZDO_CB_MSG:
    365                    TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    366                    break;
    367          
    368                  case KEY_CHANGE:
    369                    TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    370                    break;
    371          
    372                  case AF_DATA_CONFIRM_CMD:
    373                    // This message is received as a confirmation of a data packet sent.
    374                    // The status is of ZStatus_t type [defined in ZComDef.h]
    375                    // The message fields are defined in AF.h
    376                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    377                    sentEP = afDataConfirm->endpoint;
    378                    sentStatus = afDataConfirm->hdr.status;
    379           
    380                    if ( (ZSuccess == sentStatus) &&
    381                         (TransmitApp_epDesc.endPoint == sentEP) )
    382                    {  
    383                    }
    384                    break;
    385          
    386                  case AF_INCOMING_MSG_CMD:
    387                    TransmitApp_MessageMSGCB( MSGpkt );
   \                     ??TransmitApp_ProcessEvent_2:
   \   00000F                ; Setup parameters for call to function TransmitApp_MessageMSGCB
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   AB..         MOV     R3,?V0 + 1
   \   000013   12....       LCALL   ??TransmitApp_MessageMSGCB?relay
    388                    break;
    389          
    390                  case ZDO_STATE_CHANGE:
    391                    break;
    392          
    393                  default:
    394                    break;
    395                }
    396          
    397                // Release the memory
    398                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TransmitApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   AA..         MOV     R2,?V0 + 0
   \   000018   AB..         MOV     R3,?V0 + 1
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    399          
    400                // Next
    401                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??TransmitApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 0,R2
   \   000027   8B..         MOV     ?V0 + 1,R3
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   45..         ORL     A,?V0 + 1
   \   00002D   6023         JZ      ??TransmitApp_ProcessEvent_4
   \   00002F   85..82       MOV     DPL,?V0 + 0
   \   000032   85..83       MOV     DPH,?V0 + 1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   60D5         JZ      ??TransmitApp_ProcessEvent_2
   \   00003A   245A         ADD     A,#0x5a
   \   00003C   70D8         JNZ     ??TransmitApp_ProcessEvent_3
   \   00003E                ; Setup parameters for call to function TransmitApp_HandleKeys
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FA           MOV     R2,A
   \   000043   85..82       MOV     DPL,?V0 + 0
   \   000046   85..83       MOV     DPH,?V0 + 1
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   ??TransmitApp_HandleKeys?relay
   \   000050   80C4         SJMP    ??TransmitApp_ProcessEvent_3
    402              }
    403          
    404              // Squash compiler warnings until values are used.
    405              (void)sentStatus;
    406              (void)sentEP;
    407          
    408              // Return unprocessed events
    409              return (events ^ SYS_EVENT_MSG);
   \                     ??TransmitApp_ProcessEvent_4:
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   6480         XRL     A,#0x80
   \                     ??TransmitApp_ProcessEvent_5:
   \   000057   FB           MOV     R3,A
   \   000058   8064         SJMP    ??TransmitApp_ProcessEvent_6
    410            }
    411          
    412            // Send a message out, ±æ µ—È–≠µ˜∆˜√ª”–÷‹∆⁄∑¢ÀÕ ˝»ŒŒÒ
    413            if ( events & TRANSMITAPP_SEND_MSG_EVT )
   \                     ??TransmitApp_ProcessEvent_0:
   \   00005A   EE           MOV     A,R6
   \   00005B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005D   5005         JNC     ??TransmitApp_ProcessEvent_7
    414            {      
    415              // Return unprocessed events
    416              return (events ^ TRANSMITAPP_SEND_MSG_EVT);
   \   00005F   6401         XRL     A,#0x1
   \                     ??TransmitApp_ProcessEvent_8:
   \   000061   FA           MOV     R2,A
   \   000062   805A         SJMP    ??TransmitApp_ProcessEvent_6
    417            }
    418            
    419            // …Ë±∏◊¥Ã¨ºÏ≤È ¬º˛
    420            if ( events & TRANSMITAPP_DEVICE_CHECK_EVT )
   \                     ??TransmitApp_ProcessEvent_7:
   \   000064   5480         ANL     A,#0x80
   \   000066   6013         JZ      ??TransmitApp_ProcessEvent_9
    421            {
    422              // µ˜”√…Ë±∏Õ¯¬Á◊¥Ã¨º‡≤‚∫Ø ˝
    423              TransmitApp_DeviceNWKCheck(); 
   \   000068                ; Setup parameters for call to function TransmitApp_DeviceNWKCheck
   \   000068   12....       LCALL   ??TransmitApp_DeviceNWKCheck?relay
    424              
    425              // »ŒŒÒ–Ë“™÷‹∆⁄–‘‘À––
    426              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DEVICE_CHECK_EVT, 
    427                                  TRANSMITAPP_DEVICE_CHECK_TIMER);
   \   00006B                ; Setup parameters for call to function osal_start_timerEx
   \   00006B   7CD0         MOV     R4,#-0x30
   \   00006D   7D07         MOV     R5,#0x7
   \   00006F   7A80         MOV     R2,#-0x80
   \   000071   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    428              
    429              // Return unprocessed events
    430              return (events ^ TRANSMITAPP_DEVICE_CHECK_EVT);
   \                     ??CrossCallReturnLabel_64:
   \   000074   EE           MOV     A,R6
   \   000075   6480         XRL     A,#0x80
   \                     ??TransmitApp_ProcessEvent_10:
   \   000077   FA           MOV     R2,A
   \   000078   EF           MOV     A,R7
   \   000079   80DC         SJMP    ??TransmitApp_ProcessEvent_5
    431            }
    432           
    433          
    434            // LCDœ‘ æ ¬º˛
    435            if ( events & TRANSMITAPP_DISPLAY_EVT )
   \                     ??TransmitApp_ProcessEvent_9:
   \   00007B   EE           MOV     A,R6
   \   00007C   5410         ANL     A,#0x10
   \   00007E   6026         JZ      ??TransmitApp_ProcessEvent_11
    436            {
    437              // »Áπ˚πˆ∆¡π¶ƒ‹¥Úø™£¨◊‘∂ØœÚ…œπˆ∂Ø“ª––
    438              if (autoScrollEnable == 1)
   \   000080   90....       MOV     DPTR,#autoScrollEnable
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6401         XRL     A,#0x1
   \   000086   7006         JNZ     ??TransmitApp_ProcessEvent_12
    439              {
    440                  scrollLine++;
   \   000088   90....       MOV     DPTR,#scrollLine
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   04           INC     A
   \   00008D   F0           MOVX    @DPTR,A
    441              }
    442              // À¢–¬œ‘ æ ˝æ›
    443              TransmitApp_DisplayResults( dispPage, &scrollLine);
   \                     ??TransmitApp_ProcessEvent_12:
   \   00008E                ; Setup parameters for call to function TransmitApp_DisplayResults
   \   00008E   7A..         MOV     R2,#scrollLine & 0xff
   \   000090   7B..         MOV     R3,#(scrollLine >> 8) & 0xff
   \   000092   90....       MOV     DPTR,#dispPage
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   ??TransmitApp_DisplayResults?relay
    444              
    445              // ÷‹∆⁄–‘µƒµ˜”√∏√ ¬º˛¿¥À¢–¬œ‘ æ ˝æ›
    446              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DISPLAY_EVT, 
    447                                  TRANSMITAPP_DISPLAY_TIMER );   
   \   00009A                ; Setup parameters for call to function osal_start_timerEx
   \   00009A   7CD0         MOV     R4,#-0x30
   \   00009C   7D07         MOV     R5,#0x7
   \   00009E   12....       LCALL   ?Subroutine11 & 0xFFFF
    448              // Return unprocessed events
    449              return (events ^ TRANSMITAPP_DISPLAY_EVT);
   \                     ??CrossCallReturnLabel_62:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   6410         XRL     A,#0x10
   \   0000A4   80D1         SJMP    ??TransmitApp_ProcessEvent_10
    450            }
    451          
    452            // TRANSMITAPP_MATCHRSP_EVT ¬º˛‘§¡Ù
    453            if ( events & TRANSMITAPP_MATCHRSP_EVT )
   \                     ??TransmitApp_ProcessEvent_11:
   \   0000A6   EE           MOV     A,R6
   \   0000A7   5408         ANL     A,#0x8
   \   0000A9   6005         JZ      ??TransmitApp_ProcessEvent_13
    454            {  
    455              return (events ^ TRANSMITAPP_MATCHRSP_EVT);
   \   0000AB   EE           MOV     A,R6
   \   0000AC   6408         XRL     A,#0x8
   \   0000AE   80B1         SJMP    ??TransmitApp_ProcessEvent_8
    456            }
    457            // TRANSMITAPP_BINDRSP_EVT ¬º˛‘§¡Ù
    458            if ( events & TRANSMITAPP_BINDRSP_EVT )
   \                     ??TransmitApp_ProcessEvent_13:
   \   0000B0   EE           MOV     A,R6
   \   0000B1   5420         ANL     A,#0x20
   \   0000B3   6005         JZ      ??TransmitApp_ProcessEvent_14
    459            {
    460              return (events ^ TRANSMITAPP_BINDRSP_EVT);
   \   0000B5   EE           MOV     A,R6
   \   0000B6   6420         XRL     A,#0x20
   \   0000B8   80A7         SJMP    ??TransmitApp_ProcessEvent_8
    461            }
    462            
    463            // Discard unknown events
    464            return 0;
   \                     ??TransmitApp_ProcessEvent_14:
   \   0000BA   7A00         MOV     R2,#0x0
   \   0000BC   7B00         MOV     R3,#0x0
   \                     ??TransmitApp_ProcessEvent_6:
   \   0000BE   7F04         MOV     R7,#0x4
   \   0000C0   02....       LJMP    ?BANKED_LEAVE_XDATA
    465          }
    466          
    467          /*******************************************************************************
    468           * Event Generation Functions
    469           */
    470          /*******************************************************************************
    471           * @fn      TransmitApp_ProcessZDOMsgs()
    472           *
    473           * @brief   Process response messages
    474           *
    475           * @param   none
    476           *
    477           * @return  none
    478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOMsgs:
    480          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    481            /*
    482            switch ( inMsg->clusterID )
    483            {
    484              // ∞Û∂®–≈œ¢¥¶¿Ì
    485              case End_Device_Bind_rsp:
    486                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    487                {
    488                  osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BINDRSP_EVT);
    489          #if defined ( LCD_SUPPORTED )
    490                  HalLcdWriteString( "BindSuccess", HAL_LCD_LINE_3 );
    491          #endif
    492                }
    493                break;
    494          
    495              // √Ë ˆ∑˚∆•≈‰–≈œ¢¥¶¿Ì 
    496              case Match_Desc_rsp:
    497                ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    498                if ( pRsp )
    499                {
    500                  if ( pRsp->status == ZSuccess && pRsp->cnt )
    501                  {
    502                    osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_MATCHRSP_EVT);
    503          
    504          #if defined ( LCD_SUPPORTED )
    505                    HalLcdWriteString( "MatchSuccess", HAL_LCD_LINE_3 );
    506          #endif
    507                   }
    508                   osal_mem_free( pRsp );
    509                }
    510                break;
    511            }*/
    512          }
   \   000000   02....       LJMP    ?BRET
    513          
    514          /*******************************************************************************
    515           * @fn      TransmitApp_HandleKeys
    516           *
    517           * @brief   Handles all key events for this device.
    518           *
    519           * @param   shift - true if in shift/alt.
    520           * @param   keys - bit field for key events. Valid entries:
    521           *                 HAL_KEY_SW_1--UP
    522           *                 HAL_KEY_SW_2--RIGHT
    523           *                 HAL_KEY_SW_3--DOWN
    524           *                 HAL_KEY_SW_4--LEFT
    525           *                 HAL_KEY_SW_5--OK
    526           *                 HAL_KEY_SW_7--CANCEL
    527           *
    528           * @return  none
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          void TransmitApp_HandleKeys( byte shift, byte keys )
   \                     TransmitApp_HandleKeys:
    531          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    532            static uint8 dispCnt ;
    533            static uint8 relayCmd;
    534            static uint8 relayStatusCnt = 0;
    535            static uint8 motorStatusCnt = 0;
    536            static uint8 networkPermitEn = 0;
    537              
    538            //  ÷∂Ø π∆¡ƒªœÚ…œπˆ∂Ø(HAL_KEY_SW_1--UP)
    539            if ( keys & HAL_KEY_UP )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5006         JNC     ??TransmitApp_HandleKeys_0
    540            {
    541              scrollLine--;
   \   00000B   90....       MOV     DPTR,#scrollLine
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   F0           MOVX    @DPTR,A
    542            }
    543              
    544            // ºÃµÁ∆˜øÿ÷∆(HAL_KEY_SW_2--RIGHT)£¨π≤4÷÷◊¥Ã¨
    545            if ( keys & HAL_KEY_RIGHT )
   \                     ??TransmitApp_HandleKeys_0:
   \   000011   EE           MOV     A,R6
   \   000012   A2E1         MOV     C,0xE0 /* A   */.1
   \   000014   5041         JNC     ??TransmitApp_HandleKeys_1
    546            {
    547              relayStatusCnt++;
    548              // ºÃµÁ∆˜”–Àƒ÷÷◊¥Ã¨
    549              relayStatusCnt = relayStatusCnt % 4;
   \   000016   90....       MOV     DPTR,#??relayStatusCnt
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   04           INC     A
   \   00001B   5403         ANL     A,#0x3
   \   00001D   F0           MOVX    @DPTR,A
    550              
    551              switch(relayStatusCnt)
   \   00001E   600B         JZ      ??TransmitApp_HandleKeys_2
   \   000020   14           DEC     A
   \   000021   600F         JZ      ??TransmitApp_HandleKeys_3
   \   000023   14           DEC     A
   \   000024   6013         JZ      ??TransmitApp_HandleKeys_4
   \   000026   14           DEC     A
   \   000027   6017         JZ      ??TransmitApp_HandleKeys_5
   \   000029   801B         SJMP    ??TransmitApp_HandleKeys_6
    552              {
    553                case 0:
    554                  relayCmd = 0x01;  // K1ø™£¨K2√ª”–≤Ÿ◊˜(◊¥Ã¨±£≥÷≤ª±‰)
   \                     ??TransmitApp_HandleKeys_2:
   \   00002B   90....       MOV     DPTR,#??relayCmd
   \   00002E   7401         MOV     A,#0x1
   \   000030   8013         SJMP    ??TransmitApp_HandleKeys_7
    555                  break;
    556                case 1:
    557                  relayCmd = 0x02;  // K1πÿ£¨K2√ª”–≤Ÿ◊˜(◊¥Ã¨±£≥÷≤ª±‰)
   \                     ??TransmitApp_HandleKeys_3:
   \   000032   90....       MOV     DPTR,#??relayCmd
   \   000035   7402         MOV     A,#0x2
   \   000037   800C         SJMP    ??TransmitApp_HandleKeys_7
    558                  break;
    559                case 2:
    560                  relayCmd = 0x20;  // K1≤ª±‰£¨K2ø™
   \                     ??TransmitApp_HandleKeys_4:
   \   000039   90....       MOV     DPTR,#??relayCmd
   \   00003C   7420         MOV     A,#0x20
   \   00003E   8005         SJMP    ??TransmitApp_HandleKeys_7
    561                  break;
    562                case 3:
    563                  relayCmd = 0x10;  // K1≤ª±‰£¨K2πÿ
   \                     ??TransmitApp_HandleKeys_5:
   \   000040   90....       MOV     DPTR,#??relayCmd
   \   000043   7410         MOV     A,#0x10
   \                     ??TransmitApp_HandleKeys_7:
   \   000045   F0           MOVX    @DPTR,A
    564                  break;
    565                default:
    566                  break;
    567              }
    568              
    569              // ∑¢ÀÕºÃµÁ∆˜øÿ÷∆√¸¡Ó
    570              TransmitApp_SendToRelayMSG( relayCmd );   
   \                     ??TransmitApp_HandleKeys_6:
   \   000046                ; Setup parameters for call to function TransmitApp_SendToRelayMSG
   \   000046   90....       MOV     DPTR,#??relayCmd
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??TransmitApp_SendToRelayMSG?relay
    571                
    572          #if defined ( LCD_SUPPORTED )
    573              HalLcdWriteString( "RelayCtl", HAL_LCD_LINE_4 );
   \   00004E                ; Setup parameters for call to function HalLcdWriteString
   \   00004E   7904         MOV     R1,#0x4
   \   000050   7A..         MOV     R2,#`?<Constant "RelayCtl">` & 0xff
   \   000052   7B..         MOV     R3,#(`?<Constant "RelayCtl">` >> 8) & 0xff
   \   000054   12....       LCALL   ??HalLcdWriteString?relay
    574          #endif
    575              }
    576          
    577            //  ÷∂Ø π∆¡ƒªœÚœ¬πˆ∂Ø(HAL_KEY_SW_3--DOWN)
    578            if ( keys & HAL_KEY_DOWN )
   \                     ??TransmitApp_HandleKeys_1:
   \   000057   EE           MOV     A,R6
   \   000058   A2E4         MOV     C,0xE0 /* A   */.4
   \   00005A   5006         JNC     ??TransmitApp_HandleKeys_8
    579            {
    580              scrollLine++;;
   \   00005C   90....       MOV     DPTR,#scrollLine
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   04           INC     A
   \   000061   F0           MOVX    @DPTR,A
    581            }
    582          
    583            // µÁª˙øÿ÷∆(HAL_KEY_SW_4--LEFT), π≤8÷÷◊¥Ã¨
    584            if ( keys & HAL_KEY_LEFT )
   \                     ??TransmitApp_HandleKeys_8:
   \   000062   EE           MOV     A,R6
   \   000063   A2E3         MOV     C,0xE0 /* A   */.3
   \   000065   504D         JNC     ??TransmitApp_HandleKeys_9
    585            {
    586              motorStatusCnt++;
    587              motorStatusCnt = motorStatusCnt % 8;
   \   000067   90....       MOV     DPTR,#??motorStatusCnt
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   04           INC     A
   \   00006C   5407         ANL     A,#0x7
   \   00006E   F0           MOVX    @DPTR,A
    588              
    589              switch(motorStatusCnt)
   \   00006F   6017         JZ      ??TransmitApp_HandleKeys_10
   \   000071   14           DEC     A
   \   000072   601A         JZ      ??TransmitApp_HandleKeys_11
   \   000074   14           DEC     A
   \   000075   601D         JZ      ??TransmitApp_HandleKeys_12
   \   000077   14           DEC     A
   \   000078   601E         JZ      ??TransmitApp_HandleKeys_13
   \   00007A   14           DEC     A
   \   00007B   600B         JZ      ??TransmitApp_HandleKeys_10
   \   00007D   14           DEC     A
   \   00007E   601C         JZ      ??TransmitApp_HandleKeys_14
   \   000080   14           DEC     A
   \   000081   601D         JZ      ??TransmitApp_HandleKeys_15
   \   000083   14           DEC     A
   \   000084   601E         JZ      ??TransmitApp_HandleKeys_16
   \   000086   8023         SJMP    ??TransmitApp_HandleKeys_17
    590              {
    591                case 0:  
    592                  TransmitApp_SendToMotorMSG(1, 0); // µÁª˙Õ£÷π
   \                     ??TransmitApp_HandleKeys_10:
   \   000088                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   000088   7A00         MOV     R2,#0x0
   \   00008A   7901         MOV     R1,#0x1
   \   00008C   801A         SJMP    ??TransmitApp_HandleKeys_18
    593                  break;
    594                case 1: 
    595                  TransmitApp_SendToMotorMSG(2, 10); // µÁª˙’˝◊™£¨◊™ÀŸ10◊™/√Î
   \                     ??TransmitApp_HandleKeys_11:
   \   00008E                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   00008E   7A0A         MOV     R2,#0xa
   \                     ??TransmitApp_HandleKeys_19:
   \   000090   7902         MOV     R1,#0x2
   \   000092   8014         SJMP    ??TransmitApp_HandleKeys_18
    596                  break;
    597                case 2: 
    598                  TransmitApp_SendToMotorMSG(2, 30); // µÁª˙’˝◊™£¨◊™ÀŸ30◊™/√Î
   \                     ??TransmitApp_HandleKeys_12:
   \   000094                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   000094   7A1E         MOV     R2,#0x1e
   \   000096   80F8         SJMP    ??TransmitApp_HandleKeys_19
    599                  break;
    600                case 3: 
    601                  TransmitApp_SendToMotorMSG(2, 50); // µÁª˙’˝◊™£¨◊™ÀŸ50◊™/√Î
   \                     ??TransmitApp_HandleKeys_13:
   \   000098                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   000098   7A32         MOV     R2,#0x32
   \   00009A   80F4         SJMP    ??TransmitApp_HandleKeys_19
    602                  break;
    603                case 4: 
    604                  TransmitApp_SendToMotorMSG(1, 0); // µÁª˙Õ£÷π
    605                  break;
    606                case 5: 
    607                  TransmitApp_SendToMotorMSG(3, 10); // µÁª˙∑¥◊™£¨◊™ÀŸ10◊™/√Î
   \                     ??TransmitApp_HandleKeys_14:
   \   00009C                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   00009C   7A0A         MOV     R2,#0xa
   \   00009E   8006         SJMP    ??TransmitApp_HandleKeys_20
    608                  break;
    609                case 6: 
    610                  TransmitApp_SendToMotorMSG(3, 30); // µÁª˙∑¥◊™£¨◊™ÀŸ30◊™/∑÷÷”
   \                     ??TransmitApp_HandleKeys_15:
   \   0000A0                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   0000A0   7A1E         MOV     R2,#0x1e
   \   0000A2   8002         SJMP    ??TransmitApp_HandleKeys_20
    611                  break;
    612                case 7: 
    613                  TransmitApp_SendToMotorMSG(3, 50); // µÁª˙∑¥◊™£¨◊™ÀŸ50◊™/∑÷÷”
   \                     ??TransmitApp_HandleKeys_16:
   \   0000A4                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   0000A4   7A32         MOV     R2,#0x32
   \                     ??TransmitApp_HandleKeys_20:
   \   0000A6   7903         MOV     R1,#0x3
   \                     ??TransmitApp_HandleKeys_18:
   \   0000A8   12....       LCALL   ??TransmitApp_SendToMotorMSG?relay
    614                  break;
    615                default:
    616                  break;
    617              }    
    618          #if defined ( LCD_SUPPORTED )
    619              HalLcdWriteString( "MotorCtl", HAL_LCD_LINE_4 );
   \                     ??TransmitApp_HandleKeys_17:
   \   0000AB                ; Setup parameters for call to function HalLcdWriteString
   \   0000AB   7904         MOV     R1,#0x4
   \   0000AD   7A..         MOV     R2,#`?<Constant "MotorCtl">` & 0xff
   \   0000AF   7B..         MOV     R3,#(`?<Constant "MotorCtl">` >> 8) & 0xff
   \   0000B1   12....       LCALL   ??HalLcdWriteString?relay
    620          #endif
    621            }
    622              
    623            // LCD“≥√Ê«–ªª(HAL_KEY_SW_5--OK)£¨π≤4÷÷◊¥Ã¨
    624            if ( keys & HAL_KEY_OK )
   \                     ??TransmitApp_HandleKeys_9:
   \   0000B4   EE           MOV     A,R6
   \   0000B5   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000B7   5042         JNC     ??TransmitApp_HandleKeys_21
    625            {
    626              dispCnt++;
    627              dispCnt = dispCnt % 4;
   \   0000B9   90....       MOV     DPTR,#??dispCnt
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   04           INC     A
   \   0000BE   5403         ANL     A,#0x3
   \   0000C0   F0           MOVX    @DPTR,A
    628              
    629              switch(dispCnt)
   \   0000C1   600B         JZ      ??TransmitApp_HandleKeys_22
   \   0000C3   14           DEC     A
   \   0000C4   6013         JZ      ??TransmitApp_HandleKeys_23
   \   0000C6   14           DEC     A
   \   0000C7   601B         JZ      ??TransmitApp_HandleKeys_24
   \   0000C9   14           DEC     A
   \   0000CA   601F         JZ      ??TransmitApp_HandleKeys_25
   \   0000CC   802D         SJMP    ??TransmitApp_HandleKeys_21
    630              {
    631                case 0:   // µ⁄1∆¡£¨¥Úø™πˆ∆¡
    632                  autoScrollEnable = 1;
   \                     ??TransmitApp_HandleKeys_22:
   \   0000CE   90....       MOV     DPTR,#autoScrollEnable
   \   0000D1   7401         MOV     A,#0x1
   \   0000D3   F0           MOVX    @DPTR,A
    633                  dispPage = 1;
   \   0000D4   90....       MOV     DPTR,#dispPage
   \   0000D7   8021         SJMP    ??TransmitApp_HandleKeys_26
    634                  break;
    635                case 1:   // µ⁄1∆¡£¨πÿ±’πˆ∆¡
    636                  autoScrollEnable = 0;
   \                     ??TransmitApp_HandleKeys_23:
   \   0000D9   90....       MOV     DPTR,#autoScrollEnable
   \   0000DC   E4           CLR     A
   \                     ??TransmitApp_HandleKeys_27:
   \   0000DD   F0           MOVX    @DPTR,A
    637                  dispPage = 1; 
   \   0000DE   90....       MOV     DPTR,#dispPage
   \   0000E1   04           INC     A
   \   0000E2   8016         SJMP    ??TransmitApp_HandleKeys_26
    638                  break;
    639                case 2:   // µ⁄2∆¡£¨¥Úø™πˆ∆¡
    640                  autoScrollEnable = 1;
   \                     ??TransmitApp_HandleKeys_24:
   \   0000E4   90....       MOV     DPTR,#autoScrollEnable
   \   0000E7   7401         MOV     A,#0x1
   \   0000E9   80F2         SJMP    ??TransmitApp_HandleKeys_27
    641                  dispPage = 2; 
    642                  break;
    643                case 3:   // µ⁄2∆¡£¨πÿ±’πˆ∆¡
    644                  autoScrollEnable = 0;
   \                     ??TransmitApp_HandleKeys_25:
   \   0000EB   90....       MOV     DPTR,#autoScrollEnable
   \   0000EE   E4           CLR     A
   \   0000EF   F0           MOVX    @DPTR,A
    645                  dispPage = 2; 
   \   0000F0   90....       MOV     DPTR,#dispPage
   \   0000F3   7402         MOV     A,#0x2
   \   0000F5   F0           MOVX    @DPTR,A
    646                  dispCnt = 0;
   \   0000F6   90....       MOV     DPTR,#??dispCnt
   \   0000F9   E4           CLR     A
   \                     ??TransmitApp_HandleKeys_26:
   \   0000FA   F0           MOVX    @DPTR,A
    647                  break;
    648                default:
    649                  break;
    650              }
    651            }
    652              
    653            // ◊ÈÕ¯ø™πÿ(HAL_KEY_SW_7--CANCEL)
    654            if ( keys & HAL_KEY_CANCEL )
   \                     ??TransmitApp_HandleKeys_21:
   \   0000FB   EE           MOV     A,R6
   \   0000FC   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000FE   5025         JNC     ??TransmitApp_HandleKeys_28
    655            {
    656              networkPermitEn++;
    657              networkPermitEn = networkPermitEn % 2;
   \   000100   90....       MOV     DPTR,#??networkPermitEn
   \   000103   E0           MOVX    A,@DPTR
   \   000104   A2E0         MOV     C,0xE0 /* A   */.0
   \   000106   E4           CLR     A
   \   000107   33           RLC     A
   \   000108   04           INC     A
   \   000109   5401         ANL     A,#0x1
   \   00010B   F0           MOVX    @DPTR,A
    658              if (networkPermitEn == 1)
   \   00010C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00010E   5009         JNC     ??TransmitApp_HandleKeys_29
    659              {
    660                NLME_PermitJoiningRequest(0xFF); // ‘ –Ì◊ÈÕ¯
   \   000110                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000110   79FF         MOV     R1,#-0x1
   \   000112   12....       LCALL   ??NLME_PermitJoiningRequest?relay
    661                HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   000115                ; Setup parameters for call to function HalLedSet
   \   000115   7A01         MOV     R2,#0x1
   \   000117   8007         SJMP    ??TransmitApp_HandleKeys_30
    662              }
    663              else if (networkPermitEn == 0)
    664              {
    665                NLME_PermitJoiningRequest(0x00); // ≤ª‘ –Ì◊ÈÕ¯
   \                     ??TransmitApp_HandleKeys_29:
   \   000119                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000119   7900         MOV     R1,#0x0
   \   00011B   12....       LCALL   ??NLME_PermitJoiningRequest?relay
    666                HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
   \   00011E                ; Setup parameters for call to function HalLedSet
   \   00011E   7A00         MOV     R2,#0x0
   \                     ??TransmitApp_HandleKeys_30:
   \   000120   7901         MOV     R1,#0x1
   \   000122   12....       LCALL   ??HalLedSet?relay
    667              }
    668            }
    669          }
   \                     ??TransmitApp_HandleKeys_28:
   \   000125   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??dispCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??relayCmd:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??relayStatusCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??motorStatusCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??networkPermitEn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    670          
    671          /*******************************************************************************
    672           * LOCAL FUNCTIONS
    673           */
    674          
    675          /*******************************************************************************
    676           * @fn      TransmitApp_MessageMSGCB
    677           *
    678           * @brief   Data message processor callback.  This function processes
    679           *          any incoming data - probably from other devices.  So, based
    680           *          on cluster ID, perform the intended action.
    681           *
    682           * @param   none
    683           *
    684           * @return  none
    685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TransmitApp_MessageMSGCB:
    687          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    688          
    689            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for TransmitApp_MessageMSGCB>_0`:
   \   000019   0100         DW        1
   \   00001B   07           DB        7
   \   00001C   ....         DW        ??TransmitApp_MessageMSGCB_0
   \   00001E   ....         DW        ??TransmitApp_MessageMSGCB_1
   \   000020   ....         DW        ??TransmitApp_MessageMSGCB_2
   \   000022   ....         DW        ??TransmitApp_MessageMSGCB_3
   \   000024   ....         DW        ??TransmitApp_MessageMSGCB_4
   \   000026   ....         DW        ??TransmitApp_MessageMSGCB_5
   \   000028   ....         DW        ??TransmitApp_MessageMSGCB_6
   \   00002A   ....         DW        ??TransmitApp_MessageMSGCB_7
   \   00002C   ....         DW        ??TransmitApp_MessageMSGCB_8
    690            {
    691              // Œ¬ ™∂»¥´∏–∆˜–≈œ¢
    692              case TRANSMITAPP_CLUSTERID_HUMITMSG:
    693                Humit.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_1:
   \   00002E   90....       MOV     DPTR,#Humit
   \   000031   12....       LCALL   ?Subroutine2 & 0xFFFF
    694                Humit.data[0] = pkt->cmd.Data[4]; //  ™∂» 
   \                     ??CrossCallReturnLabel_0:
   \   000034   90....       MOV     DPTR,#Humit + 1
   \   000037   12....       LCALL   ?Subroutine6 & 0xFFFF
    695                Humit.data[1] = pkt->cmd.Data[5]; // Œ¬∂»
   \                     ??CrossCallReturnLabel_12:
   \   00003A   90....       MOV     DPTR,#Humit + 2
   \   00003D   02....       LJMP    ??TransmitApp_MessageMSGCB_9 & 0xFFFF
    696                break;
    697              
    698              // Œ¬∂»”Îπ‚’’∂»¥´∏–∆˜–≈œ¢  
    699              case TRANSMITAPP_CLUSTERID_TEMPLIGHTMSG:
    700                TempLight.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_2:
   \   000040   90....       MOV     DPTR,#TempLight
   \   000043   12....       LCALL   ?Subroutine2 & 0xFFFF
    701                TempLight.data[0] = pkt->cmd.Data[4]; // Œ¬∂»’˚ ˝
   \                     ??CrossCallReturnLabel_1:
   \   000046   90....       MOV     DPTR,#TempLight + 1
   \   000049   12....       LCALL   ?Subroutine7 & 0xFFFF
    702                TempLight.data[1] = pkt->cmd.Data[5]; // Œ¬∂»–° ˝
   \                     ??CrossCallReturnLabel_14:
   \   00004C   90....       MOV     DPTR,#TempLight + 2
   \   00004F   12....       LCALL   ?Subroutine5 & 0xFFFF
    703                TempLight.data[2] = pkt->cmd.Data[6]; // π‚’’
   \                     ??CrossCallReturnLabel_10:
   \   000052   90....       MOV     DPTR,#TempLight + 3
   \   000055   12....       LCALL   ?Subroutine4 & 0xFFFF
    704                TempLight.data[3] = pkt->cmd.Data[7]; // π‚’’
   \                     ??CrossCallReturnLabel_8:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   90....       MOV     DPTR,#TempLight + 4
   \   00005C   02....       LJMP    ??TransmitApp_MessageMSGCB_9 & 0xFFFF
    705                break;
    706              
    707              // RFID…‰∆µø®–≈œ¢ 
    708              case TRANSMITAPP_CLUSTERID_RFIDMSG:
    709                RfID.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_3:
   \   00005F   90....       MOV     DPTR,#RfID
   \   000062   12....       LCALL   ?Subroutine2 & 0xFFFF
    710                RfID.data[0] = pkt->cmd.Data[4]; // …‰∆µø®¿‡–Õ
   \                     ??CrossCallReturnLabel_2:
   \   000065   90....       MOV     DPTR,#RfID + 1
   \   000068   12....       LCALL   ?Subroutine7 & 0xFFFF
    711                RfID.data[1] = pkt->cmd.Data[5]; // 4∏ˆ◊÷Ω⁄µƒID∫≈
   \                     ??CrossCallReturnLabel_15:
   \   00006B   90....       MOV     DPTR,#RfID + 2
   \   00006E   12....       LCALL   ?Subroutine5 & 0xFFFF
    712                RfID.data[2] = pkt->cmd.Data[6]; //
   \                     ??CrossCallReturnLabel_11:
   \   000071   90....       MOV     DPTR,#RfID + 3
   \   000074   12....       LCALL   ?Subroutine21 & 0xFFFF
    713                RfID.data[3] = pkt->cmd.Data[7]; //
   \                     ??CrossCallReturnLabel_47:
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   90....       MOV     DPTR,#RfID + 4
   \   00007C   12....       LCALL   ?Subroutine4 & 0xFFFF
    714                RfID.data[4] = pkt->cmd.Data[8]; //           
   \                     ??CrossCallReturnLabel_9:
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   90....       MOV     DPTR,#RfID + 5
   \   000084   8063         SJMP    ??TransmitApp_MessageMSGCB_9
    715                break;
    716              
    717              // —ÃŒÌ”Îª—Ê±®æØ–≈œ¢  
    718              case TRANSMITAPP_CLUSTERID_GASFLAMEMSG:
    719                gasFlame.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_4:
   \   000086   90....       MOV     DPTR,#gasFlame
   \   000089   12....       LCALL   ?Subroutine3 & 0xFFFF
    720                gasFlame.data[0] = pkt->cmd.Data[4]; // —ÃŒÌ”Îª—Ê±®æØ–≈œ¢
   \                     ??CrossCallReturnLabel_4:
   \   00008C   90....       MOV     DPTR,#gasFlame + 1
   \   00008F   8058         SJMP    ??TransmitApp_MessageMSGCB_9
    721                break;
    722              
    723              // »ÀÃÂ∫ÏÕ‚ºÏ≤‚–≈œ¢  
    724              case TRANSMITAPP_CLUSTERID_INFRAREDMSG:
    725                infrared.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_5:
   \   000091   90....       MOV     DPTR,#infrared
   \   000094   12....       LCALL   ?Subroutine3 & 0xFFFF
    726                infrared.data[0] = pkt->cmd.Data[4]; // »ÀÃÂ∫ÏÕ‚ 
   \                     ??CrossCallReturnLabel_5:
   \   000097   90....       MOV     DPTR,#infrared + 1
   \   00009A   804D         SJMP    ??TransmitApp_MessageMSGCB_9
    727                break;
    728              
    729              // …˘“Ù”Î’Ò∂Ø¥´∏–∆˜–≈œ¢  
    730              case TRANSMITAPP_CLUSTERID_SOUNDVBMSG:
    731                soundVb.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_6:
   \   00009C   90....       MOV     DPTR,#soundVb
   \   00009F   12....       LCALL   ?Subroutine3 & 0xFFFF
    732                soundVb.data[0] = pkt->cmd.Data[4]; // …˘“Ù’∂Ø–≈œ¢
   \                     ??CrossCallReturnLabel_6:
   \   0000A2   90....       MOV     DPTR,#soundVb + 1
   \   0000A5   8042         SJMP    ??TransmitApp_MessageMSGCB_9
    733                break;
    734              
    735              // µÁª˙◊¥Ã¨–≈œ¢  
    736              case TRANSMITAPP_CLUSTERID_MOTORSTATUSMSG:
    737                motor.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_7:
   \   0000A7   90....       MOV     DPTR,#motor
   \   0000AA   7401         MOV     A,#0x1
   \   0000AC   F0           MOVX    @DPTR,A
    738                
    739                // ¥¢¥ÊµÁª˙…Ë±∏µƒÕ¯¬Áµÿ÷∑£¨”√”⁄∑¢ÀÕøÿ÷∆√¸¡Ó
    740                TransmitApp_DstMotorAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000AD   90....       MOV     DPTR,#TransmitApp_DstMotorAddr + 8
   \   0000B0   12....       LCALL   ?Subroutine8 & 0xFFFF
    741                TransmitApp_DstMotorAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_16:
   \   0000B3   90....       MOV     DPTR,#TransmitApp_DstMotorAddr
   \   0000B6   E8           MOV     A,R0
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E9           MOV     A,R1
   \   0000BA   F0           MOVX    @DPTR,A
    742                
    743                TransmitApp_DstMotorAddr.endPoint = 1;  // ƒøµƒΩ⁄µ„µƒ∂Àø⁄∫≈
   \   0000BB   90....       MOV     DPTR,#TransmitApp_DstMotorAddr + 9
   \   0000BE   12....       LCALL   ?Subroutine2 & 0xFFFF
    744                //TransmitApp_DstMotorAddr.endPoint = TRANSMITAPP_ENDPOINT;
    745               
    746                motor.data[0] = pkt->cmd.Data[4]; // µÁª˙◊™ÀŸ
   \                     ??CrossCallReturnLabel_3:
   \   0000C1   90....       MOV     DPTR,#motor + 1
   \   0000C4   12....       LCALL   ?Subroutine6 & 0xFFFF
    747                motor.data[1] = pkt->cmd.Data[5]; // µÁª˙◊¥Ã¨
   \                     ??CrossCallReturnLabel_13:
   \   0000C7   90....       MOV     DPTR,#motor + 2
   \   0000CA   801D         SJMP    ??TransmitApp_MessageMSGCB_9
    748                break;
    749              
    750              // ºÃµÁ∆˜◊¥Ã¨–≈œ¢   
    751              case TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG:
    752                relay.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_8:
   \   0000CC   90....       MOV     DPTR,#relay
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
    753                
    754                // ¥¢¥ÊºÃµÁ∆˜…Ë±∏µƒÕ¯¬Áµÿ÷∑£¨”√”⁄∑¢ÀÕøÿ÷∆√¸¡Ó
    755                TransmitApp_DstRelayAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000D2   90....       MOV     DPTR,#TransmitApp_DstRelayAddr + 8
   \   0000D5   12....       LCALL   ?Subroutine8 & 0xFFFF
    756                TransmitApp_DstRelayAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_17:
   \   0000D8   90....       MOV     DPTR,#TransmitApp_DstRelayAddr
   \   0000DB   E8           MOV     A,R0
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F0           MOVX    @DPTR,A
    757                
    758                TransmitApp_DstRelayAddr.endPoint = 1; // ƒøµƒΩ⁄µ„µƒ∂Àø⁄∫≈
   \   0000E0   90....       MOV     DPTR,#TransmitApp_DstRelayAddr + 9
   \   0000E3   12....       LCALL   ?Subroutine3 & 0xFFFF
    759                //TransmitApp_DstRelayAddr.endPoint = TRANSMITAPP_ENDPOINT;  
    760                
    761                relay.data[0] = pkt->cmd.Data[4]; 
   \                     ??CrossCallReturnLabel_7:
   \   0000E6   90....       MOV     DPTR,#relay + 1
   \                     ??TransmitApp_MessageMSGCB_9:
   \   0000E9   F0           MOVX    @DPTR,A
    762                break;
    763                
    764              // Õ¨…œ√Ê“ª—˘£¨ø…“‘‘⁄Ω´¿¥ÃÌº”∏¸∂‡µƒøÿ÷∆–≈œ¢
    765              default:
    766                break;
    767            }
    768          }
   \                     ??TransmitApp_MessageMSGCB_0:
   \   0000EA                REQUIRE ?Subroutine1
   \   0000EA                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   04           INC     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7401         MOV     A,#0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   EA           MOV     A,R2
   \   000004   2422         ADD     A,#0x22
   \   000006   F582         MOV     DPL,A
   \   000008   EB           MOV     A,R3
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F583         MOV     DPH,A
   \   00000D   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7401         MOV     A,#0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   EA           MOV     A,R2
   \   000004   2422         ADD     A,#0x22
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET
    769          
    770          /*******************************************************************************
    771           * @fn      TransmitApp_DeviceNWKCheck
    772           *
    773           * @brief   check the device NWK status: online or offline.
    774           *          ”…∫Í∂®“ÂTRANSMITAPP_DEVICE_CHECK_TIMER»∑∂®÷‹∆⁄ «2√Î
    775           *
    776           * @param   none
    777           *
    778           * @return  none
    779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    780          void TransmitApp_DeviceNWKCheck(void)
   \                     TransmitApp_DeviceNWKCheck:
    781          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    782            // …Ë±∏¿Îœﬂº∆ ˝∆˜£¨≥¨π˝¡ŸΩÁ÷µ≈–∂®…Ë±∏¿Îœﬂ
    783            static uint8 humitCnt, tempLightCnt, rfIDCnt, gasFlameCnt, infraredCnt;
    784            static uint8 motorCnt, relayStatusCnt, soundVbCnt;
    785            
    786            // Œ¬ ™∂»¥´∏–∆˜
    787            if (Humit.deviceNWKStatus != DEVICE_NWK_ONLINE) // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \   000004   90....       MOV     DPTR,#Humit
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   600E         JZ      ??TransmitApp_DeviceNWKCheck_0
    788            {
    789              humitCnt++;
   \   00000C   90....       MOV     DPTR,#??humitCnt
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   04           INC     A
   \   000011   F0           MOVX    @DPTR,A
    790            }
    791            if (Humit.deviceNWKStatus == DEVICE_NWK_ONLINE) // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   000012   90....       MOV     DPTR,#Humit
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6401         XRL     A,#0x1
   \   000018   700A         JNZ     ??TransmitApp_DeviceNWKCheck_1
    792            {
    793              humitCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_0:
   \   00001A   90....       MOV     DPTR,#??humitCnt
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
    794              Humit.deviceNWKStatus = 0;
   \   00001F   90....       MOV     DPTR,#Humit
   \   000022   800F         SJMP    ??TransmitApp_DeviceNWKCheck_2
    795            }
    796            if (humitCnt > DEVICE_NWK_CNT_LIMIT)            // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_1:
   \   000024   90....       MOV     DPTR,#??humitCnt
   \   000027   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00002A   4008         JC      ??TransmitApp_DeviceNWKCheck_3
    797            {
    798              humitCnt = DEVICE_NWK_CNT_LIMIT;
   \   00002C   7403         MOV     A,#0x3
   \   00002E   F0           MOVX    @DPTR,A
    799              Humit.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   00002F   90....       MOV     DPTR,#Humit
   \   000032   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_2:
   \   000033   F0           MOVX    @DPTR,A
    800            }
    801            
    802            // Œ¬∂»”Îπ‚’’∂»¥´∏–∆˜
    803            if (TempLight.deviceNWKStatus != DEVICE_NWK_ONLINE) // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \                     ??TransmitApp_DeviceNWKCheck_3:
   \   000034   90....       MOV     DPTR,#TempLight
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6401         XRL     A,#0x1
   \   00003A   600E         JZ      ??TransmitApp_DeviceNWKCheck_4
    804            {
    805              tempLightCnt++;
   \   00003C   90....       MOV     DPTR,#??tempLightCnt
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   04           INC     A
   \   000041   F0           MOVX    @DPTR,A
    806            }
    807            if (TempLight.deviceNWKStatus == DEVICE_NWK_ONLINE) // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   000042   90....       MOV     DPTR,#TempLight
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6401         XRL     A,#0x1
   \   000048   700A         JNZ     ??TransmitApp_DeviceNWKCheck_5
    808            {
    809              tempLightCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_4:
   \   00004A   90....       MOV     DPTR,#??tempLightCnt
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
    810              TempLight.deviceNWKStatus = 0;
   \   00004F   90....       MOV     DPTR,#TempLight
   \   000052   800F         SJMP    ??TransmitApp_DeviceNWKCheck_6
    811            }
    812            if (tempLightCnt > DEVICE_NWK_CNT_LIMIT)            // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_5:
   \   000054   90....       MOV     DPTR,#??tempLightCnt
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00005A   4008         JC      ??TransmitApp_DeviceNWKCheck_7
    813            {
    814              tempLightCnt = DEVICE_NWK_CNT_LIMIT;
   \   00005C   7403         MOV     A,#0x3
   \   00005E   F0           MOVX    @DPTR,A
    815              TempLight.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   00005F   90....       MOV     DPTR,#TempLight
   \   000062   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_6:
   \   000063   F0           MOVX    @DPTR,A
    816            }
    817            
    818            // RFID∂¡ø®∆˜
    819            if (RfID.deviceNWKStatus != DEVICE_NWK_ONLINE) // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \                     ??TransmitApp_DeviceNWKCheck_7:
   \   000064   90....       MOV     DPTR,#RfID
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   600E         JZ      ??TransmitApp_DeviceNWKCheck_8
    820            {
    821                rfIDCnt++;
   \   00006C   90....       MOV     DPTR,#??rfIDCnt
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   04           INC     A
   \   000071   F0           MOVX    @DPTR,A
    822            }
    823            if (RfID.deviceNWKStatus == DEVICE_NWK_ONLINE) // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   000072   90....       MOV     DPTR,#RfID
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6401         XRL     A,#0x1
   \   000078   700A         JNZ     ??TransmitApp_DeviceNWKCheck_9
    824            {
    825                rfIDCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_8:
   \   00007A   90....       MOV     DPTR,#??rfIDCnt
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    826                RfID.deviceNWKStatus = 0;
   \   00007F   90....       MOV     DPTR,#RfID
   \   000082   800F         SJMP    ??TransmitApp_DeviceNWKCheck_10
    827            }
    828            if (rfIDCnt > DEVICE_NWK_CNT_LIMIT)            // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_9:
   \   000084   90....       MOV     DPTR,#??rfIDCnt
   \   000087   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00008A   4008         JC      ??TransmitApp_DeviceNWKCheck_11
    829            {
    830                rfIDCnt = DEVICE_NWK_CNT_LIMIT;
   \   00008C   7403         MOV     A,#0x3
   \   00008E   F0           MOVX    @DPTR,A
    831                RfID.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   00008F   90....       MOV     DPTR,#RfID
   \   000092   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_10:
   \   000093   F0           MOVX    @DPTR,A
    832            }
    833              
    834            // —ÃŒÌ”Îª—Ê¥´∏–∆˜  
    835            if (gasFlame.deviceNWKStatus != DEVICE_NWK_ONLINE) // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \                     ??TransmitApp_DeviceNWKCheck_11:
   \   000094   90....       MOV     DPTR,#gasFlame
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6401         XRL     A,#0x1
   \   00009A   600E         JZ      ??TransmitApp_DeviceNWKCheck_12
    836            {
    837              gasFlameCnt++;
   \   00009C   90....       MOV     DPTR,#??gasFlameCnt
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   04           INC     A
   \   0000A1   F0           MOVX    @DPTR,A
    838            }
    839            if (gasFlame.deviceNWKStatus == DEVICE_NWK_ONLINE) // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   0000A2   90....       MOV     DPTR,#gasFlame
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   700A         JNZ     ??TransmitApp_DeviceNWKCheck_13
    840            {
    841              gasFlameCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_12:
   \   0000AA   90....       MOV     DPTR,#??gasFlameCnt
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
    842              gasFlame.deviceNWKStatus = 0;
   \   0000AF   90....       MOV     DPTR,#gasFlame
   \   0000B2   800F         SJMP    ??TransmitApp_DeviceNWKCheck_14
    843            }
    844            if (gasFlameCnt > DEVICE_NWK_CNT_LIMIT)            // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_13:
   \   0000B4   90....       MOV     DPTR,#??gasFlameCnt
   \   0000B7   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000BA   4008         JC      ??TransmitApp_DeviceNWKCheck_15
    845            {
    846              gasFlameCnt = DEVICE_NWK_CNT_LIMIT;
   \   0000BC   7403         MOV     A,#0x3
   \   0000BE   F0           MOVX    @DPTR,A
    847              gasFlame.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   0000BF   90....       MOV     DPTR,#gasFlame
   \   0000C2   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_14:
   \   0000C3   F0           MOVX    @DPTR,A
    848            }
    849            
    850            // »ÀÃÂ∫ÏÕ‚ºÏ≤‚¥´∏–∆˜
    851            if (infrared.deviceNWKStatus != DEVICE_NWK_ONLINE)  // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \                     ??TransmitApp_DeviceNWKCheck_15:
   \   0000C4   90....       MOV     DPTR,#infrared
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6401         XRL     A,#0x1
   \   0000CA   600E         JZ      ??TransmitApp_DeviceNWKCheck_16
    852            {
    853              infraredCnt++;
   \   0000CC   90....       MOV     DPTR,#??infraredCnt
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   04           INC     A
   \   0000D1   F0           MOVX    @DPTR,A
    854            }
    855            if (infrared.deviceNWKStatus == DEVICE_NWK_ONLINE)  // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   0000D2   90....       MOV     DPTR,#infrared
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   6401         XRL     A,#0x1
   \   0000D8   700A         JNZ     ??TransmitApp_DeviceNWKCheck_17
    856            {
    857              infraredCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_16:
   \   0000DA   90....       MOV     DPTR,#??infraredCnt
   \   0000DD   E4           CLR     A
   \   0000DE   F0           MOVX    @DPTR,A
    858              infrared.deviceNWKStatus = 0;
   \   0000DF   90....       MOV     DPTR,#infrared
   \   0000E2   800F         SJMP    ??TransmitApp_DeviceNWKCheck_18
    859            }
    860            if (infraredCnt > DEVICE_NWK_CNT_LIMIT)             // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_17:
   \   0000E4   90....       MOV     DPTR,#??infraredCnt
   \   0000E7   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000EA   4008         JC      ??TransmitApp_DeviceNWKCheck_19
    861            {
    862              infraredCnt = DEVICE_NWK_CNT_LIMIT;
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   F0           MOVX    @DPTR,A
    863              infrared.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   0000EF   90....       MOV     DPTR,#infrared
   \   0000F2   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_18:
   \   0000F3   F0           MOVX    @DPTR,A
    864            }
    865              
    866            // …˘“Ù’Ò∂Ø¥´∏–∆˜  
    867            if (soundVb.deviceNWKStatus != DEVICE_NWK_ONLINE) // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \                     ??TransmitApp_DeviceNWKCheck_19:
   \   0000F4   90....       MOV     DPTR,#soundVb
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   6401         XRL     A,#0x1
   \   0000FA   600E         JZ      ??TransmitApp_DeviceNWKCheck_20
    868            {
    869              soundVbCnt++;
   \   0000FC   90....       MOV     DPTR,#??soundVbCnt
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   04           INC     A
   \   000101   F0           MOVX    @DPTR,A
    870            }
    871            if (soundVb.deviceNWKStatus == DEVICE_NWK_ONLINE) // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   000102   90....       MOV     DPTR,#soundVb
   \   000105   E0           MOVX    A,@DPTR
   \   000106   6401         XRL     A,#0x1
   \   000108   700B         JNZ     ??TransmitApp_DeviceNWKCheck_21
    872            {
    873              soundVbCnt++;
   \                     ??TransmitApp_DeviceNWKCheck_20:
   \   00010A   90....       MOV     DPTR,#??soundVbCnt
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   04           INC     A
   \   00010F   F0           MOVX    @DPTR,A
    874              soundVb.deviceNWKStatus = 0;
   \   000110   90....       MOV     DPTR,#soundVb
   \   000113   E4           CLR     A
   \   000114   F0           MOVX    @DPTR,A
    875            }
    876            if (soundVbCnt > DEVICE_NWK_CNT_LIMIT)            // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_21:
   \   000115   90....       MOV     DPTR,#??soundVbCnt
   \   000118   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00011B   4008         JC      ??TransmitApp_DeviceNWKCheck_22
    877            {
    878              soundVbCnt = DEVICE_NWK_CNT_LIMIT;
   \   00011D   7403         MOV     A,#0x3
   \   00011F   F0           MOVX    @DPTR,A
    879              soundVb.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   000120   90....       MOV     DPTR,#soundVb
   \   000123   14           DEC     A
   \   000124   F0           MOVX    @DPTR,A
    880            }
    881              
    882            // Œ¢–Õ÷±¡˜µÁª˙RF-310T/QJT310AH 
    883            if (motor.deviceNWKStatus != DEVICE_NWK_ONLINE) // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \                     ??TransmitApp_DeviceNWKCheck_22:
   \   000125   90....       MOV     DPTR,#motor
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6401         XRL     A,#0x1
   \   00012B   600E         JZ      ??TransmitApp_DeviceNWKCheck_23
    884            {
    885              motorCnt++;
   \   00012D   90....       MOV     DPTR,#??motorCnt
   \   000130   E0           MOVX    A,@DPTR
   \   000131   04           INC     A
   \   000132   F0           MOVX    @DPTR,A
    886            }
    887            if (motor.deviceNWKStatus == DEVICE_NWK_ONLINE) // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   000133   90....       MOV     DPTR,#motor
   \   000136   E0           MOVX    A,@DPTR
   \   000137   6401         XRL     A,#0x1
   \   000139   700A         JNZ     ??TransmitApp_DeviceNWKCheck_24
    888            {
    889              motorCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_23:
   \   00013B   90....       MOV     DPTR,#??motorCnt
   \   00013E   E4           CLR     A
   \   00013F   F0           MOVX    @DPTR,A
    890              motor.deviceNWKStatus = 0;
   \   000140   90....       MOV     DPTR,#motor
   \   000143   800F         SJMP    ??TransmitApp_DeviceNWKCheck_25
    891            }
    892            if (motorCnt > DEVICE_NWK_CNT_LIMIT)            // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_24:
   \   000145   90....       MOV     DPTR,#??motorCnt
   \   000148   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00014B   4008         JC      ??TransmitApp_DeviceNWKCheck_26
    893            {
    894              motorCnt = DEVICE_NWK_CNT_LIMIT;
   \   00014D   7403         MOV     A,#0x3
   \   00014F   F0           MOVX    @DPTR,A
    895              motor.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   000150   90....       MOV     DPTR,#motor
   \   000153   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_25:
   \   000154   F0           MOVX    @DPTR,A
    896            }
    897              
    898            // ºÃµÁ∆˜  
    899            if (relay.deviceNWKStatus != DEVICE_NWK_ONLINE) // …Ë±∏¿Îœﬂ£¨º∆ ˝+1
   \                     ??TransmitApp_DeviceNWKCheck_26:
   \   000155   90....       MOV     DPTR,#relay
   \   000158   E0           MOVX    A,@DPTR
   \   000159   6401         XRL     A,#0x1
   \   00015B   600E         JZ      ??TransmitApp_DeviceNWKCheck_27
    900            {
    901              relayStatusCnt++;
   \   00015D   90....       MOV     DPTR,#??relayStatusCnt_1
   \   000160   E0           MOVX    A,@DPTR
   \   000161   04           INC     A
   \   000162   F0           MOVX    @DPTR,A
    902            }
    903            if (relay.deviceNWKStatus == DEVICE_NWK_ONLINE) // …Ë±∏‘⁄œﬂ£¨º∆ ˝«Â¡„
   \   000163   90....       MOV     DPTR,#relay
   \   000166   E0           MOVX    A,@DPTR
   \   000167   6401         XRL     A,#0x1
   \   000169   700A         JNZ     ??TransmitApp_DeviceNWKCheck_28
    904            {
    905              relayStatusCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_27:
   \   00016B   90....       MOV     DPTR,#??relayStatusCnt_1
   \   00016E   E4           CLR     A
   \   00016F   F0           MOVX    @DPTR,A
    906              relay.deviceNWKStatus = 0;
   \   000170   90....       MOV     DPTR,#relay
   \   000173   800F         SJMP    ??TransmitApp_DeviceNWKCheck_29
    907            }
    908            if (relayStatusCnt > DEVICE_NWK_CNT_LIMIT)      // ≥¨ ±, ≈–Œ™¿Îœﬂ
   \                     ??TransmitApp_DeviceNWKCheck_28:
   \   000175   90....       MOV     DPTR,#??relayStatusCnt_1
   \   000178   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00017B   4008         JC      ??TransmitApp_DeviceNWKCheck_30
    909            {
    910              relayStatusCnt = DEVICE_NWK_CNT_LIMIT;
   \   00017D   7403         MOV     A,#0x3
   \   00017F   F0           MOVX    @DPTR,A
    911              relay.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   000180   90....       MOV     DPTR,#relay
   \   000183   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_29:
   \   000184   F0           MOVX    @DPTR,A
    912            }  
    913          }
   \                     ??TransmitApp_DeviceNWKCheck_30:
   \   000185   D083         POP     DPH
   \   000187   D082         POP     DPL
   \   000189   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9404         SUBB    A,#0x4
   \   000004   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??humitCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??tempLightCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??rfIDCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??gasFlameCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??infraredCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??motorCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??relayStatusCnt_1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??soundVbCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    914          
    915          /*******************************************************************************
    916           * @fn      TransmitApp_SendToRelayMSG
    917           *
    918           * @brief   Send control message to relay, if relay is in the network.
    919           *
    920           * @param   uint8 cmd: Relay control command
    921           *
    922           * @return  none
    923           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    924          void TransmitApp_SendToRelayMSG( uint8 cmd )
   \                     TransmitApp_SendToRelayMSG:
    925          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    926            uint8 tmp;
    927            
    928            // ÷ª”–…Ë±∏‘⁄œﬂ ±, ∑Ω∑¢ÀÕøÿ÷∆√¸¡Ó
    929            if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000007   90....       MOV     DPTR,#relay
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   6068         JZ      ??TransmitApp_SendToRelayMSG_0
    930            {
    931              // put the sequence number in the message
    932              tmp = HI_UINT8( TransmitApp_RelayTransID );
   \   00000F   90....       MOV     DPTR,#TransmitApp_RelayTransID
   \   000012   12....       LCALL   ?Subroutine13 & 0xFFFF
    933              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_31:
   \   000015   5004         JNC     ??TransmitApp_SendToRelayMSG_1
   \   000017   7830         MOV     R0,#0x30
   \   000019   8002         SJMP    ??TransmitApp_SendToRelayMSG_2
   \                     ??TransmitApp_SendToRelayMSG_1:
   \   00001B   7837         MOV     R0,#0x37
    934              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendToRelayMSG_2:
   \   00001D   E8           MOV     A,R0
   \   00001E   2A           ADD     A,R2
   \   00001F   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   000022   F0           MOVX    @DPTR,A
    935              tmp = LO_UINT8( TransmitApp_RelayTransID );
   \   000023   90....       MOV     DPTR,#TransmitApp_RelayTransID
   \   000026   12....       LCALL   ?Subroutine24 & 0xFFFF
    936              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_65:
   \   000029   5004         JNC     ??TransmitApp_SendToRelayMSG_3
   \   00002B   7830         MOV     R0,#0x30
   \   00002D   8002         SJMP    ??TransmitApp_SendToRelayMSG_4
   \                     ??TransmitApp_SendToRelayMSG_3:
   \   00002F   7837         MOV     R0,#0x37
    937              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendToRelayMSG_4:
   \   000031   E8           MOV     A,R0
   \   000032   2A           ADD     A,R2
   \   000033   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000036   12....       LCALL   ?Subroutine9 & 0xFFFF
    938              
    939              // ∑¢ÀÕ∏¯ºÃµÁ∆˜µƒøÿ÷∆√¸¡Ó 
    940              TransmitApp_Msg[4] = cmd;
    941              
    942              // TransmitApp_epDesc.endPoint = TRANSMITAPP_CLUSTERID_RELAYCTLMSG; // 20201225
    943              tmp = AF_DataRequest( &TransmitApp_DstRelayAddr,           \
    944                                    &TransmitApp_epDesc,                 \
    945                                     TRANSMITAPP_CLUSTERID_RELAYCTLMSG,  \
    946                                     TRANSMITAPP_RELAY_DATA_LEN,         \
    947                                     TransmitApp_Msg,                    \
    948                                    &TransmitApp_RelayTransID,           \
    949                                     TRANSMITAPP_TX_OPTIONS,             \
    950                                     AF_DEFAULT_RADIUS );
    951            }
   \                     ??CrossCallReturnLabel_18:
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003C   75....       MOV     ?V0 + 0,#TransmitApp_RelayTransID & 0xff
   \   00003F   75....       MOV     ?V0 + 1,#(TransmitApp_RelayTransID >> 8) & 0xff
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   00004A   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..05       MOV     ?V0 + 0,#0x5
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..0A       MOV     ?V0 + 0,#0xa
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7920         MOV     R1,#0x20
   \   000067   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000069   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00006B   7A..         MOV     R2,#TransmitApp_DstRelayAddr & 0xff
   \   00006D   7B..         MOV     R3,#(TransmitApp_DstRelayAddr >> 8) & 0xff
   \   00006F   12....       LCALL   ??AF_DataRequest?relay
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
    952          }
   \                     ??TransmitApp_SendToRelayMSG_0:
   \   000077   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine31_0
   \   000001                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   540F         ANL     A,#0xf
   \   000002   FA           MOV     R2,A
   \   000003   C3           CLR     C
   \   000004   940A         SUBB    A,#0xa
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function AF_DataRequest
   \   000004                ; Setup parameters for call to function AF_DataRequest
   \   000004   75..1E       MOV     ?V0 + 0,#0x1e
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET
    953          
    954          /*******************************************************************************
    955           * @fn      TransmitApp_SendToMotorMSG
    956           *
    957           * @brief   Send  message to motor.
    958           *
    959           * @param   uint8 cmd: motor command
    960           *
    961           * @return  none
    962           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    963          void TransmitApp_SendToMotorMSG( uint8 cmd, uint8 speed )
   \                     TransmitApp_SendToMotorMSG:
    964          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    965            uint8 tmp;
    966            
    967            // ÷ª”–…Ë±∏‘⁄œﬂ ±, ∑Ω∑¢ÀÕøÿ÷∆√¸¡Ó
    968            if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000009   90....       MOV     DPTR,#motor
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   606B         JZ      ??TransmitApp_SendToMotorMSG_0
    969            {
    970              // put the sequence number in the message
    971              tmp = HI_UINT8( TransmitApp_MotorTransID );
   \   000011   90....       MOV     DPTR,#TransmitApp_MotorTransID
   \   000014   12....       LCALL   ?Subroutine13 & 0xFFFF
    972              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_32:
   \   000017   5004         JNC     ??TransmitApp_SendToMotorMSG_1
   \   000019   7830         MOV     R0,#0x30
   \   00001B   8002         SJMP    ??TransmitApp_SendToMotorMSG_2
   \                     ??TransmitApp_SendToMotorMSG_1:
   \   00001D   7837         MOV     R0,#0x37
    973              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendToMotorMSG_2:
   \   00001F   E8           MOV     A,R0
   \   000020   2A           ADD     A,R2
   \   000021   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   000024   F0           MOVX    @DPTR,A
    974              tmp = LO_UINT8( TransmitApp_MotorTransID );
   \   000025   90....       MOV     DPTR,#TransmitApp_MotorTransID
   \   000028   12....       LCALL   ?Subroutine24 & 0xFFFF
    975              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_66:
   \   00002B   5004         JNC     ??TransmitApp_SendToMotorMSG_3
   \   00002D   7830         MOV     R0,#0x30
   \   00002F   8002         SJMP    ??TransmitApp_SendToMotorMSG_4
   \                     ??TransmitApp_SendToMotorMSG_3:
   \   000031   7837         MOV     R0,#0x37
    976              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendToMotorMSG_4:
   \   000033   E8           MOV     A,R0
   \   000034   2A           ADD     A,R2
   \   000035   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000038   F0           MOVX    @DPTR,A
    977              
    978              TransmitApp_Msg[4] = speed; // µÁª˙ÀŸ∂»
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ?Subroutine9 & 0xFFFF
    979              TransmitApp_Msg[5] = cmd;   // µÁª˙øÿ÷∆◊¥Ã¨(∑ΩœÚ)
    980            
    981              //TransmitApp_epDesc.endPoint = TRANSMITAPP_CLUSTERID_MOTORCTLMSG; // 20201225
    982              tmp = AF_DataRequest( &TransmitApp_DstMotorAddr,            \
    983                                    &TransmitApp_epDesc,                  \
    984                                     TRANSMITAPP_CLUSTERID_MOTORCTLMSG,   \
    985                                     TRANSMITAPP_MOTOR_DATA_LEN,          \
    986                                     TransmitApp_Msg,                     \
    987                                    &TransmitApp_MotorTransID,            \
    988                                     TRANSMITAPP_TX_OPTIONS,              \
    989                                     AF_DEFAULT_RADIUS );
    990            }
   \                     ??CrossCallReturnLabel_19:
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000041   75....       MOV     ?V0 + 0,#TransmitApp_MotorTransID & 0xff
   \   000044   75....       MOV     ?V0 + 1,#(TransmitApp_MotorTransID >> 8) & 0xff
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   00004F   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..06       MOV     ?V0 + 0,#0x6
   \   00005A   75..00       MOV     ?V0 + 1,#0x0
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   75..0B       MOV     ?V0 + 0,#0xb
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7920         MOV     R1,#0x20
   \   00006C   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   00006E   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000070   7A..         MOV     R2,#TransmitApp_DstMotorAddr & 0xff
   \   000072   7B..         MOV     R3,#(TransmitApp_DstMotorAddr >> 8) & 0xff
   \   000074   12....       LCALL   ??AF_DataRequest?relay
   \   000077   7409         MOV     A,#0x9
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    991          }
   \                     ??TransmitApp_SendToMotorMSG_0:
   \   00007C   02....       LJMP    ?Subroutine1 & 0xFFFF
    992          
    993          /*******************************************************************************
    994           * @fn      TransmitApp_DisplayResults
    995           *
    996           * @brief   Display the results
    997           *
    998           * @param   none
    999           *
   1000           * @return  none
   1001           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1002          void TransmitApp_DisplayResults( uint8 dispPage, uint8 *scrollLine )
   \                     TransmitApp_DisplayResults:
   1003          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 206
   \   000005   7432         MOV     A,#0x32
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   1004          #if defined LCD_SUPPORTED 
   1005            uint8 i, scrollLineTmp;
   1006            char dispBuf[12][16]; // LCDœ‘ æª∫¥Ê
   1007            uint8 buf[6];
   1008            uint16 light;
   1009            uint8 dispIDBuf[8];
   1010            
   1011            // Œ¬ ™∂»¥´∏–∆˜÷–µƒ ™∂»œ‘ æ
   1012            strcpy(dispBuf[0], "H:");
   \   000010                ; Setup parameters for call to function strcpy
   \   000010   7C..         MOV     R4,#`?<Constant "H:">` & 0xff
   \   000012   7D..         MOV     R5,#(`?<Constant "H:">` >> 8) & 0xff
   \   000014   740E         MOV     A,#0xe
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   AA82         MOV     R2,DPL
   \   00001B   AB83         MOV     R3,DPH
   \   00001D   12....       LCALL   ??strcpy?relay
   1013            if (Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000020   90....       MOV     DPTR,#Humit
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6402         XRL     A,#0x2
   \   000026   6038         JZ      ??TransmitApp_DisplayResults_0
   1014            {
   1015              _ltoa(Humit.data[0], buf, 10);
   \   000028                ; Setup parameters for call to function _ltoa
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   8582..       MOV     ?V0 + 2,DPL
   \   000031   8583..       MOV     ?V0 + 3,DPH
   \   000034   78..         MOV     R0,#?V0 + 2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   790A         MOV     R1,#0xa
   \   00003B   90....       MOV     DPTR,#Humit + 1
   \   00003E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   1016              strcat(dispBuf[0], (char *)buf);
   \   000044                ; Setup parameters for call to function strcat
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   AC82         MOV     R4,DPL
   \   00004C   AD83         MOV     R5,DPH
   \   00004E   740E         MOV     A,#0xe
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   AA82         MOV     R2,DPL
   \   000055   AB83         MOV     R3,DPH
   \   000057   12....       LCALL   ??strcat?relay
   1017              strcat(dispBuf[0], "%");
   \   00005A                ; Setup parameters for call to function strcat
   \   00005A   7C..         MOV     R4,#`?<Constant "%">` & 0xff
   \   00005C   7D..         MOV     R5,#(`?<Constant "%">` >> 8) & 0xff
   \   00005E   8004         SJMP    ??TransmitApp_DisplayResults_1
   1018            }
   1019            else
   1020            {
   1021                strcat(dispBuf[0], "OFF");
   \                     ??TransmitApp_DisplayResults_0:
   \   000060                ; Setup parameters for call to function strcat
   \   000060   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000062   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_1:
   \   000064   740E         MOV     A,#0xe
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   12....       LCALL   ??strcat?relay
   1022            }
   1023            // Œ¬ ™∂»¥´∏–∆˜÷–µƒŒ¬∂»œ‘ æ
   1024            strcat(dispBuf[0], " T:");
   \   000070                ; Setup parameters for call to function strcat
   \   000070   7C..         MOV     R4,#`?<Constant " T:">` & 0xff
   \   000072   7D..         MOV     R5,#(`?<Constant " T:">` >> 8) & 0xff
   \   000074   740E         MOV     A,#0xe
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??strcat?relay
   1025            if (Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000080   90....       MOV     DPTR,#Humit
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6402         XRL     A,#0x2
   \   000086   6038         JZ      ??TransmitApp_DisplayResults_2
   1026            {
   1027              _ltoa(Humit.data[1], buf, 10);
   \   000088                ; Setup parameters for call to function _ltoa
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   8582..       MOV     ?V0 + 2,DPL
   \   000091   8583..       MOV     ?V0 + 3,DPH
   \   000094   78..         MOV     R0,#?V0 + 2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   790A         MOV     R1,#0xa
   \   00009B   90....       MOV     DPTR,#Humit + 2
   \   00009E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   1028              strcat(dispBuf[0], (char *)buf);
   \   0000A4                ; Setup parameters for call to function strcat
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   AC82         MOV     R4,DPL
   \   0000AC   AD83         MOV     R5,DPH
   \   0000AE   740E         MOV     A,#0xe
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   AA82         MOV     R2,DPL
   \   0000B5   AB83         MOV     R3,DPH
   \   0000B7   12....       LCALL   ??strcat?relay
   1029              strcat(dispBuf[0], "C");
   \   0000BA                ; Setup parameters for call to function strcat
   \   0000BA   7C..         MOV     R4,#`?<Constant "C">` & 0xff
   \   0000BC   7D..         MOV     R5,#(`?<Constant "C">` >> 8) & 0xff
   \   0000BE   8004         SJMP    ??TransmitApp_DisplayResults_3
   1030            }
   1031            else
   1032            {
   1033              strcat(dispBuf[0], "OFF");
   \                     ??TransmitApp_DisplayResults_2:
   \   0000C0                ; Setup parameters for call to function strcat
   \   0000C0   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0000C2   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_3:
   \   0000C4   740E         MOV     A,#0xe
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   12....       LCALL   ??strcat?relay
   1034            }
   1035                  
   1036            // Œ¬∂»”Îπ‚’’∂»œ‘ æ
   1037            if (TempLight.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0000D0   90....       MOV     DPTR,#TempLight
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   6402         XRL     A,#0x2
   \   0000D6   7003         JNZ     $+5
   \   0000D8   02....       LJMP    ??TransmitApp_DisplayResults_4 & 0xFFFF
   1038            {
   1039             _ltoa(TempLight.data[0], buf, 10);
   \   0000DB                ; Setup parameters for call to function _ltoa
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   8582..       MOV     ?V0 + 2,DPL
   \   0000E4   8583..       MOV     ?V0 + 3,DPH
   \   0000E7   78..         MOV     R0,#?V0 + 2
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   790A         MOV     R1,#0xa
   \   0000EE   90....       MOV     DPTR,#TempLight + 1
   \   0000F1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   1040             strcpy(dispBuf[1], (char *)buf);
   \   0000F7                ; Setup parameters for call to function strcpy
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   AC82         MOV     R4,DPL
   \   0000FF   AD83         MOV     R5,DPH
   \   000101   741E         MOV     A,#0x1e
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   AA82         MOV     R2,DPL
   \   000108   AB83         MOV     R3,DPH
   \   00010A   12....       LCALL   ??strcpy?relay
   1041              strcat(dispBuf[1], ".");
   \   00010D                ; Setup parameters for call to function strcat
   \   00010D   7C..         MOV     R4,#`?<Constant ".">` & 0xff
   \   00010F   7D..         MOV     R5,#(`?<Constant ".">` >> 8) & 0xff
   \   000111   741E         MOV     A,#0x1e
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   AA82         MOV     R2,DPL
   \   000118   AB83         MOV     R3,DPH
   \   00011A   12....       LCALL   ??strcat?relay
   1042              _ltoa((long)((float)TempLight.data[1]*62.5), buf, 10);
   \   00011D                ; Setup parameters for call to function _ltoa
   \   00011D   78..         MOV     R0,#?V0 + 2
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000122   90....       MOV     DPTR,#TempLight + 2
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F5..         MOV     ?V0 + 4,A
   \   000128   E4           CLR     A
   \   000129   F5..         MOV     ?V0 + 5,A
   \   00012B   F5..         MOV     ?V0 + 6,A
   \   00012D   F5..         MOV     ?V0 + 7,A
   \   00012F   78..         MOV     R0,#?V0 + 4
   \   000131   12....       LCALL   ?UL_TO_FLT
   \   000134   90....       MOV     DPTR,#__Constant_427a0000
   \   000137   78..         MOV     R0,#?V0 + 8
   \   000139   12....       LCALL   ?L_MOV_X
   \   00013C   78..         MOV     R0,#?V0 + 4
   \   00013E   79..         MOV     R1,#?V0 + 8
   \   000140   12....       LCALL   ?FLT_MUL
   \   000143   78..         MOV     R0,#?V0 + 4
   \   000145   12....       LCALL   ?FLT_TO_L
   \   000148   AA..         MOV     R2,?V0 + 4
   \   00014A   AB..         MOV     R3,?V0 + 5
   \   00014C   AC..         MOV     R4,?V0 + 6
   \   00014E   AD..         MOV     R5,?V0 + 7
   \   000150   740A         MOV     A,#0xa
   \   000152   F9           MOV     R1,A
   \   000153   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   1043              strcat(dispBuf[1], (char *)buf);
   \   000159                ; Setup parameters for call to function strcat
   \   000159   85..82       MOV     DPL,?XSP + 0
   \   00015C   85..83       MOV     DPH,?XSP + 1
   \   00015F   AC82         MOV     R4,DPL
   \   000161   AD83         MOV     R5,DPH
   \   000163   741E         MOV     A,#0x1e
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   AA82         MOV     R2,DPL
   \   00016A   AB83         MOV     R3,DPH
   \   00016C   12....       LCALL   ??strcat?relay
   1044              strcat(dispBuf[1], "C ");
   \   00016F                ; Setup parameters for call to function strcat
   \   00016F   7C..         MOV     R4,#`?<Constant "C ">` & 0xff
   \   000171   7D..         MOV     R5,#(`?<Constant "C ">` >> 8) & 0xff
   \   000173   741E         MOV     A,#0x1e
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   AA82         MOV     R2,DPL
   \   00017A   AB83         MOV     R3,DPH
   \   00017C   12....       LCALL   ??strcat?relay
   1045              light = (uint16)(TempLight.data[2]<<8) + TempLight.data[3];
   1046              _ltoa(light, buf, 10);
   \   00017F                ; Setup parameters for call to function _ltoa
   \   00017F   78..         MOV     R0,#?V0 + 2
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000184   790A         MOV     R1,#0xa
   \   000186   90....       MOV     DPTR,#TempLight + 3
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   FB           MOV     R3,A
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   FA           MOV     R2,A
   \   00018E   E4           CLR     A
   \   00018F   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   1047              strcat(dispBuf[1], (char *)buf);
   \   000195                ; Setup parameters for call to function strcat
   \   000195   85..82       MOV     DPL,?XSP + 0
   \   000198   85..83       MOV     DPH,?XSP + 1
   \   00019B   AC82         MOV     R4,DPL
   \   00019D   AD83         MOV     R5,DPH
   \   00019F   741E         MOV     A,#0x1e
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   AA82         MOV     R2,DPL
   \   0001A6   AB83         MOV     R3,DPH
   \   0001A8   12....       LCALL   ??strcat?relay
   1048              strcat(dispBuf[1], "L");
   \   0001AB                ; Setup parameters for call to function strcat
   \   0001AB   7C..         MOV     R4,#`?<Constant "L">` & 0xff
   \   0001AD   7D..         MOV     R5,#(`?<Constant "L">` >> 8) & 0xff
   \   0001AF   741E         MOV     A,#0x1e
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   AA82         MOV     R2,DPL
   \   0001B6   AB83         MOV     R3,DPH
   \   0001B8   12....       LCALL   ??strcat?relay
   \   0001BB   8010         SJMP    ??TransmitApp_DisplayResults_5
   1049            }
   1050            else
   1051            {
   1052              strcpy(dispBuf[1], "T:OFF L:OFF");
   \                     ??TransmitApp_DisplayResults_4:
   \   0001BD                ; Setup parameters for call to function strcpy
   \   0001BD   7C..         MOV     R4,#`?<Constant "T:OFF L:OFF">` & 0xff
   \   0001BF   7D..         MOV     R5,#(`?<Constant "T:OFF L:OFF">` >> 8) & 0xff
   \   0001C1   741E         MOV     A,#0x1e
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   AA82         MOV     R2,DPL
   \   0001C8   AB83         MOV     R3,DPH
   \   0001CA   12....       LCALL   ??strcpy?relay
   1053            }
   1054              
   1055            // ºÃµÁ∆˜◊¥Ã¨œ‘ æ
   1056            strcpy(dispBuf[2], "K1:");
   \                     ??TransmitApp_DisplayResults_5:
   \   0001CD                ; Setup parameters for call to function strcpy
   \   0001CD   7C..         MOV     R4,#`?<Constant "K1:">` & 0xff
   \   0001CF   7D..         MOV     R5,#(`?<Constant "K1:">` >> 8) & 0xff
   \   0001D1   742E         MOV     A,#0x2e
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   AA82         MOV     R2,DPL
   \   0001D8   AB83         MOV     R3,DPH
   \   0001DA   12....       LCALL   ??strcpy?relay
   1057            if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0001DD   90....       MOV     DPTR,#relay
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   6402         XRL     A,#0x2
   \   0001E3   6016         JZ      ??TransmitApp_DisplayResults_6
   1058            {
   1059              if (relay.data[0] & 0x01)
   \   0001E5   A3           INC     DPTR
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001E9   5006         JNC     ??TransmitApp_DisplayResults_7
   1060              {
   1061                strcat(dispBuf[2], "off");
   \   0001EB                ; Setup parameters for call to function strcat
   \   0001EB   7C..         MOV     R4,#`?<Constant "off">` & 0xff
   \   0001ED   7D..         MOV     R5,#(`?<Constant "off">` >> 8) & 0xff
   \   0001EF   800E         SJMP    ??TransmitApp_DisplayResults_8
   1062              }
   1063              else if(relay.data[0] & 0x02)
   \                     ??TransmitApp_DisplayResults_7:
   \   0001F1   A2E1         MOV     C,0xE0 /* A   */.1
   \   0001F3   5016         JNC     ??TransmitApp_DisplayResults_9
   1064              {
   1065                strcat(dispBuf[2], "on");
   \   0001F5                ; Setup parameters for call to function strcat
   \   0001F5   7C..         MOV     R4,#`?<Constant "on">` & 0xff
   \   0001F7   7D..         MOV     R5,#(`?<Constant "on">` >> 8) & 0xff
   \   0001F9   8004         SJMP    ??TransmitApp_DisplayResults_8
   1066              }
   1067            }
   1068            else
   1069            {
   1070              strcat(dispBuf[2], "OFF");
   \                     ??TransmitApp_DisplayResults_6:
   \   0001FB                ; Setup parameters for call to function strcat
   \   0001FB   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0001FD   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_8:
   \   0001FF   742E         MOV     A,#0x2e
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   AA82         MOV     R2,DPL
   \   000206   AB83         MOV     R3,DPH
   \   000208   12....       LCALL   ??strcat?relay
   1071            }
   1072            strcat(dispBuf[2], " K2:");
   \                     ??TransmitApp_DisplayResults_9:
   \   00020B                ; Setup parameters for call to function strcat
   \   00020B   7C..         MOV     R4,#`?<Constant " K2:">` & 0xff
   \   00020D   7D..         MOV     R5,#(`?<Constant " K2:">` >> 8) & 0xff
   \   00020F   742E         MOV     A,#0x2e
   \   000211   12....       LCALL   ?XSTACK_DISP0_8
   \   000214   AA82         MOV     R2,DPL
   \   000216   AB83         MOV     R3,DPH
   \   000218   12....       LCALL   ??strcat?relay
   1073            if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   00021B   90....       MOV     DPTR,#relay
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   6402         XRL     A,#0x2
   \   000221   6016         JZ      ??TransmitApp_DisplayResults_10
   1074            {
   1075              if (relay.data[0] & 0x10)
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \   000225   A2E4         MOV     C,0xE0 /* A   */.4
   \   000227   5006         JNC     ??TransmitApp_DisplayResults_11
   1076              {
   1077                strcat(dispBuf[2], "off");
   \   000229                ; Setup parameters for call to function strcat
   \   000229   7C..         MOV     R4,#`?<Constant "off">` & 0xff
   \   00022B   7D..         MOV     R5,#(`?<Constant "off">` >> 8) & 0xff
   \   00022D   800E         SJMP    ??TransmitApp_DisplayResults_12
   1078              }
   1079              else if(relay.data[0] & 0x20)
   \                     ??TransmitApp_DisplayResults_11:
   \   00022F   A2E5         MOV     C,0xE0 /* A   */.5
   \   000231   5016         JNC     ??TransmitApp_DisplayResults_13
   1080              {
   1081                strcat(dispBuf[2], "on");
   \   000233                ; Setup parameters for call to function strcat
   \   000233   7C..         MOV     R4,#`?<Constant "on">` & 0xff
   \   000235   7D..         MOV     R5,#(`?<Constant "on">` >> 8) & 0xff
   \   000237   8004         SJMP    ??TransmitApp_DisplayResults_12
   1082              }
   1083            }
   1084            else
   1085            {
   1086              strcat(dispBuf[2], "OFF");
   \                     ??TransmitApp_DisplayResults_10:
   \   000239                ; Setup parameters for call to function strcat
   \   000239   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   00023B   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_12:
   \   00023D   742E         MOV     A,#0x2e
   \   00023F   12....       LCALL   ?XSTACK_DISP0_8
   \   000242   AA82         MOV     R2,DPL
   \   000244   AB83         MOV     R3,DPH
   \   000246   12....       LCALL   ??strcat?relay
   1087            }
   1088                 
   1089            // ÷±¡˜µÁª˙‘À––◊¥Ã¨œ‘ æ
   1090            strcpy(dispBuf[3], "Motor:");
   \                     ??TransmitApp_DisplayResults_13:
   \   000249                ; Setup parameters for call to function strcpy
   \   000249   7C..         MOV     R4,#`?<Constant "Motor:">` & 0xff
   \   00024B   7D..         MOV     R5,#(`?<Constant "Motor:">` >> 8) & 0xff
   \   00024D   743E         MOV     A,#0x3e
   \   00024F   12....       LCALL   ?XSTACK_DISP0_8
   \   000252   12....       LCALL   ?Subroutine17 & 0xFFFF
   1091            if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_39:
   \   000255   6024         JZ      ??TransmitApp_DisplayResults_14
   1092            {
   1093              if (motor.data[1] == 1)
   \   000257   90....       MOV     DPTR,#motor + 2
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   6401         XRL     A,#0x1
   \   00025D   7006         JNZ     ??TransmitApp_DisplayResults_15
   1094              {
   1095                strcat(dispBuf[3], "Stop");
   \   00025F                ; Setup parameters for call to function strcat
   \   00025F   7C..         MOV     R4,#`?<Constant "Stop">` & 0xff
   \   000261   7D..         MOV     R5,#(`?<Constant "Stop">` >> 8) & 0xff
   \   000263   801A         SJMP    ??TransmitApp_DisplayResults_16
   1096              }
   1097              else if (motor.data[1] == 2)
   \                     ??TransmitApp_DisplayResults_15:
   \   000265   E0           MOVX    A,@DPTR
   \   000266   6402         XRL     A,#0x2
   \   000268   7006         JNZ     ??TransmitApp_DisplayResults_17
   1098              {
   1099                strcat(dispBuf[3], "Forward");
   \   00026A                ; Setup parameters for call to function strcat
   \   00026A   7C..         MOV     R4,#`?<Constant "Forward">` & 0xff
   \   00026C   7D..         MOV     R5,#(`?<Constant "Forward">` >> 8) & 0xff
   \   00026E   800F         SJMP    ??TransmitApp_DisplayResults_16
   1100              }
   1101              else if(motor.data[1] == 3)
   \                     ??TransmitApp_DisplayResults_17:
   \   000270   E0           MOVX    A,@DPTR
   \   000271   6403         XRL     A,#0x3
   \   000273   7016         JNZ     ??TransmitApp_DisplayResults_18
   1102              {
   1103                strcat(dispBuf[3], "Backward");
   \   000275                ; Setup parameters for call to function strcat
   \   000275   7C..         MOV     R4,#`?<Constant "Backward">` & 0xff
   \   000277   7D..         MOV     R5,#(`?<Constant "Backward">` >> 8) & 0xff
   \   000279   8004         SJMP    ??TransmitApp_DisplayResults_16
   1104              }
   1105            }
   1106            else
   1107            {
   1108              strcat(dispBuf[3], "OFF");
   \                     ??TransmitApp_DisplayResults_14:
   \   00027B                ; Setup parameters for call to function strcat
   \   00027B   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   00027D   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_16:
   \   00027F   743E         MOV     A,#0x3e
   \   000281   12....       LCALL   ?XSTACK_DISP0_8
   \   000284   AA82         MOV     R2,DPL
   \   000286   AB83         MOV     R3,DPH
   \   000288   12....       LCALL   ??strcat?relay
   1109            }
   1110              
   1111            // µÁª˙◊™ÀŸ–≈œ¢œ‘ æ
   1112            strcpy(dispBuf[4], "Speed:");
   \                     ??TransmitApp_DisplayResults_18:
   \   00028B                ; Setup parameters for call to function strcpy
   \   00028B   7C..         MOV     R4,#`?<Constant "Speed:">` & 0xff
   \   00028D   7D..         MOV     R5,#(`?<Constant "Speed:">` >> 8) & 0xff
   \   00028F   744E         MOV     A,#0x4e
   \   000291   12....       LCALL   ?XSTACK_DISP0_8
   \   000294   12....       LCALL   ?Subroutine17 & 0xFFFF
   1113            if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_40:
   \   000297   6046         JZ      ??TransmitApp_DisplayResults_19
   1114            {
   1115              _ltoa(motor.data[0]*60, buf, 10);
   \   000299                ; Setup parameters for call to function _ltoa
   \   000299   85..82       MOV     DPL,?XSP + 0
   \   00029C   85..83       MOV     DPH,?XSP + 1
   \   00029F   8582..       MOV     ?V0 + 2,DPL
   \   0002A2   8583..       MOV     ?V0 + 3,DPH
   \   0002A5   78..         MOV     R0,#?V0 + 2
   \   0002A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002AA   790A         MOV     R1,#0xa
   \   0002AC   90....       MOV     DPTR,#motor + 1
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   75F03C       MOV     B,#0x3c
   \   0002B3   A4           MUL     AB
   \   0002B4   FA           MOV     R2,A
   \   0002B5   A8F0         MOV     R0,B
   \   0002B7   E4           CLR     A
   \   0002B8   28           ADD     A,R0
   \   0002B9   FB           MOV     R3,A
   \   0002BA   33           RLC     A
   \   0002BB   95E0         SUBB    A,0xE0 /* A   */
   \   0002BD   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0002C0   12....       LCALL   ?DEALLOC_XSTACK8
   1116              strcat(dispBuf[4], (char *)buf);
   \   0002C3                ; Setup parameters for call to function strcat
   \   0002C3   85..82       MOV     DPL,?XSP + 0
   \   0002C6   85..83       MOV     DPH,?XSP + 1
   \   0002C9   AC82         MOV     R4,DPL
   \   0002CB   AD83         MOV     R5,DPH
   \   0002CD   744E         MOV     A,#0x4e
   \   0002CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D2   AA82         MOV     R2,DPL
   \   0002D4   AB83         MOV     R3,DPH
   \   0002D6   12....       LCALL   ??strcat?relay
   1117              strcat(dispBuf[4], "RPS");
   \   0002D9                ; Setup parameters for call to function strcat
   \   0002D9   7C..         MOV     R4,#`?<Constant "RPS">` & 0xff
   \   0002DB   7D..         MOV     R5,#(`?<Constant "RPS">` >> 8) & 0xff
   \   0002DD   8004         SJMP    ??TransmitApp_DisplayResults_20
   1118            }
   1119            else
   1120            {
   1121              strcat(dispBuf[4], "OFF");
   \                     ??TransmitApp_DisplayResults_19:
   \   0002DF                ; Setup parameters for call to function strcat
   \   0002DF   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0002E1   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_20:
   \   0002E3   744E         MOV     A,#0x4e
   \   0002E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E8   AA82         MOV     R2,DPL
   \   0002EA   AB83         MOV     R3,DPH
   \   0002EC   12....       LCALL   ??strcat?relay
   1122            }
   1123            
   1124            // µ⁄0Œª¥Ê¥¢—ÃŒÌ/”–∫¶∆¯ÃÂ±®æØ–≈œ¢£¨µ⁄1Œª¥Ê¥¢ª—Ê±®æØ–≈œ¢
   1125            // —ÃŒÌ/”–∫¶∆¯ÃÂºÏ≤‚–≈œ¢–≈œ¢
   1126            strcpy(dispBuf[5], "Gas:");
   \   0002EF                ; Setup parameters for call to function strcpy
   \   0002EF   7C..         MOV     R4,#`?<Constant "Gas:">` & 0xff
   \   0002F1   7D..         MOV     R5,#(`?<Constant "Gas:">` >> 8) & 0xff
   \   0002F3   745E         MOV     A,#0x5e
   \   0002F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F8   12....       LCALL   ?Subroutine18 & 0xFFFF
   1127            if (gasFlame.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_41:
   \   0002FB   6012         JZ      ??TransmitApp_DisplayResults_21
   1128            {
   1129              if (gasFlame.data[0] & 0x01)
   \   0002FD   A3           INC     DPTR
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   A2E0         MOV     C,0xE0 /* A   */.0
   \   000301   5006         JNC     ??TransmitApp_DisplayResults_22
   1130              {
   1131                strcat(dispBuf[5], "Alarm!");
   \   000303                ; Setup parameters for call to function strcat
   \   000303   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000305   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000307   800A         SJMP    ??TransmitApp_DisplayResults_23
   1132              }
   1133              else
   1134              {
   1135                strcat(dispBuf[5], "ON");
   \                     ??TransmitApp_DisplayResults_22:
   \   000309                ; Setup parameters for call to function strcat
   \   000309   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00030B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00030D   8004         SJMP    ??TransmitApp_DisplayResults_23
   1136              }
   1137            }
   1138            else
   1139            {
   1140              strcat(dispBuf[5], "OFF");
   \                     ??TransmitApp_DisplayResults_21:
   \   00030F                ; Setup parameters for call to function strcat
   \   00030F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000311   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_23:
   \   000313   745E         MOV     A,#0x5e
   \   000315   12....       LCALL   ?XSTACK_DISP0_8
   \   000318   AA82         MOV     R2,DPL
   \   00031A   AB83         MOV     R3,DPH
   \   00031C   12....       LCALL   ??strcat?relay
   1141            }
   1142              
   1143            // ª—ÊºÏ≤‚–≈œ¢œ‘ æ
   1144            strcpy(dispBuf[6], "Flame:");
   \   00031F                ; Setup parameters for call to function strcpy
   \   00031F   7C..         MOV     R4,#`?<Constant "Flame:">` & 0xff
   \   000321   7D..         MOV     R5,#(`?<Constant "Flame:">` >> 8) & 0xff
   \   000323   746E         MOV     A,#0x6e
   \   000325   12....       LCALL   ?XSTACK_DISP0_8
   \   000328   12....       LCALL   ?Subroutine18 & 0xFFFF
   1145            if (gasFlame.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_42:
   \   00032B   6012         JZ      ??TransmitApp_DisplayResults_24
   1146            {
   1147              if(gasFlame.data[0] & 0x02)
   \   00032D   A3           INC     DPTR
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000331   5006         JNC     ??TransmitApp_DisplayResults_25
   1148              {
   1149                strcat(dispBuf[6], "Alarm!");
   \   000333                ; Setup parameters for call to function strcat
   \   000333   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000335   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000337   800A         SJMP    ??TransmitApp_DisplayResults_26
   1150              }
   1151              else
   1152              {
   1153                strcat(dispBuf[6], "ON");
   \                     ??TransmitApp_DisplayResults_25:
   \   000339                ; Setup parameters for call to function strcat
   \   000339   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00033B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00033D   8004         SJMP    ??TransmitApp_DisplayResults_26
   1154              }
   1155            }
   1156            else
   1157            {
   1158              strcat(dispBuf[6], "OFF");
   \                     ??TransmitApp_DisplayResults_24:
   \   00033F                ; Setup parameters for call to function strcat
   \   00033F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000341   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_26:
   \   000343   746E         MOV     A,#0x6e
   \   000345   12....       LCALL   ?XSTACK_DISP0_8
   \   000348   AA82         MOV     R2,DPL
   \   00034A   AB83         MOV     R3,DPH
   \   00034C   12....       LCALL   ??strcat?relay
   1159            }
   1160              
   1161            // µ⁄0Œª¥Ê¥¢…˘“Ù±®æØ–≈œ¢£¨µ⁄1Œª¥Ê¥¢’Ò∂Ø±®æØ–≈œ¢
   1162            // …˘“ÙºÏ≤‚–≈œ¢œ‘ æ
   1163            strcpy(dispBuf[7], "Sound:");
   \   00034F                ; Setup parameters for call to function strcpy
   \   00034F   7C..         MOV     R4,#`?<Constant "Sound:">` & 0xff
   \   000351   7D..         MOV     R5,#(`?<Constant "Sound:">` >> 8) & 0xff
   \   000353   747E         MOV     A,#0x7e
   \   000355   12....       LCALL   ?XSTACK_DISP0_8
   \   000358   12....       LCALL   ?Subroutine19 & 0xFFFF
   1164            if (soundVb.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_43:
   \   00035B   6012         JZ      ??TransmitApp_DisplayResults_27
   1165            {
   1166              if (soundVb.data[0] & 0x01)
   \   00035D   A3           INC     DPTR
   \   00035E   E0           MOVX    A,@DPTR
   \   00035F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000361   5006         JNC     ??TransmitApp_DisplayResults_28
   1167              {
   1168                strcat(dispBuf[7], "Alarm!");
   \   000363                ; Setup parameters for call to function strcat
   \   000363   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000365   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000367   800A         SJMP    ??TransmitApp_DisplayResults_29
   1169              }
   1170              else
   1171              {
   1172                strcat(dispBuf[7], "ON");
   \                     ??TransmitApp_DisplayResults_28:
   \   000369                ; Setup parameters for call to function strcat
   \   000369   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00036B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00036D   8004         SJMP    ??TransmitApp_DisplayResults_29
   1173              }
   1174            }
   1175            else
   1176            {
   1177              strcat(dispBuf[7], "OFF");
   \                     ??TransmitApp_DisplayResults_27:
   \   00036F                ; Setup parameters for call to function strcat
   \   00036F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000371   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_29:
   \   000373   747E         MOV     A,#0x7e
   \   000375   12....       LCALL   ?XSTACK_DISP0_8
   \   000378   AA82         MOV     R2,DPL
   \   00037A   AB83         MOV     R3,DPH
   \   00037C   12....       LCALL   ??strcat?relay
   1178            }
   1179            
   1180            // ’∂ØºÏ≤‚–≈œ¢œ‘ æ
   1181            strcpy(dispBuf[8], "Vibrate:");
   \   00037F                ; Setup parameters for call to function strcpy
   \   00037F   7C..         MOV     R4,#`?<Constant "Vibrate:">` & 0xff
   \   000381   7D..         MOV     R5,#(`?<Constant "Vibrate:">` >> 8) & 0xff
   \   000383   748E         MOV     A,#-0x72
   \   000385   12....       LCALL   ?XSTACK_DISP0_8
   \   000388   12....       LCALL   ?Subroutine19 & 0xFFFF
   1182            if (soundVb.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_44:
   \   00038B   6012         JZ      ??TransmitApp_DisplayResults_30
   1183            {
   1184              if(soundVb.data[0] & 0x02)
   \   00038D   A3           INC     DPTR
   \   00038E   E0           MOVX    A,@DPTR
   \   00038F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000391   5006         JNC     ??TransmitApp_DisplayResults_31
   1185              {
   1186                strcat(dispBuf[8], "Alarm!");
   \   000393                ; Setup parameters for call to function strcat
   \   000393   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000395   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000397   800A         SJMP    ??TransmitApp_DisplayResults_32
   1187              }
   1188              else
   1189              {
   1190                strcat(dispBuf[8], "ON");
   \                     ??TransmitApp_DisplayResults_31:
   \   000399                ; Setup parameters for call to function strcat
   \   000399   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00039B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00039D   8004         SJMP    ??TransmitApp_DisplayResults_32
   1191              }
   1192            }
   1193            else
   1194            {
   1195              strcat(dispBuf[8], "OFF");
   \                     ??TransmitApp_DisplayResults_30:
   \   00039F                ; Setup parameters for call to function strcat
   \   00039F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0003A1   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_32:
   \   0003A3   748E         MOV     A,#-0x72
   \   0003A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A8   AA82         MOV     R2,DPL
   \   0003AA   AB83         MOV     R3,DPH
   \   0003AC   12....       LCALL   ??strcat?relay
   1196            }
   1197              
   1198            // »ÀÃÂ∫ÏÕ‚ºÏ≤‚–≈œ¢œ‘ æ
   1199            strcpy(dispBuf[9], "Infrared:");
   \   0003AF                ; Setup parameters for call to function strcpy
   \   0003AF   7C..         MOV     R4,#`?<Constant "Infrared:">` & 0xff
   \   0003B1   7D..         MOV     R5,#(`?<Constant "Infrared:">` >> 8) & 0xff
   \   0003B3   749E         MOV     A,#-0x62
   \   0003B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B8   AA82         MOV     R2,DPL
   \   0003BA   AB83         MOV     R3,DPH
   \   0003BC   12....       LCALL   ??strcpy?relay
   1200            if (infrared.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0003BF   90....       MOV     DPTR,#infrared
   \   0003C2   E0           MOVX    A,@DPTR
   \   0003C3   6402         XRL     A,#0x2
   \   0003C5   6012         JZ      ??TransmitApp_DisplayResults_33
   1201            {
   1202              if (infrared.data[0] & 0x01)
   \   0003C7   A3           INC     DPTR
   \   0003C8   E0           MOVX    A,@DPTR
   \   0003C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003CB   5006         JNC     ??TransmitApp_DisplayResults_34
   1203              {
   1204                strcat(dispBuf[9], "Human!");
   \   0003CD                ; Setup parameters for call to function strcat
   \   0003CD   7C..         MOV     R4,#`?<Constant "Human!">` & 0xff
   \   0003CF   7D..         MOV     R5,#(`?<Constant "Human!">` >> 8) & 0xff
   \   0003D1   800A         SJMP    ??TransmitApp_DisplayResults_35
   1205              }
   1206              else
   1207              {
   1208                 strcat(dispBuf[9], "ON");
   \                     ??TransmitApp_DisplayResults_34:
   \   0003D3                ; Setup parameters for call to function strcat
   \   0003D3   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   0003D5   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   0003D7   8004         SJMP    ??TransmitApp_DisplayResults_35
   1209              }
   1210            }
   1211            else
   1212            {
   1213              strcat(dispBuf[9], "OFF");
   \                     ??TransmitApp_DisplayResults_33:
   \   0003D9                ; Setup parameters for call to function strcat
   \   0003D9   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0003DB   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_35:
   \   0003DD   749E         MOV     A,#-0x62
   \   0003DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E2   AA82         MOV     R2,DPL
   \   0003E4   AB83         MOV     R3,DPH
   \   0003E6   12....       LCALL   ??strcat?relay
   1214            }
   1215          
   1216            // …‰∆µø®¿‡±–≈œ¢œ‘ æ
   1217            strcpy(dispBuf[10], "Card:");
   \   0003E9                ; Setup parameters for call to function strcpy
   \   0003E9   7C..         MOV     R4,#`?<Constant "Card:">` & 0xff
   \   0003EB   7D..         MOV     R5,#(`?<Constant "Card:">` >> 8) & 0xff
   \   0003ED   74AE         MOV     A,#-0x52
   \   0003EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F2   AA82         MOV     R2,DPL
   \   0003F4   AB83         MOV     R3,DPH
   \   0003F6   12....       LCALL   ??strcpy?relay
   1218            if (RfID.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0003F9   90....       MOV     DPTR,#RfID
   \   0003FC   E0           MOVX    A,@DPTR
   \   0003FD   6402         XRL     A,#0x2
   \   0003FF   6044         JZ      ??TransmitApp_DisplayResults_36
   1219            {
   1220              if (RfID.data[0] == 0x01)
   \   000401   A3           INC     DPTR
   \   000402   E0           MOVX    A,@DPTR
   \   000403   6401         XRL     A,#0x1
   \   000405   7012         JNZ     ??TransmitApp_DisplayResults_37
   1221              {
   1222                strcpy(dispBuf[10], "MFOne-S50");
   \   000407                ; Setup parameters for call to function strcpy
   \   000407   7C..         MOV     R4,#`?<Constant "MFOne-S50">` & 0xff
   \   000409   7D..         MOV     R5,#(`?<Constant "MFOne-S50">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_38:
   \   00040B   74AE         MOV     A,#-0x52
   \   00040D   12....       LCALL   ?XSTACK_DISP0_8
   \   000410   AA82         MOV     R2,DPL
   \   000412   AB83         MOV     R3,DPH
   \   000414   12....       LCALL   ??strcpy?relay
   \   000417   803C         SJMP    ??TransmitApp_DisplayResults_39
   1223              }
   1224              else if (RfID.data[0] == 0x02)
   \                     ??TransmitApp_DisplayResults_37:
   \   000419   E0           MOVX    A,@DPTR
   \   00041A   6402         XRL     A,#0x2
   \   00041C   7006         JNZ     ??TransmitApp_DisplayResults_40
   1225              {
   1226                strcpy(dispBuf[10], "MFOne-S70");
   \   00041E                ; Setup parameters for call to function strcpy
   \   00041E   7C..         MOV     R4,#`?<Constant "MFOne-S70">` & 0xff
   \   000420   7D..         MOV     R5,#(`?<Constant "MFOne-S70">` >> 8) & 0xff
   \   000422   80E7         SJMP    ??TransmitApp_DisplayResults_38
   1227              }
   1228              else if (RfID.data[0] == 0x03)
   \                     ??TransmitApp_DisplayResults_40:
   \   000424   E0           MOVX    A,@DPTR
   \   000425   6403         XRL     A,#0x3
   \   000427   7006         JNZ     ??TransmitApp_DisplayResults_41
   1229              {
   1230                strcpy(dispBuf[10], "MF-UltraLight");
   \   000429                ; Setup parameters for call to function strcpy
   \   000429   7C..         MOV     R4,#`?<Constant "MF-UltraLight">` & 0xff
   \   00042B   7D..         MOV     R5,#(`?<Constant "MF-UltraLight">` >> 8) & 0xff
   \   00042D   80DC         SJMP    ??TransmitApp_DisplayResults_38
   1231              }
   1232              else if (RfID.data[0] == 0x04)
   \                     ??TransmitApp_DisplayResults_41:
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   6404         XRL     A,#0x4
   \   000432   7006         JNZ     ??TransmitApp_DisplayResults_42
   1233              {
   1234                strcpy(dispBuf[10], "MF-Pro");
   \   000434                ; Setup parameters for call to function strcpy
   \   000434   7C..         MOV     R4,#`?<Constant "MF-Pro">` & 0xff
   \   000436   7D..         MOV     R5,#(`?<Constant "MF-Pro">` >> 8) & 0xff
   \   000438   80D1         SJMP    ??TransmitApp_DisplayResults_38
   1235              }
   1236              else if (RfID.data[0] == 0x05)
   \                     ??TransmitApp_DisplayResults_42:
   \   00043A   E0           MOVX    A,@DPTR
   \   00043B   6405         XRL     A,#0x5
   \   00043D   7016         JNZ     ??TransmitApp_DisplayResults_39
   1237              {
   1238                strcpy(dispBuf[10], "MF-DesFire");
   \   00043F                ; Setup parameters for call to function strcpy
   \   00043F   7C..         MOV     R4,#`?<Constant "MF-DesFire">` & 0xff
   \   000441   7D..         MOV     R5,#(`?<Constant "MF-DesFire">` >> 8) & 0xff
   \   000443   80C6         SJMP    ??TransmitApp_DisplayResults_38
   1239              }
   1240            }
   1241            else
   1242            {
   1243              strcat(dispBuf[10], "OFF");
   \                     ??TransmitApp_DisplayResults_36:
   \   000445                ; Setup parameters for call to function strcat
   \   000445   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000447   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \   000449   74AE         MOV     A,#-0x52
   \   00044B   12....       LCALL   ?XSTACK_DISP0_8
   \   00044E   AA82         MOV     R2,DPL
   \   000450   AB83         MOV     R3,DPH
   \   000452   12....       LCALL   ??strcat?relay
   1244            }
   1245              
   1246            // RFID…‰∆µø®µƒ–Ú¡–∫≈
   1247            if (!((RfID.data[4] == 0) && (RfID.data[1] == 0) && (RfID.data[2] == 0)
   1248              && (RfID.data[3] == 0)))
   \                     ??TransmitApp_DisplayResults_39:
   \   000455   90....       MOV     DPTR,#RfID + 5
   \   000458   E0           MOVX    A,@DPTR
   \   000459   7011         JNZ     ??TransmitApp_DisplayResults_43
   \   00045B   90....       MOV     DPTR,#RfID + 2
   \   00045E   E0           MOVX    A,@DPTR
   \   00045F   700B         JNZ     ??TransmitApp_DisplayResults_43
   \   000461   A3           INC     DPTR
   \   000462   E0           MOVX    A,@DPTR
   \   000463   7007         JNZ     ??TransmitApp_DisplayResults_43
   \   000465   A3           INC     DPTR
   \   000466   E0           MOVX    A,@DPTR
   \   000467   7003         JNZ     $+5
   \   000469   02....       LJMP    ??TransmitApp_DisplayResults_44 & 0xFFFF
   1249            {
   1250              for (i = 0; i < 4; i++)
   \                     ??TransmitApp_DisplayResults_43:
   \   00046C   7A00         MOV     R2,#0x0
   1251              {
   1252                dispIDBuf[2*i]   = (RfID.data[i+1]&0xF0)>>4;
   \                     ??TransmitApp_DisplayResults_45:
   \   00046E   8A82         MOV     DPL,R2
   \   000470   A882         MOV     R0,DPL
   \   000472   74..         MOV     A,#(RfID + 2) & 0xff
   \   000474   28           ADD     A,R0
   \   000475   F582         MOV     DPL,A
   \   000477   74..         MOV     A,#((RfID + 2) >> 8) & 0xff
   \   000479   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00047C   FB           MOV     R3,A
   \   00047D   E8           MOV     A,R0
   \   00047E   C3           CLR     C
   \   00047F   33           RLC     A
   \   000480   F8           MOV     R0,A
   \   000481   E4           CLR     A
   \   000482   33           RLC     A
   \   000483   F9           MOV     R1,A
   \   000484   EB           MOV     A,R3
   \   000485   C4           SWAP    A
   \   000486   540F         ANL     A,#0xf
   \   000488   C0E0         PUSH    A
   \   00048A   7406         MOV     A,#0x6
   \   00048C   12....       LCALL   ?XSTACK_DISP0_8
   \   00048F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000492   D0E0         POP     A
   \   000494   F0           MOVX    @DPTR,A
   1253                dispIDBuf[2*i+1] =  RfID.data[i+1]&0x0F;
   \   000495   740F         MOV     A,#0xf
   \   000497   5B           ANL     A,R3
   \   000498   C0E0         PUSH    A
   \   00049A   7406         MOV     A,#0x6
   \   00049C   12....       LCALL   ?XSTACK_DISP0_8
   \   00049F   12....       LCALL   ?Subroutine20 & 0xFFFF
   1254              }
   \                     ??CrossCallReturnLabel_46:
   \   0004A2   A3           INC     DPTR
   \   0004A3   D0E0         POP     A
   \   0004A5   F0           MOVX    @DPTR,A
   \   0004A6   0A           INC     R2
   \   0004A7   EA           MOV     A,R2
   \   0004A8   C3           CLR     C
   \   0004A9   9404         SUBB    A,#0x4
   \   0004AB   40C1         JC      ??TransmitApp_DisplayResults_45
   1255              for (i = 0; i < 8; i++)
   \   0004AD   7A00         MOV     R2,#0x0
   1256              {
   1257                if (dispIDBuf[i] <= 0x09)
   \                     ??TransmitApp_DisplayResults_46:
   \   0004AF   8A..         MOV     ?V0 + 2,R2
   \   0004B1   7406         MOV     A,#0x6
   \   0004B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B6   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0004B9   C3           CLR     C
   \   0004BA   940A         SUBB    A,#0xa
   \   0004BC   7406         MOV     A,#0x6
   \   0004BE   500A         JNC     ??TransmitApp_DisplayResults_47
   1258                  dispIDBuf[i] += '0';
   \   0004C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C3   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0004C6   2430         ADD     A,#0x30
   \   0004C8   8008         SJMP    ??TransmitApp_DisplayResults_48
   1259                else if (dispIDBuf[i] >= 0x0A)
   1260                  dispIDBuf[i] += 'A' - 10;
   \                     ??TransmitApp_DisplayResults_47:
   \   0004CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0004CD   12....       LCALL   ?Subroutine16 & 0xFFFF
   1261              }
   \                     ??CrossCallReturnLabel_72:
   \   0004D0   2437         ADD     A,#0x37
   \                     ??TransmitApp_DisplayResults_48:
   \   0004D2   F0           MOVX    @DPTR,A
   \   0004D3   0A           INC     R2
   \   0004D4   EA           MOV     A,R2
   \   0004D5   C3           CLR     C
   \   0004D6   9408         SUBB    A,#0x8
   \   0004D8   40D5         JC      ??TransmitApp_DisplayResults_46
   1262              dispBuf[11][0] = 'I';
   \   0004DA   74BE         MOV     A,#-0x42
   \   0004DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0004DF   7449         MOV     A,#0x49
   \   0004E1   F0           MOVX    @DPTR,A
   1263              dispBuf[11][1] = 'D';
   \   0004E2   74BF         MOV     A,#-0x41
   \   0004E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0004E7   7444         MOV     A,#0x44
   \   0004E9   F0           MOVX    @DPTR,A
   1264              dispBuf[11][2] = ':';
   \   0004EA   74C0         MOV     A,#-0x40
   \   0004EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EF   743A         MOV     A,#0x3a
   \   0004F1   F0           MOVX    @DPTR,A
   1265              for (i = 0; i < 8; i++)
   \   0004F2   7A00         MOV     R2,#0x0
   1266              {
   1267                dispBuf[11][i+3] = dispIDBuf[i];
   \                     ??TransmitApp_DisplayResults_49:
   \   0004F4   8A82         MOV     DPL,R2
   \   0004F6   A882         MOV     R0,DPL
   \   0004F8   7406         MOV     A,#0x6
   \   0004FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0004FD   E582         MOV     A,DPL
   \   0004FF   28           ADD     A,R0
   \   000500   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   1268              }
   \                     ??CrossCallReturnLabel_69:
   \   000503   C0E0         PUSH    A
   \   000505   740E         MOV     A,#0xe
   \   000507   12....       LCALL   ?XSTACK_DISP0_8
   \   00050A   E582         MOV     A,DPL
   \   00050C   28           ADD     A,R0
   \   00050D   F8           MOV     R0,A
   \   00050E   E583         MOV     A,DPH
   \   000510   3400         ADDC    A,#0x0
   \   000512   F9           MOV     R1,A
   \   000513   E8           MOV     A,R0
   \   000514   24B3         ADD     A,#-0x4d
   \   000516   F582         MOV     DPL,A
   \   000518   E9           MOV     A,R1
   \   000519   3400         ADDC    A,#0x0
   \   00051B   F583         MOV     DPH,A
   \   00051D   D0E0         POP     A
   \   00051F   F0           MOVX    @DPTR,A
   \   000520   0A           INC     R2
   \   000521   EA           MOV     A,R2
   \   000522   C3           CLR     C
   \   000523   9408         SUBB    A,#0x8
   \   000525   5029         JNC     ??TransmitApp_DisplayResults_50
   \   000527   80CB         SJMP    ??TransmitApp_DisplayResults_49
   1269            }
   1270            else
   1271            {
   1272              for (i = 0; i < 16; i++)
   \                     ??TransmitApp_DisplayResults_44:
   \   000529   7A00         MOV     R2,#0x0
   1273              {
   1274                dispBuf[11][i] = ' ';
   \                     ??TransmitApp_DisplayResults_51:
   \   00052B   8A..         MOV     ?V0 + 2,R2
   \   00052D   740E         MOV     A,#0xe
   \   00052F   12....       LCALL   ?XSTACK_DISP0_8
   \   000532   E582         MOV     A,DPL
   \   000534   25..         ADD     A,?V0 + 2
   \   000536   F8           MOV     R0,A
   \   000537   E583         MOV     A,DPH
   \   000539   3400         ADDC    A,#0x0
   \   00053B   F9           MOV     R1,A
   \   00053C   E8           MOV     A,R0
   \   00053D   24B0         ADD     A,#-0x50
   \   00053F   F582         MOV     DPL,A
   \   000541   E9           MOV     A,R1
   \   000542   3400         ADDC    A,#0x0
   \   000544   F583         MOV     DPH,A
   \   000546   7420         MOV     A,#0x20
   \   000548   F0           MOVX    @DPTR,A
   1275              }
   \   000549   0A           INC     R2
   \   00054A   EA           MOV     A,R2
   \   00054B   C3           CLR     C
   \   00054C   9410         SUBB    A,#0x10
   \   00054E   40DB         JC      ??TransmitApp_DisplayResults_51
   1276            }
   1277              
   1278            // πˆ∆¡¥¶¿Ì
   1279            if (dispPage == 1)
   \                     ??TransmitApp_DisplayResults_50:
   \   000550   7401         MOV     A,#0x1
   \   000552   6F           XRL     A,R7
   \   000553   707D         JNZ     ??TransmitApp_DisplayResults_52
   1280            {        
   1281              if (*scrollLine > 4) // µ⁄“ª∆¡5––
   \   000555   85..82       MOV     DPL,?V0 + 0
   \   000558   85..83       MOV     DPH,?V0 + 1
   \   00055B   E0           MOVX    A,@DPTR
   \   00055C   C3           CLR     C
   \   00055D   9405         SUBB    A,#0x5
   \   00055F   4002         JC      ??TransmitApp_DisplayResults_53
   1282              {
   1283                *scrollLine = 0;
   \   000561   E4           CLR     A
   \   000562   F0           MOVX    @DPTR,A
   1284              }
   1285              scrollLineTmp = *scrollLine;
   \                     ??TransmitApp_DisplayResults_53:
   \   000563   E0           MOVX    A,@DPTR
   \   000564   FE           MOV     R6,A
   1286              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_1 );
   \   000565                ; Setup parameters for call to function HalLcdWriteString
   \   000565   7901         MOV     R1,#0x1
   \   000567   8E..         MOV     ?V0 + 0,R6
   \   000569   75..00       MOV     ?V0 + 1,#0x0
   \   00056C   7404         MOV     A,#0x4
   \   00056E   78..         MOV     R0,#?V0 + 0
   \   000570   12....       LCALL   ?S_SHL
   \   000573   740E         MOV     A,#0xe
   \   000575   12....       LCALL   ?XSTACK_DISP0_8
   \   000578   12....       LCALL   ?Subroutine14 & 0xFFFF
   1287              if (scrollLineTmp > 4)
   \                     ??CrossCallReturnLabel_33:
   \   00057B   4002         JC      ??TransmitApp_DisplayResults_54
   1288              {
   1289                scrollLineTmp = 0;
   \   00057D   7E00         MOV     R6,#0x0
   1290              }
   1291              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_2 );
   \                     ??TransmitApp_DisplayResults_54:
   \   00057F                ; Setup parameters for call to function HalLcdWriteString
   \   00057F   7902         MOV     R1,#0x2
   \   000581   8E..         MOV     ?V0 + 0,R6
   \   000583   75..00       MOV     ?V0 + 1,#0x0
   \   000586   7404         MOV     A,#0x4
   \   000588   78..         MOV     R0,#?V0 + 0
   \   00058A   12....       LCALL   ?S_SHL
   \   00058D   740E         MOV     A,#0xe
   \   00058F   12....       LCALL   ?XSTACK_DISP0_8
   \   000592   12....       LCALL   ?Subroutine14 & 0xFFFF
   1292              if (scrollLineTmp > 4)
   \                     ??CrossCallReturnLabel_34:
   \   000595   4002         JC      ??TransmitApp_DisplayResults_55
   1293              {
   1294                scrollLineTmp = 0;
   \   000597   7E00         MOV     R6,#0x0
   1295              }
   1296              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_3 );
   \                     ??TransmitApp_DisplayResults_55:
   \   000599                ; Setup parameters for call to function HalLcdWriteString
   \   000599   7903         MOV     R1,#0x3
   \   00059B   8E..         MOV     ?V0 + 0,R6
   \   00059D   75..00       MOV     ?V0 + 1,#0x0
   \   0005A0   7404         MOV     A,#0x4
   \   0005A2   78..         MOV     R0,#?V0 + 0
   \   0005A4   12....       LCALL   ?S_SHL
   \   0005A7   740E         MOV     A,#0xe
   \   0005A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005AC   12....       LCALL   ?Subroutine14 & 0xFFFF
   1297              if (scrollLineTmp > 4)
   \                     ??CrossCallReturnLabel_35:
   \   0005AF   4002         JC      ??TransmitApp_DisplayResults_56
   1298              {
   1299                scrollLineTmp = 0;
   \   0005B1   7E00         MOV     R6,#0x0
   1300              }
   1301              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_4 );
   \                     ??TransmitApp_DisplayResults_56:
   \   0005B3                ; Setup parameters for call to function HalLcdWriteString
   \   0005B3   7904         MOV     R1,#0x4
   \   0005B5   8E..         MOV     ?V0 + 0,R6
   \   0005B7   75..00       MOV     ?V0 + 1,#0x0
   \   0005BA   E9           MOV     A,R1
   \   0005BB   78..         MOV     R0,#?V0 + 0
   \   0005BD   12....       LCALL   ?S_SHL
   \   0005C0   740E         MOV     A,#0xe
   \   0005C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0005C5   12....       LCALL   ?Subroutine29 & 0xFFFF
   1302            }
   1303            else if(dispPage ==2)
   1304            {
   1305              if (*scrollLine > 6) // µ⁄∂˛∆¡7––
   1306              {
   1307                *scrollLine = 0;
   1308              }
   1309              scrollLineTmp = *scrollLine + 5;
   1310              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_1 );
   1311              if (scrollLineTmp > 11)
   1312              {
   1313                scrollLineTmp = 5;
   1314              }
   1315              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_2 );
   1316              if (scrollLineTmp > 11)
   1317              {
   1318                scrollLineTmp = 5;
   1319              }
   1320              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_3 );
   1321              if (scrollLineTmp > 11)
   1322              {
   1323                scrollLineTmp = 5;
   1324              }
   1325              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_4 );
   1326            }
   1327          #endif // LCD_SUPPORTED
   1328          }
   \                     ??CrossCallReturnLabel_59:
   \   0005C8   74CE         MOV     A,#-0x32
   \   0005CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005CD   7F0C         MOV     R7,#0xc
   \   0005CF   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??TransmitApp_DisplayResults_52:
   \   0005D2   7402         MOV     A,#0x2
   \   0005D4   6F           XRL     A,R7
   \   0005D5   70F1         JNZ     ??CrossCallReturnLabel_59
   \   0005D7   85..82       MOV     DPL,?V0 + 0
   \   0005DA   85..83       MOV     DPH,?V0 + 1
   \   0005DD   E0           MOVX    A,@DPTR
   \   0005DE   C3           CLR     C
   \   0005DF   9407         SUBB    A,#0x7
   \   0005E1   4002         JC      ??TransmitApp_DisplayResults_57
   \   0005E3   E4           CLR     A
   \   0005E4   F0           MOVX    @DPTR,A
   \                     ??TransmitApp_DisplayResults_57:
   \   0005E5   E0           MOVX    A,@DPTR
   \   0005E6   2405         ADD     A,#0x5
   \   0005E8   FE           MOV     R6,A
   \   0005E9                ; Setup parameters for call to function HalLcdWriteString
   \   0005E9   7901         MOV     R1,#0x1
   \   0005EB   8E..         MOV     ?V0 + 0,R6
   \   0005ED   75..00       MOV     ?V0 + 1,#0x0
   \   0005F0   7404         MOV     A,#0x4
   \   0005F2   78..         MOV     R0,#?V0 + 0
   \   0005F4   12....       LCALL   ?S_SHL
   \   0005F7   740E         MOV     A,#0xe
   \   0005F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005FC   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0005FF   4002         JC      ??TransmitApp_DisplayResults_58
   \   000601   7E05         MOV     R6,#0x5
   \                     ??TransmitApp_DisplayResults_58:
   \   000603                ; Setup parameters for call to function HalLcdWriteString
   \   000603   7902         MOV     R1,#0x2
   \   000605   8E..         MOV     ?V0 + 0,R6
   \   000607   75..00       MOV     ?V0 + 1,#0x0
   \   00060A   7404         MOV     A,#0x4
   \   00060C   78..         MOV     R0,#?V0 + 0
   \   00060E   12....       LCALL   ?S_SHL
   \   000611   740E         MOV     A,#0xe
   \   000613   12....       LCALL   ?XSTACK_DISP0_8
   \   000616   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000619   4002         JC      ??TransmitApp_DisplayResults_59
   \   00061B   7E05         MOV     R6,#0x5
   \                     ??TransmitApp_DisplayResults_59:
   \   00061D                ; Setup parameters for call to function HalLcdWriteString
   \   00061D   7903         MOV     R1,#0x3
   \   00061F   8E..         MOV     ?V0 + 0,R6
   \   000621   75..00       MOV     ?V0 + 1,#0x0
   \   000624   7404         MOV     A,#0x4
   \   000626   78..         MOV     R0,#?V0 + 0
   \   000628   12....       LCALL   ?S_SHL
   \   00062B   740E         MOV     A,#0xe
   \   00062D   12....       LCALL   ?XSTACK_DISP0_8
   \   000630   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000633   5003         JNC     $+5
   \   000635   02....       LJMP    ??TransmitApp_DisplayResults_56 & 0xFFFF
   \   000638   7E05         MOV     R6,#0x5
   \   00063A   02....       LJMP    ??TransmitApp_DisplayResults_56 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strcpy?relay
   \   000007   90....       MOV     DPTR,#soundVb
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strcpy?relay
   \   000007   90....       MOV     DPTR,#gasFlame
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strcpy?relay
   \   000007   90....       MOV     DPTR,#motor
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 2
   \   000004                REQUIRE ??Subroutine32_0
   \   000004                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine33_0
   \   000004                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   940C         SUBB    A,#0xc
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   9405         SUBB    A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   0E           INC     R6
   \   000004   EE           MOV     A,R6
   \   000005   C3           CLR     C
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   FA           MOV     R2,A
   \   000005   E583         MOV     A,DPH
   \   000007   35..         ADDC    A,?V0 + 1
   \   000009   FB           MOV     R3,A
   \   00000A   12....       LCALL   ??HalLcdWriteString?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   E4           CLR     A
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   FC           MOV     R4,A
   \   000001   FD           MOV     R5,A
   \   000002                REQUIRE ??Subroutine34_0
   \   000002                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ??_ltoa?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
   1329          
   1330          /*******************************************************************************
   1331           * @fn      TransmitAPP_CallBack
   1332           *
   1333           * @brief   Send data OTA.
   1334           *
   1335           * @param   port - UART port.
   1336           * @param   event - the UART port event flag.
   1337           *
   1338           * @return  none
   1339           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1340          void TransmitAPP_CallBack(uint8 port, uint8 event)
   \                     TransmitAPP_CallBack:
   1341          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1342          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for dispPage>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for autoScrollEnable>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DeviceNWKCheck?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DeviceNWKCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendToRelayMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendToRelayMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendToMotorMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendToMotorMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DisplayResults?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DisplayResults

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitAPP_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitAPP_CallBack

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TransmitApp">`:
   \   000000   5472616E     DB "TransmitApp"
   \            736D6974
   \            41707000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RelayCtl">`:
   \   000000   52656C61     DB "RelayCtl"
   \            7943746C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MotorCtl">`:
   \   000000   4D6F746F     DB "MotorCtl"
   \            7243746C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "H:">`:
   \   000000   483A00       DB "H:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%">`:
   \   000000   2500         DB "%"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OFF">`:
   \   000000   4F464600     DB "OFF"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " T:">`:
   \   000000   20543A00     DB " T:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "C">`:
   \   000000   4300         DB "C"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ".">`:
   \   000000   2E00         DB "."

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "C ">`:
   \   000000   432000       DB "C "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "L">`:
   \   000000   4C00         DB "L"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T:OFF L:OFF">`:
   \   000000   543A4F46     DB "T:OFF L:OFF"
   \            46204C3A
   \            4F464600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "K1:">`:
   \   000000   4B313A00     DB "K1:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "off">`:
   \   000000   6F666600     DB "off"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "on">`:
   \   000000   6F6E00       DB "on"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " K2:">`:
   \   000000   204B323A     DB " K2:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Motor:">`:
   \   000000   4D6F746F     DB "Motor:"
   \            723A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Stop">`:
   \   000000   53746F70     DB "Stop"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Forward">`:
   \   000000   466F7277     DB "Forward"
   \            61726400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Backward">`:
   \   000000   4261636B     DB "Backward"
   \            77617264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Speed:">`:
   \   000000   53706565     DB "Speed:"
   \            643A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RPS">`:
   \   000000   52505300     DB "RPS"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Gas:">`:
   \   000000   4761733A     DB "Gas:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Alarm!">`:
   \   000000   416C6172     DB "Alarm!"
   \            6D2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ON">`:
   \   000000   4F4E00       DB "ON"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Flame:">`:
   \   000000   466C616D     DB "Flame:"
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sound:">`:
   \   000000   536F756E     DB "Sound:"
   \            643A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Vibrate:">`:
   \   000000   56696272     DB "Vibrate:"
   \            6174653A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Infrared:">`:
   \   000000   496E6672     DB "Infrared:"
   \            61726564
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Human!">`:
   \   000000   48756D61     DB "Human!"
   \            6E2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Card:">`:
   \   000000   43617264     DB "Card:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MFOne-S50">`:
   \   000000   4D464F6E     DB "MFOne-S50"
   \            652D5335
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MFOne-S70">`:
   \   000000   4D464F6E     DB "MFOne-S70"
   \            652D5337
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MF-UltraLight">`:
   \   000000   4D462D55     DB "MF-UltraLight"
   \            6C747261
   \            4C696768
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MF-Pro">`:
   \   000000   4D462D50     DB "MF-Pro"
   \            726F00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MF-DesFire">`:
   \   000000   4D462D44     DB "MF-DesFire"
   \            65734669
   \            726500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_427a0000:
   \   000000   00007A42     DD 427A0000H
   1343          
   1344          /*******************************************************************************
   1345          *******************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     TransmitAPP_CallBack               0      0      0
     TransmitApp_DeviceNWKCheck         2      0     12
     TransmitApp_DisplayResults         1      0    240
       -> strcpy                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
     TransmitApp_HandleKeys             0      0     21
       -> TransmitApp_SendToRelayMSG
                                        0      0     18
       -> HalLcdWriteString             0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
       -> HalLcdWriteString             0      0     18
       -> NLME_PermitJoiningRequest     0      0     18
       -> HalLedSet                     0      0     18
       -> NLME_PermitJoiningRequest     0      0     18
       -> HalLedSet                     0      0     18
     TransmitApp_Init                   0      0     11
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> HalLcdWriteString             0      0     22
       -> afDataReqMTU                  0      0     22
       -> ZDO_RegisterForZDOMsg         0      0     22
       -> ZDO_RegisterForZDOMsg         0      0     22
       -> osal_start_timerEx            0      0     22
       -> osal_start_timerEx            0      0     22
       -> NLME_PermitJoiningRequest     0      0     22
       -> HalLedSet                     0      0     22
     TransmitApp_MessageMSGCB           0      0     22
     TransmitApp_ProcessEvent           0      0     12
       -> osal_msg_receive              0      0     24
       -> TransmitApp_MessageMSGCB      0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> TransmitApp_HandleKeys        0      0     24
       -> TransmitApp_DeviceNWKCheck
                                        0      0     24
       -> osal_start_timerEx            0      0     24
       -> TransmitApp_DisplayResults
                                        0      0     24
       -> osal_start_timerEx            0      0     24
     TransmitApp_ProcessZDOMsgs         0      0      0
     TransmitApp_SendToMotorMSG         0      0     28
       -> AF_DataRequest                0      0     38
     TransmitApp_SendToRelayMSG         0      0     28
       -> AF_DataRequest                0      0     38


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     TransmitApp_Msg                      102
     TransmitApp_InClusterList             16
     TransmitApp_OutClusterList             6
     TransmitApp_SimpleDesc                12
     TransmitApp_epDesc                     6
     Humit                                  6
     TempLight                              6
     RfID                                   6
     gasFlame                               6
     infrared                               6
     motor                                  6
     relay                                  6
     soundVb                                6
     TransmitApp_TaskID                     1
     TransmitApp_RelayTransID               1
     TransmitApp_MotorTransID               1
     TransmitApp_DstAddr                   12
     TransmitApp_DstRelayAddr              12
     TransmitApp_DstMotorAddr              12
     TransmitApp_MaxDataLength              2
     dispPage                               1
     scrollLine                             1
     autoScrollEnable                       1
     TransmitApp_Init                     222
     ?Subroutine0                           5
     ?Subroutine11                          2
     ??Subroutine30_0                      11
     TransmitApp_ProcessEvent             195
     TransmitApp_ProcessZDOMsgs             3
     TransmitApp_HandleKeys               296
     dispCnt                                1
     relayCmd                               1
     relayStatusCnt                         1
     motorStatusCnt                         1
     networkPermitEn                        1
     TransmitApp_MessageMSGCB             234
     ?Subroutine1                           5
     ?Subroutine8                          18
     ?Subroutine7                           7
     ?Subroutine6                           5
     ?Subroutine5                           5
     ?Subroutine21                          7
     ?Subroutine4                           6
     ?Subroutine22                         10
     ?Subroutine3                          18
     ?Subroutine28                         13
     ?Subroutine2                          16
     ?Subroutine23                          4
     ?Subroutine27                         17
     TransmitApp_DeviceNWKCheck           396
     ?Subroutine12                          5
     humitCnt                               1
     tempLightCnt                           1
     rfIDCnt                                1
     gasFlameCnt                            1
     infraredCnt                            1
     motorCnt                               1
     relayStatusCnt                         1
     soundVbCnt                             1
     TransmitApp_SendToRelayMSG           122
     ?Subroutine24                          1
     ??Subroutine31_0                       7
     ?Subroutine13                          6
     ?Subroutine9                          10
     TransmitApp_SendToMotorMSG           127
     TransmitApp_DisplayResults          1597
     ?Subroutine20                         11
     ?Subroutine19                         14
     ?Subroutine18                         14
     ?Subroutine17                         14
     ?Subroutine16                          4
     ??Subroutine32_0                       4
     ??Subroutine33_0                       6
     ?Subroutine15                          6
     ?Subroutine14                          6
     ?Subroutine25                          7
     ?Subroutine29                         14
     ?Subroutine10                          8
     ?Subroutine26                          2
     ??Subroutine34_0                       6
     TransmitAPP_CallBack                   3
     ?<Initializer for dispPage>            1
     ?<Initializer for autoScrollEnable>    1
     ??TransmitApp_Init?relay               6
     ??TransmitApp_ProcessEvent?relay       6
     ??TransmitApp_ProcessZDOMsgs?relay     6
     ??TransmitApp_HandleKeys?relay         6
     ??TransmitApp_MessageMSGCB?relay       6
     ??TransmitApp_DeviceNWKCheck?relay     6
     ??TransmitApp_SendToRelayMSG?relay     6
     ??TransmitApp_SendToMotorMSG?relay     6
     ??TransmitApp_DisplayResults?relay     6
     ??TransmitAPP_CallBack?relay           6
     ?<Constant "TransmitApp">             12
     ?<Constant "RelayCtl">                 9
     ?<Constant "MotorCtl">                 9
     ?<Constant "H:">                       3
     ?<Constant "%">                        2
     ?<Constant "OFF">                      4
     ?<Constant " T:">                      4
     ?<Constant "C">                        2
     ?<Constant ".">                        2
     ?<Constant "C ">                       3
     ?<Constant "L">                        2
     ?<Constant "T:OFF L:OFF">             12
     ?<Constant "K1:">                      4
     ?<Constant "off">                      4
     ?<Constant "on">                       3
     ?<Constant " K2:">                     5
     ?<Constant "Motor:">                   7
     ?<Constant "Stop">                     5
     ?<Constant "Forward">                  8
     ?<Constant "Backward">                 9
     ?<Constant "Speed:">                   7
     ?<Constant "RPS">                      4
     ?<Constant "Gas:">                     5
     ?<Constant "Alarm!">                   7
     ?<Constant "ON">                       3
     ?<Constant "Flame:">                   7
     ?<Constant "Sound:">                   7
     ?<Constant "Vibrate:">                 9
     ?<Constant "Infrared:">               10
     ?<Constant "Human!">                   7
     ?<Constant "Card:">                    6
     ?<Constant "MFOne-S50">               10
     ?<Constant "MFOne-S70">               10
     ?<Constant "MF-UltraLight">           14
     ?<Constant "MF-Pro">                   7
     ?<Constant "MF-DesFire">              11
     __Constant_427a0000                    4

 
 3 489 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
   271 bytes in segment XDATA_ROM_C
   211 bytes in segment XDATA_Z
 
 3 551 bytes of CODE  memory
   267 bytes of CONST memory (+ 4 bytes shared)
   213 bytes of XDATA memory

Errors: none
Warnings: none
