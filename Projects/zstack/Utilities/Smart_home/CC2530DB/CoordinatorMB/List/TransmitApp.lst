###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         06/May/2021  15:26:10 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\Source\TransmitApp.c                  #
#    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Utili #
#                          ties\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB\f #
#                          8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func         #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\毕设\CC2530-smart_home\Projects\zstack\Utili #
#                          ties\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB\f #
#                          8wConfig.cfg (-DZIGBEEPRO -DSECURE=0               #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1003                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\P #
#                          rojects\zstack\Utilities\Smart_home\Source\Transmi #
#                          tApp.c -D LCD_SUPPORTED -D ZDO_COORDINATOR -D      #
#                          xNV_RESTORE -D HAL_UART=TRUE -D xNV_INIT -D        #
#                          xREFLECTOR -D xHAL_UART_TEST -lC                   #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\CoordinatorMB\List\ -lA      #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\CoordinatorMB\List\          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\CoordinatorMB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Utili #
#                          ties\Smart_home\CC2530DB\ -I                       #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\Source\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\ -I  #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\ha #
#                          l\include\ -I D:\毕设\CC2530-smart_home\Projects\z #
#                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\.. #
#                          \Components\hal\target\CC2530MB\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\include\ -I D:\毕设\CC2530-smart_home\Projects\z #
#                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\.. #
#                          \Components\mac\high_level\ -I                     #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\ -I D:\毕设\CC2530-smart_home\Pr #
#                          ojects\zstack\Utilities\Smart_home\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\low_level\srf04\single_chi #
#                          p\ -I D:\毕设\CC2530-smart_home\Projects\zstack\Ut #
#                          ilities\Smart_home\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mt\ -I D:\毕设\CC2530-smart_home\Projects\zsta #
#                          ck\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I D:\毕设\CC2530-smart_home\Project #
#                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. #
#                          \..\Components\services\sdata\ -I                  #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\af\ -I D:\毕设\CC2530-smart_home\Projects\zsta #
#                          ck\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co #
#                          mponents\stack\nwk\ -I D:\毕设\CC2530-smart_home\P #
#                          rojects\zstack\Utilities\Smart_home\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sapi\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I D:\毕设\CC2530-smart_home\Projects\zst #
#                          ack\Utilities\Smart_home\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sys\ -I D:\毕设\CC2530-smart_home\ #
#                          Projects\zstack\Utilities\Smart_home\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\ -I D:\毕设\CC2530-smart_home\Projects\zstack\U #
#                          tilities\Smart_home\CC2530DB\..\..\..\..\..\Compon #
#                          ents\zmac\f8w\ -Ohz                                #
#    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\CoordinatorMB\List\TransmitA #
#                          pp.lst                                             #
#    Object file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\CoordinatorMB\Obj\TransmitAp #
#                          p.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\毕设\CC2530-smart_home\Projects\zstack\Utilities\Smart_home\Source\TransmitApp.c
      1          /*******************************************************************************
      2            文 件 名：TransmitApp.c
      3            作    者：南京安宸博研电子科技有限公司
      4            创建时间：2013.9.20
      5            修改时间：2020.12.22
      6            IAR 版本：IAR for 8051 V8.10.1
      7            测试平台：MotherBoard V2.1
      8          
      9            说    明：
     10            本程序实现协调器组网，采集传感器信息并在LCD上显示，且可通过按键控制设备运行。
     11            协调器管理8个终端设备，具体如下：
     12                1、温度与光照度传感器；2、烟雾与火焰传感器；3、继电器；4、温湿度传感器；
     13                5、声音与震动传感器；  6、人体红外检测传感器；7、电机；8、RFID检测器。
     14          
     15            终端设备周期性发送信息给协调器，协调器将数据缓存起来，然后定时2s在LCD显示出来。
     16            在终端设备中，DHT11温湿度传感器是每隔5秒采集一次，其余都是每隔1秒采集一次。
     17           
     18            按键：
     19                 (此处的按键标号是软件内部标号，与开发板上的标号并非一一对应)
     20                 SW1(UP)    ：行显示++(页面上翻)；
     21                 SW2(RIGHT) ：控制继电器，每按一下按键，继电器状态切换一次；
     22                 SW3(DOWN)  ：行显示--(页面下翻)；
     23                 SW4(LEFT)  ：控制直流电机，每按下一次按键，直流电机的状态切换一次；
     24                 SW5(OK)    ：显示切换，同时打开屏幕滚动显示；显示信息分为两屏，
     25                              1、第一屏显示采集到的温湿度、光照信息、继电器和直流电机，
     26                                由于增加电机转速显示后，需要滚动显示；
     27                              2、取消第一屏的滚动显示；
     28                              3、第二屏显示告警信息，第二屏四行显示不全，需要滚动显示；
     29                              4、取消第二屏的滚动显示；
     30                 SW7(CANCEL)：打开/关闭协调器组网功能，灯亮表示允许，灯灭表示不允许。
     31                              请注意：系统默认关闭组网功能，如有需要，请按SW7键打开。
     32          
     33            LCD:
     34                显示部分，传感器信息显示事件是自动运行的，默认显示的是第一屏信息，手动
     35                按键SW5可以切换到第二屏，第二屏默认滚动显示，再次按下按键SW5可以关闭滚
     36                动显示，此时按键SW1和SW3可以控制滚动屏幕向上或者向下，
     37                LCD显示举例说明：
     38                         第一屏：H:OFF T:OFF(湿度、温度设备离线)
     39                                 T:32.5C L:320L(温度32.5度，光照强度：320流明)
     40                                 K1:off K2:on(继电器K1关闭，K2打开，如果是OFF表示离线)
     41                                 Motor:Stop(电机停转，如果是OFF表示离线)
     42                                 Speed:0RPS(电机目前转速为0转/分钟)
     43          
     44                         第二屏：Gas:OFF(烟雾传感器离线)
     45                                 Flame:OFF(火焰传感器离线)
     46                                 Sound:ON(声音传感器在线，没有报警)
     47                                 Vibrate:Alarm!(震动报警)
     48                                 Infrared:ON(人体红外检测在线，没有报警)
     49                                 Card:OFF(射频卡设备离线)
     50                                         (此行空白，因为射频卡设备离线，所以没有ID信息)
     51            
     52            设备在线检测：
     53                主要是TransmitApp_DeviceNWKCheck(void)函数来检测各个设备是否在限定的时间内
     54                发送数据，如果超时，判定设备离线。如果设备发送数据，那么相应的deviceInfo_t
     55                结构体中的deviceNWKStatus标记为1，如果超时，标记为0，显示部分的函数只需读
     56                取设备的网络状态就可以判定是否离线了。
     57          *******************************************************************************/
     58          
     59          /*******************************************************************************
     60           * INCLUDES
     61           */
     62          #include "OSAL.h"
     63          #include "AF.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          #include "nwk_util.h"
     67          
     68          #include "TransmitApp.h"
     69          #include "OnBoard.h"
     70          
     71          #include "DebugTrace.h"
     72          #include "string.h"
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          
     80          /*******************************************************************************
     81           * MACROS
     82           */
     83          
     84          // 设备离线定时计数临界值
     85          #define  DEVICE_NWK_CNT_LIMIT 3
     86          
     87          // Send with or without APS ACKs
     88          #define TRANSMITAPP_TX_OPTIONS              AF_DISCV_ROUTE
     89          
     90          // 第一次LCD显示延时
     91          #define TRANSMITAPP_DISPLAY_DELAY           10000
     92          // LCD每次显示时间间隔
     93          #define TRANSMITAPP_DISPLAY_TIMER           2000
     94          
     95          #define TRANSMITAPP_DEVICE_CHECK_DELAY      5000
     96          #define TRANSMITAPP_DEVICE_CHECK_TIMER      2000 
     97          // not used here
     98          #define TRANSMITAPP_MATCH_TIMER     
     99          // not used here
    100          #define TRANSMITAPP_BIND_TIMER      
    101          
    102          #if defined ( TRANSMITAPP_FRAGMENTED )
    103          #define TRANSMITAPP_MAX_DATA_LEN            225
    104          #else
    105          #define TRANSMITAPP_MAX_DATA_LEN            102
    106          #endif
    107          
    108          /*******************************************************************************
    109           * GLOBAL VARIABLES
    110           */
    111          
    112          // This is the buffer that is sent out as data.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
    114          
    115          // This is the Cluster ID List and should be filled with Application
    116          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    117          const cId_t TransmitApp_InClusterList[TRANSMITAPP_MAX_INCLUSTERS] =
   \                     TransmitApp_InClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0500         DW 5
   \   00000A   0600         DW 6
   \   00000C   0700         DW 7
   \   00000E   0800         DW 8
    118          {
    119            TRANSMITAPP_CLUSTERID_HUMITMSG,      // 温湿度
    120            TRANSMITAPP_CLUSTERID_TEMPLIGHTMSG,  // 温度光照
    121            TRANSMITAPP_CLUSTERID_RFIDMSG,       // 射频卡
    122            TRANSMITAPP_CLUSTERID_GASFLAMEMSG,   // 气体火焰
    123            TRANSMITAPP_CLUSTERID_INFRAREDMSG,   // 人体红外
    124            TRANSMITAPP_CLUSTERID_SOUNDVBMSG,    // 声音震动
    125            TRANSMITAPP_CLUSTERID_MOTORSTATUSMSG,// 电机状态
    126            TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG // 继电器状态
    127          };
    128          

   \                                 In  segment XDATA_ROM_C, align 1
    129          const cId_t TransmitApp_OutClusterList[TRANSMITAPP_MAX_OUTCLUSTERS] =
   \                     TransmitApp_OutClusterList:
   \   000000   0900         DW 9
   \   000002   0A00         DW 10
   \   000004   0B00         DW 11
    130          {
    131            TRANSMITAPP_CLUSTERID_TESTMSG,    
    132            TRANSMITAPP_CLUSTERID_RELAYCTLMSG,   // 继电器
    133            TRANSMITAPP_CLUSTERID_MOTORCTLMSG    // 直流电机
    134          };
    135          

   \                                 In  segment XDATA_ROM_C, align 1
    136          const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
   \                     TransmitApp_SimpleDesc:
   \   000000   01           DB 1
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   08           DB 8
   \   000007   ....         DW TransmitApp_InClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW TransmitApp_OutClusterList
    137          {
    138            TRANSMITAPP_ENDPOINT,                //  int    Endpoint;
    139            TRANSMITAPP_PROFID,                  //  uint16 AppProfId[2];
    140            TRANSMITAPP_DEVICEID,                //  uint16 AppDeviceId[2];
    141            TRANSMITAPP_DEVICE_VERSION,          //  int    AppDevVer:4;
    142            TRANSMITAPP_FLAGS,                   //  int    AppFlags:4;
    143            TRANSMITAPP_MAX_INCLUSTERS,          
    144            (cId_t *)TransmitApp_InClusterList,  
    145            TRANSMITAPP_MAX_OUTCLUSTERS,         
    146            (cId_t *)TransmitApp_OutClusterList  
    147          };
    148          
    149          // This is the Endpoint/Interface description.  It is defined here, but
    150          // filled-in in TransmitApp_Init().  Another way to go would be to fill
    151          // in the structure here and make it a "const" (in code space).  The
    152          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          endPointDesc_t TransmitApp_epDesc;    // 定义节点
   \                     TransmitApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    154          
    155          
    156          /*******************************************************************************
    157           *串口配置
    158           */
    159          #define TRANSMIT_APP_PORT  0
    160          // zstack default: 38400
    161          #define TRANSMIT_APP_BAUD  HAL_UART_BR_38400
    162          // When the Rx buf space is less than this threshold, invoke the Rx callback.
    163          #define TRANSMIT_APP_THRESH  64
    164          #define TRANSMIT_APP_RX_SZ  128
    165          #define TRANSMIT_APP_TX_SZ  128
    166          // Millisecs of idle time after a byte is received before invoking Rx callback.
    167          #define TRANSMIT_APP_IDLE  6
    168          // Loopback Rx bytes to Tx for throughput testing.
    169          #define TRANSMIT_APP_LOOPBACK  FALSE
    170          
    171          /*关于显示部分相关的宏*/
    172          #define LCD_PAGE_MAX         4     //目前目录页最多4页
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          static int8 Ctrlcase = 0;    //0用来控制屏幕显示，1控制继电器，2控制电机
   \                     Ctrlcase:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          static int8 LCD_Page  =  0;  //终端状态显示
   \                     LCD_Page:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          /* 直流电机状态(status)定义*/
    177          #define  HAL_MOTOR_STOP            0x01
    178          #define  HAL_MOTOR_FORWARD         0x02
    179          #define  HAL_MOTOR_BACKWARD        0x03
    180          #define  MOTOR_MAX_SPEED           2400
    181          
    182          /*********************************************************************
    183           * LOCAL VARIABLES
    184           */
    185          // 温湿度缓存, 第一个字节是湿度，第二个字节是温度(均是整数)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          deviceInfo_t Humit;
   \                     Humit:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    187          // 温度光照缓存, 前两个字节是温度整数和小数, 后两个字节是光照的16位整数 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          deviceInfo_t TempLight;
   \                     TempLight:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    189          // RFID 信息

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          deviceInfo_t RfID;
   \                     RfID:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    191          //气体火焰

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          deviceInfo_t gasFlame;
   \                     gasFlame:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    193          //人体红外

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          deviceInfo_t infrared;
   \                     infrared:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    195          //电机状态

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          deviceInfo_t motor;
   \                     motor:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    197          //继电器状态

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          deviceInfo_t relay;
   \                     relay:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    199          //声音震动

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          deviceInfo_t soundVb;
   \                     soundVb:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    201          
    202          // Task ID for event processing - received when TransmitApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          byte TransmitApp_TaskID;
   \                     TransmitApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          static byte TransmitApp_RelayTransID;  // This is the unique message ID (counter)
   \                     TransmitApp_RelayTransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static byte TransmitApp_MotorTransID;  // This is the unique message ID (counter)
   \                     TransmitApp_MotorTransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    207          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          afAddrType_t TransmitApp_DstAddr;
   \                     TransmitApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    209          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          afAddrType_t TransmitApp_DstRelayAddr;
   \                     TransmitApp_DstRelayAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    211          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          afAddrType_t TransmitApp_DstMotorAddr;
   \                     TransmitApp_DstMotorAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    213          
    214          // Max Data Request Length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          uint16 TransmitApp_MaxDataLength;
   \                     TransmitApp_MaxDataLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    216          
    217          // LCD显示
    218          static uint8 dispPage=1;
                              ^
Warning[Pe177]: variable "dispPage" was declared but never referenced

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static uint8 scrollLine=0;
   \                     scrollLine:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    220          //LCD屏幕滚动开关

   \                                 In  segment XDATA_I, align 1, keep-with-next
    221          static uint8 autoScrollEnable=1;
   \                     autoScrollEnable:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for autoScrollEnable>`
   \   000001                REQUIRE __INIT_XDATA_I
    222          
    223          /*******************************************************************************
    224           * LOCAL FUNCTIONS
    225           */
    226          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    227          void TransmitApp_HandleKeys( byte shift, byte keys );
    228          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    229          void TransmitApp_SendToRelayMSG( uint8 cmd );
    230          void TransmitApp_SendToMotorMSG( uint8 cmd,uint8 speed );
    231          void TransmitAPP_CallBack(uint8 port, uint8 event);
    232          void TransmitApp_DisplayResults( uint8 dispPage, uint8 *scrollLine);
    233          void TransmitApp_DeviceNWKCheck(void);
    234          void Smart_home_Display(void);
    235          
    236          /*******************************************************************************
    237           * @fn      TransmitApp_Init
    238           *
    239           * @brief   Initialization function for the Generic App Task.
    240           *          This is called during initialization and should contain
    241           *          any application specific initialization (ie. hardware
    242           *          initialization/setup, table initialization, power up
    243           *          notificaiton ... ).
    244           *
    245           * @param   task_id - the ID assigned by OSAL.  This ID should be
    246           *                    used to send messages and set timers.
    247           *
    248           * @return  none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void TransmitApp_Init( byte task_id )
   \                     TransmitApp_Init:
    251          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 31
   \   000005   74E1         MOV     A,#-0x1f
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    252          #if HAL_UART==TRUE
    253            halUARTCfg_t uartConfig;
    254          
    255            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
    256            uartConfig.baudRate             = TRANSMIT_APP_BAUD;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7402         MOV     A,#0x2
   \   00001B   F0           MOVX    @DPTR,A
    257            uartConfig.flowControl          = FALSE;
   \   00001C   7404         MOV     A,#0x4
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
    258            uartConfig.flowControlThreshold = TRANSMIT_APP_THRESH; // 2x30 don't care - see uart driver.
   \   000023   7405         MOV     A,#0x5
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7440         MOV     A,#0x40
   \   00002A   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    259            uartConfig.rx.maxBufSize        = TRANSMIT_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \                     ??CrossCallReturnLabel_100:
   \   00002D   740C         MOV     A,#0xc
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine11 & 0xFFFF
    260            uartConfig.tx.maxBufSize        = TRANSMIT_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \                     ??CrossCallReturnLabel_103:
   \   000035   7414         MOV     A,#0x14
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine11 & 0xFFFF
    261            uartConfig.idleTimeout          = TRANSMIT_APP_IDLE;   // 2x30 don't care - see uart driver.
   \                     ??CrossCallReturnLabel_104:
   \   00003D   7407         MOV     A,#0x7
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   7406         MOV     A,#0x6
   \   000044   F0           MOVX    @DPTR,A
    262            uartConfig.intEnable            = FALSE;              // 2x30 don't care - see uart driver.
   \   000045   7418         MOV     A,#0x18
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
    263            uartConfig.callBackFunc         = TransmitAPP_CallBack;
   \   00004C   741D         MOV     A,#0x1d
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   74..         MOV     A,#??TransmitAPP_CallBack?relay & 0xff
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   74..         MOV     A,#(??TransmitAPP_CallBack?relay >> 8) & 0xff
   \   000057   F0           MOVX    @DPTR,A
    264            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \   000058                ; Setup parameters for call to function HalUARTOpen
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   AA82         MOV     R2,DPL
   \   00005F   AB83         MOV     R3,DPH
   \   000061   7900         MOV     R1,#0x0
   \   000063   12....       LCALL   ??HalUARTOpen?relay
    265          #endif
    266            
    267          #if !defined ( TRANSMITAPP_FRAGMENTED )
    268            afDataReqMTU_t mtu;
    269          #endif
    270            uint16 i;
    271          
    272            TransmitApp_TaskID = task_id;
   \   000066   EE           MOV     A,R6
   \   000067   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00006A   F0           MOVX    @DPTR,A
    273            TransmitApp_RelayTransID = 0;
   \   00006B   90....       MOV     DPTR,#TransmitApp_RelayTransID
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    274            TransmitApp_MotorTransID = 0;
   \   000070   90....       MOV     DPTR,#TransmitApp_MotorTransID
   \   000073   F0           MOVX    @DPTR,A
    275          
    276            // Device hardware initialization can be added here or in main() (Zmain.c).
    277            // If the hardware is application specific - add it here.
    278            // If the hardware is other parts of the device add it in main().
    279          
    280            //TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
    281            //TransmitApp_DstAddr.endPoint = 0;
    282            //TransmitApp_DstAddr.addr.shortAddr = 0;
    283          
    284            // Fill out the endpoint description.
    285            // 初始化节点
    286            TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;   // 端口号
   \   000074   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000077   04           INC     A
   \   000078   F0           MOVX    @DPTR,A
    287            TransmitApp_epDesc.task_id = &TransmitApp_TaskID;     // 任务ID
   \   000079   A3           INC     DPTR
   \   00007A   74..         MOV     A,#TransmitApp_TaskID & 0xff
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   74..         MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
   \   000080   F0           MOVX    @DPTR,A
    288            TransmitApp_epDesc.simpleDesc                         // 简单描述符来描述端口
    289                      = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
   \   000081   A3           INC     DPTR
   \   000082   74..         MOV     A,#TransmitApp_SimpleDesc & 0xff
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   74..         MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
   \   000088   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    290            TransmitApp_epDesc.latencyReq = noLatencyReqs;
    291          
    292            // Register the endpoint/interface description with the AF
    293            afRegister( &TransmitApp_epDesc );
   \                     ??CrossCallReturnLabel_99:
   \   00008B                ; Setup parameters for call to function afRegister
   \   00008B   7A..         MOV     R2,#TransmitApp_epDesc & 0xff
   \   00008D   7B..         MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
   \   00008F   12....       LCALL   ??afRegister?relay
    294          
    295            // Register for all key events - This app will handle all key events
    296            RegisterForKeys( TransmitApp_TaskID );
   \   000092                ; Setup parameters for call to function RegisterForKeys
   \   000092   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   ??RegisterForKeys?relay
    297          
    298            // Update the display
    299          #if defined ( LCD_SUPPORTED )
    300            HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
   \   00009A                ; Setup parameters for call to function HalLcdWriteString
   \   00009A   7902         MOV     R1,#0x2
   \   00009C   7A..         MOV     R2,#`?<Constant "TransmitApp">` & 0xff
   \   00009E   7B..         MOV     R3,#(`?<Constant "TransmitApp">` >> 8) & 0xff
   \   0000A0   12....       LCALL   ??HalLcdWriteString?relay
    301          #endif
    302          
    303            // Set the data length
    304          #if defined ( TRANSMITAPP_FRAGMENTED )
    305            TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
    306          #else
    307            mtu.kvp        = FALSE;
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E4           CLR     A
   \   0000AA   F0           MOVX    @DPTR,A
    308            mtu.aps.secure = FALSE;
   \   0000AB   04           INC     A
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   E4           CLR     A
   \   0000B0   F0           MOVX    @DPTR,A
    309            TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
   \   0000B1                ; Setup parameters for call to function afDataReqMTU
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   AA82         MOV     R2,DPL
   \   0000B9   AB83         MOV     R3,DPH
   \   0000BB   12....       LCALL   ??afDataReqMTU?relay
   \   0000BE   E9           MOV     A,R1
   \   0000BF   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000C2   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    310          #endif
    311          
    312            // 发送数据清零
    313            for (i = 0; i < TransmitApp_MaxDataLength; i++)
   \                     ??CrossCallReturnLabel_101:
   \   0000C5   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   6014         JZ      ??TransmitApp_Init_0
    314            {
    315              TransmitApp_Msg[i] = 0;
   \   0000CB   F8           MOV     R0,A
   \   0000CC   7900         MOV     R1,#0x0
   \   0000CE   90....       MOV     DPTR,#TransmitApp_Msg
   \                     ??TransmitApp_Init_1:
   \   0000D1   E4           CLR     A
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E8           MOV     A,R0
   \   0000D5   24FF         ADD     A,#-0x1
   \   0000D7   18           DEC     R0
   \   0000D8   E9           MOV     A,R1
   \   0000D9   34FF         ADDC    A,#-0x1
   \   0000DB   F9           MOV     R1,A
   \   0000DC   48           ORL     A,R0
   \   0000DD   70F2         JNZ     ??TransmitApp_Init_1
    316            }
    317          
    318            // 注册两个MSG
    319            // 绑定需要一种即可, 无需两种?????
    320            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
   \                     ??TransmitApp_Init_0:
   \   0000DF                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000DF   7A20         MOV     R2,#0x20
   \   0000E1   7B80         MOV     R3,#-0x80
   \   0000E3   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    321            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
   \   0000EB                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000EB   7A06         MOV     R2,#0x6
   \   0000ED   7B80         MOV     R3,#-0x80
   \   0000EF   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F9           MOV     R1,A
   \   0000F4   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    322            
    323            // 打开显示，第一次延时周期较长
    324            osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DISPLAY_EVT, 
    325                                TRANSMITAPP_DISPLAY_DELAY);
   \   0000F7                ; Setup parameters for call to function osal_start_timerEx
   \   0000F7   7C10         MOV     R4,#0x10
   \   0000F9   7D27         MOV     R5,#0x27
   \   0000FB   12....       LCALL   ?Subroutine15 & 0xFFFF
    326            
    327            // 打开设备在线检测，第一次开启检测延时较长时间
    328            osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DEVICE_CHECK_EVT, 
    329                                TRANSMITAPP_DEVICE_CHECK_DELAY);
   \                     ??CrossCallReturnLabel_83:
   \   0000FE                ; Setup parameters for call to function osal_start_timerEx
   \   0000FE   7C88         MOV     R4,#-0x78
   \   000100   7D13         MOV     R5,#0x13
   \   000102   7A80         MOV     R2,#-0x80
   \   000104   12....       LCALL   ??Subroutine40_0 & 0xFFFF
    330            
    331            // 关闭LED灯(D4)，表示协调器默认不允许组网
    332            NLME_PermitJoiningRequest(0x00);
   \                     ??CrossCallReturnLabel_85:
   \   000107                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000107   7900         MOV     R1,#0x0
   \   000109   12....       LCALL   ??NLME_PermitJoiningRequest?relay
    333            HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
   \   00010C                ; Setup parameters for call to function HalLedSet
   \   00010C   7A00         MOV     R2,#0x0
   \   00010E   7901         MOV     R1,#0x1
   \   000110   12....       LCALL   ??HalLedSet?relay
    334            
    335            // 设备离线状态检测初始化，初始化为离线
    336            Humit.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
   \   000113   90....       MOV     DPTR,#Humit
   \   000116   7402         MOV     A,#0x2
   \   000118   F0           MOVX    @DPTR,A
    337            TempLight.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   000119   90....       MOV     DPTR,#TempLight
   \   00011C   F0           MOVX    @DPTR,A
    338            RfID.deviceNWKStatus      = DEVICE_NWK_OFFLINE;
   \   00011D   90....       MOV     DPTR,#RfID
   \   000120   F0           MOVX    @DPTR,A
    339            gasFlame.deviceNWKStatus  = DEVICE_NWK_OFFLINE;
   \   000121   90....       MOV     DPTR,#gasFlame
   \   000124   F0           MOVX    @DPTR,A
    340            infrared.deviceNWKStatus  = DEVICE_NWK_OFFLINE;
   \   000125   90....       MOV     DPTR,#infrared
   \   000128   F0           MOVX    @DPTR,A
    341            soundVb.deviceNWKStatus   = DEVICE_NWK_OFFLINE;
   \   000129   90....       MOV     DPTR,#soundVb
   \   00012C   F0           MOVX    @DPTR,A
    342            motor.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
   \   00012D   90....       MOV     DPTR,#motor
   \   000130   F0           MOVX    @DPTR,A
    343            relay.deviceNWKStatus     = DEVICE_NWK_OFFLINE;
   \   000131   90....       MOV     DPTR,#relay
   \   000134   F0           MOVX    @DPTR,A
    344          }
   \   000135   741F         MOV     A,#0x1f
   \   000137   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013A                REQUIRE ?Subroutine0
   \   00013A                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7A10         MOV     R2,#0x10
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7480         MOV     A,#-0x80
   \   000002                REQUIRE ??Subroutine45_0
   \   000002                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    345          
    346          /*******************************************************************************
    347           * @fn      TransmitApp_ProcessEvent
    348           *
    349           * @brief   Generic Application Task event processor.  This function
    350           *          is called to process all events for the task.  Events
    351           *          include timers, messages and any other user defined events.
    352           *
    353           * @param   task_id  - The OSAL assigned task ID.
    354           * @param   events - events to process.  This is a bit map and can
    355           *                   contain more than one event.
    356           *
    357           * @return  none
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
   \                     TransmitApp_ProcessEvent:
    360          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    361            afIncomingMSGPacket_t *MSGpkt;
    362            afDataConfirm_t *afDataConfirm;
    363            (void)task_id;  // Intentionally unreferenced parameter
    364          
    365            // Data Confirmation message fields
    366            ZStatus_t sentStatus;
    367            byte sentEP;
    368          
    369            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   604D         JZ      ??TransmitApp_ProcessEvent_0
    370            {
    371              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   800E         SJMP    ??TransmitApp_ProcessEvent_1
    372              while ( MSGpkt )
    373              {
    374                switch ( MSGpkt->hdr.event )
    375                {
    376                  case ZDO_CB_MSG:
    377                    TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    378                    break;
    379          
    380                  case KEY_CHANGE:
    381                    TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    382                    break;
    383          
    384                  case AF_DATA_CONFIRM_CMD:
    385                    // This message is received as a confirmation of a data packet sent.
    386                    // The status is of ZStatus_t type [defined in ZComDef.h]
    387                    // The message fields are defined in AF.h
    388                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    389                    sentEP = afDataConfirm->endpoint;
    390                    sentStatus = afDataConfirm->hdr.status;
    391           
    392                    if ( (ZSuccess == sentStatus) &&
    393                         (TransmitApp_epDesc.endPoint == sentEP) )
    394                    {  
    395                    }
    396                    break;
    397          
    398                  case AF_INCOMING_MSG_CMD:
    399                    TransmitApp_MessageMSGCB( MSGpkt );
   \                     ??TransmitApp_ProcessEvent_2:
   \   00000F                ; Setup parameters for call to function TransmitApp_MessageMSGCB
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   AB..         MOV     R3,?V0 + 1
   \   000013   12....       LCALL   ??TransmitApp_MessageMSGCB?relay
    400                    break;
    401          
    402                  case ZDO_STATE_CHANGE:
    403                    break;
    404          
    405                  default:
    406                    break;
    407                }
    408          
    409                // Release the memory
    410                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TransmitApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   AA..         MOV     R2,?V0 + 0
   \   000018   AB..         MOV     R3,?V0 + 1
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    411          
    412                // Next
    413                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??TransmitApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 0,R2
   \   000027   8B..         MOV     ?V0 + 1,R3
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   45..         ORL     A,?V0 + 1
   \   00002D   6023         JZ      ??TransmitApp_ProcessEvent_4
   \   00002F   85..82       MOV     DPL,?V0 + 0
   \   000032   85..83       MOV     DPH,?V0 + 1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   60D5         JZ      ??TransmitApp_ProcessEvent_2
   \   00003A   245A         ADD     A,#0x5a
   \   00003C   70D8         JNZ     ??TransmitApp_ProcessEvent_3
   \   00003E                ; Setup parameters for call to function TransmitApp_HandleKeys
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FA           MOV     R2,A
   \   000043   85..82       MOV     DPL,?V0 + 0
   \   000046   85..83       MOV     DPH,?V0 + 1
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   ??TransmitApp_HandleKeys?relay
   \   000050   80C4         SJMP    ??TransmitApp_ProcessEvent_3
    414              }
    415          
    416              // Squash compiler warnings until values are used.
    417              (void)sentStatus;
    418              (void)sentEP;
    419          
    420              // Return unprocessed events
    421              return (events ^ SYS_EVENT_MSG);
   \                     ??TransmitApp_ProcessEvent_4:
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   6480         XRL     A,#0x80
   \                     ??TransmitApp_ProcessEvent_5:
   \   000057   FB           MOV     R3,A
   \   000058   805B         SJMP    ??TransmitApp_ProcessEvent_6
    422            }
    423          
    424            // Send a message out, 本实验协调器没有周期发送数任务
    425            if ( events & TRANSMITAPP_SEND_MSG_EVT )
   \                     ??TransmitApp_ProcessEvent_0:
   \   00005A   EE           MOV     A,R6
   \   00005B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005D   5005         JNC     ??TransmitApp_ProcessEvent_7
    426            {      
    427              // Return unprocessed events
    428              return (events ^ TRANSMITAPP_SEND_MSG_EVT);
   \   00005F   6401         XRL     A,#0x1
   \                     ??TransmitApp_ProcessEvent_8:
   \   000061   FA           MOV     R2,A
   \   000062   8051         SJMP    ??TransmitApp_ProcessEvent_6
    429            }
    430            
    431            // 设备状态检查事件
    432            if ( events & TRANSMITAPP_DEVICE_CHECK_EVT )
   \                     ??TransmitApp_ProcessEvent_7:
   \   000064   5480         ANL     A,#0x80
   \   000066   6013         JZ      ??TransmitApp_ProcessEvent_9
    433            {
    434              // 调用设备网络状态监测函数
    435              TransmitApp_DeviceNWKCheck(); 
   \   000068                ; Setup parameters for call to function TransmitApp_DeviceNWKCheck
   \   000068   12....       LCALL   ??TransmitApp_DeviceNWKCheck?relay
    436              
    437              // 任务需要周期性运行
    438              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DEVICE_CHECK_EVT, 
    439                                  TRANSMITAPP_DEVICE_CHECK_TIMER);
   \   00006B                ; Setup parameters for call to function osal_start_timerEx
   \   00006B   7CD0         MOV     R4,#-0x30
   \   00006D   7D07         MOV     R5,#0x7
   \   00006F   7A80         MOV     R2,#-0x80
   \   000071   12....       LCALL   ??Subroutine40_0 & 0xFFFF
    440              
    441              // Return unprocessed events
    442              return (events ^ TRANSMITAPP_DEVICE_CHECK_EVT);
   \                     ??CrossCallReturnLabel_86:
   \   000074   EE           MOV     A,R6
   \   000075   6480         XRL     A,#0x80
   \                     ??TransmitApp_ProcessEvent_10:
   \   000077   FA           MOV     R2,A
   \   000078   EF           MOV     A,R7
   \   000079   80DC         SJMP    ??TransmitApp_ProcessEvent_5
    443            }
    444           
    445          
    446            // LCD显示事件
    447            if ( events & TRANSMITAPP_DISPLAY_EVT )
   \                     ??TransmitApp_ProcessEvent_9:
   \   00007B   EE           MOV     A,R6
   \   00007C   5410         ANL     A,#0x10
   \   00007E   601D         JZ      ??TransmitApp_ProcessEvent_11
    448            {
    449              // 如果滚屏功能打开，自动向上滚动一行
    450              if (autoScrollEnable == 1)
   \   000080   90....       MOV     DPTR,#autoScrollEnable
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6401         XRL     A,#0x1
   \   000086   7006         JNZ     ??TransmitApp_ProcessEvent_12
    451              {
    452                  scrollLine++;
   \   000088   90....       MOV     DPTR,#scrollLine
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   04           INC     A
   \   00008D   F0           MOVX    @DPTR,A
    453              }
    454              // 刷新显示数据
    455              //TransmitApp_DisplayResults( dispPage, &scrollLine);
    456              Smart_home_Display();
   \                     ??TransmitApp_ProcessEvent_12:
   \   00008E                ; Setup parameters for call to function Smart_home_Display
   \   00008E   12....       LCALL   ??Smart_home_Display?relay
    457              
    458              // 周期性的调用该事件来刷新显示数据
    459              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_DISPLAY_EVT, 
    460                                  TRANSMITAPP_DISPLAY_TIMER );   
   \   000091                ; Setup parameters for call to function osal_start_timerEx
   \   000091   7CD0         MOV     R4,#-0x30
   \   000093   7D07         MOV     R5,#0x7
   \   000095   12....       LCALL   ?Subroutine15 & 0xFFFF
    461              // Return unprocessed events
    462              return (events ^ TRANSMITAPP_DISPLAY_EVT);
   \                     ??CrossCallReturnLabel_84:
   \   000098   EE           MOV     A,R6
   \   000099   6410         XRL     A,#0x10
   \   00009B   80DA         SJMP    ??TransmitApp_ProcessEvent_10
    463            }
    464          
    465            // TRANSMITAPP_MATCHRSP_EVT事件预留
    466            if ( events & TRANSMITAPP_MATCHRSP_EVT )
   \                     ??TransmitApp_ProcessEvent_11:
   \   00009D   EE           MOV     A,R6
   \   00009E   5408         ANL     A,#0x8
   \   0000A0   6005         JZ      ??TransmitApp_ProcessEvent_13
    467            {  
    468              return (events ^ TRANSMITAPP_MATCHRSP_EVT);
   \   0000A2   EE           MOV     A,R6
   \   0000A3   6408         XRL     A,#0x8
   \   0000A5   80BA         SJMP    ??TransmitApp_ProcessEvent_8
    469            }
    470            // TRANSMITAPP_BINDRSP_EVT事件预留
    471            if ( events & TRANSMITAPP_BINDRSP_EVT )
   \                     ??TransmitApp_ProcessEvent_13:
   \   0000A7   EE           MOV     A,R6
   \   0000A8   5420         ANL     A,#0x20
   \   0000AA   6005         JZ      ??TransmitApp_ProcessEvent_14
    472            {
    473              return (events ^ TRANSMITAPP_BINDRSP_EVT);
   \   0000AC   EE           MOV     A,R6
   \   0000AD   6420         XRL     A,#0x20
   \   0000AF   80B0         SJMP    ??TransmitApp_ProcessEvent_8
    474            }
    475            
    476            // Discard unknown events
    477            return 0;
   \                     ??TransmitApp_ProcessEvent_14:
   \   0000B1   7A00         MOV     R2,#0x0
   \   0000B3   7B00         MOV     R3,#0x0
   \                     ??TransmitApp_ProcessEvent_6:
   \   0000B5   7F04         MOV     R7,#0x4
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA
    478          }
    479          
    480          /*******************************************************************************
    481           * Event Generation Functions
    482           */
    483          /*******************************************************************************
    484           * @fn      TransmitApp_ProcessZDOMsgs()
    485           *
    486           * @brief   Process response messages
    487           *
    488           * @param   none
    489           *
    490           * @return  none
    491           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    492          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOMsgs:
    493          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    494            /*
    495            switch ( inMsg->clusterID )
    496            {
    497              // 绑定信息处理
    498              case End_Device_Bind_rsp:
    499                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    500                {
    501                  osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BINDRSP_EVT);
    502          #if defined ( LCD_SUPPORTED )
    503                  HalLcdWriteString( "BindSuccess", HAL_LCD_LINE_3 );
    504          #endif
    505                }
    506                break;
    507          
    508              // 描述符匹配信息处理 
    509              case Match_Desc_rsp:
    510                ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    511                if ( pRsp )
    512                {
    513                  if ( pRsp->status == ZSuccess && pRsp->cnt )
    514                  {
    515                    osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_MATCHRSP_EVT);
    516          
    517          #if defined ( LCD_SUPPORTED )
    518                    HalLcdWriteString( "MatchSuccess", HAL_LCD_LINE_3 );
    519          #endif
    520                   }
    521                   osal_mem_free( pRsp );
    522                }
    523                break;
    524            }*/
    525          }
   \   000000   02....       LJMP    ?BRET
    526          
    527          /*********************************************************************
    528           * @fn      Smart_home_Motor_cmd
    529           * 
    530           * @brief   通过电机速度判断电机转向
    531           * 
    532           * 
    533           * @param   uint8 电机转速
    534           * 
    535           * @return  
    536           *          #define  HAL_MOTOR_STOP            0x01
    537           *          #define  HAL_MOTOR_FORWARD         0x02
    538           *          #define  HAL_MOTOR_BACKWARD        0x03
    539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          void Smart_home_Motor_cmd(int8 speed)
   \                     Smart_home_Motor_cmd:
    541          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    542            uint8 outspeed;
    543            uint8 cmd;
    544            if(speed == 0)
   \   000007   7006         JNZ     ??Smart_home_Motor_cmd_0
    545            {
    546              outspeed = 0;
   \                     ??Smart_home_Motor_cmd_1:
   \   000009   7F00         MOV     R7,#0x0
    547              cmd = HAL_MOTOR_STOP;
   \   00000B   7901         MOV     R1,#0x1
   \   00000D   8021         SJMP    ??Smart_home_Motor_cmd_2
    548            }   
    549            else if(speed > 0)
   \                     ??Smart_home_Motor_cmd_0:
   \   00000F   C3           CLR     C
   \   000010   9401         SUBB    A,#0x1
   \   000012   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000014   65D0         XRL     A,PSW
   \   000016   33           RLC     A
   \   000017   EE           MOV     A,R6
   \   000018   4005         JC      ??Smart_home_Motor_cmd_3
    550            {
    551              outspeed = speed;
   \   00001A   FF           MOV     R7,A
    552              cmd = HAL_MOTOR_FORWARD;
   \   00001B   7902         MOV     R1,#0x2
   \   00001D   8011         SJMP    ??Smart_home_Motor_cmd_2
    553            }
    554            
    555            else if(speed < 0)
   \                     ??Smart_home_Motor_cmd_3:
   \   00001F   C3           CLR     C
   \   000020   9400         SUBB    A,#0x0
   \   000022   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000024   65D0         XRL     A,PSW
   \   000026   33           RLC     A
   \   000027   50E0         JNC     ??Smart_home_Motor_cmd_1
    556            {
    557              outspeed = 0xff - speed;
   \   000029   74FF         MOV     A,#-0x1
   \   00002B   C3           CLR     C
   \   00002C   9E           SUBB    A,R6
   \   00002D   FF           MOV     R7,A
    558              cmd = HAL_MOTOR_BACKWARD;
   \   00002E   7903         MOV     R1,#0x3
    559            }
    560            
    561            else
    562            {
    563              outspeed = 0;
    564              cmd = HAL_MOTOR_STOP;    
    565            }
    566            TransmitApp_SendToMotorMSG(cmd,outspeed); 
   \                     ??Smart_home_Motor_cmd_2:
   \   000030                ; Setup parameters for call to function TransmitApp_SendToMotorMSG
   \   000030   EF           MOV     A,R7
   \   000031   FA           MOV     R2,A
   \   000032   12....       LCALL   ??TransmitApp_SendToMotorMSG?relay
    567          }
   \   000035   02....       LJMP    ?Subroutine0 & 0xFFFF
    568          
    569          /*******************************************************************************
    570           * @fn      TransmitApp_HandleKeys
    571           *
    572           * @brief   Handles all key events for this device.
    573           *
    574           * @param   shift - true if in shift/alt.
    575           * @param   keys - bit field for key events. Valid entries:
    576           *                 HAL_KEY_SW_1--UP
    577           *                 HAL_KEY_SW_2--RIGHT
    578           *                 HAL_KEY_SW_3--DOWN
    579           *                 HAL_KEY_SW_4--LEFT
    580           *                 HAL_KEY_SW_5--OK
    581           *                 HAL_KEY_SW_7--CANCEL
    582           *
    583           * @return  none
    584           */
    585          /*
    586          void TransmitApp_HandleKeys( byte shift, byte keys )
    587          {
    588            static uint8 dispCnt ;
    589            static uint8 relayCmd;
    590            static uint8 relayStatusCnt = 0;
    591            static uint8 motorStatusCnt = 0;
    592            static uint8 networkPermitEn = 0;
    593              
    594            // 手动使屏幕向上滚动(HAL_KEY_SW_1--UP)
    595            if ( keys & HAL_KEY_UP )
    596            {
    597              scrollLine--;
    598            }
    599              
    600            // 继电器控制(HAL_KEY_SW_2--RIGHT)，共4种状态
    601            if ( keys & HAL_KEY_RIGHT )
    602            {
    603              relayStatusCnt++;
    604              // 继电器有四种状态
    605              relayStatusCnt = relayStatusCnt % 4;
    606              
    607              switch(relayStatusCnt)
    608              {
    609                case 0:
    610                  relayCmd = 0x01;  // K1开，K2没有操作(状态保持不变)
    611                  break;
    612                case 1:
    613                  relayCmd = 0x02;  // K1关，K2没有操作(状态保持不变)
    614                  break;
    615                case 2:
    616                  relayCmd = 0x20;  // K1不变，K2开
    617                  break;
    618                case 3:
    619                  relayCmd = 0x10;  // K1不变，K2关
    620                  break;
    621                default:
    622                  break;
    623              }
    624              
    625              // 发送继电器控制命令
    626              TransmitApp_SendToRelayMSG( relayCmd );   
    627                
    628          #if defined ( LCD_SUPPORTED )
    629              HalLcdWriteString( "RelayCtl", HAL_LCD_LINE_4 );
    630          #endif
    631              }
    632          
    633            // 手动使屏幕向下滚动(HAL_KEY_SW_3--DOWN)
    634            if ( keys & HAL_KEY_DOWN )
    635            {
    636              scrollLine++;;
    637            }
    638          
    639            // 电机控制(HAL_KEY_SW_4--LEFT), 共8种状态
    640            if ( keys & HAL_KEY_LEFT )
    641            {
    642              motorStatusCnt++;
    643              motorStatusCnt = motorStatusCnt % 8;
    644              
    645              switch(motorStatusCnt)
    646              {
    647                case 0:  
    648                  TransmitApp_SendToMotorMSG(1, 0); // 电机停止
    649                  break;
    650                case 1: 
    651                  TransmitApp_SendToMotorMSG(2, 10); // 电机正转，转速10转/秒
    652                  break;
    653                case 2: 
    654                  TransmitApp_SendToMotorMSG(2, 30); // 电机正转，转速30转/秒
    655                  break;
    656                case 3: 
    657                  TransmitApp_SendToMotorMSG(2, 50); // 电机正转，转速50转/秒
    658                  break;
    659                case 4: 
    660                  TransmitApp_SendToMotorMSG(1, 0); // 电机停止
    661                  break;
    662                case 5: 
    663                  TransmitApp_SendToMotorMSG(3, 10); // 电机反转，转速10转/秒
    664                  break;
    665                case 6: 
    666                  TransmitApp_SendToMotorMSG(3, 30); // 电机反转，转速30转/分钟
    667                  break;
    668                case 7: 
    669                  TransmitApp_SendToMotorMSG(3, 50); // 电机反转，转速50转/分钟
    670                  break;
    671                default:
    672                  break;
    673              }    
    674          #if defined ( LCD_SUPPORTED )
    675              HalLcdWriteString( "MotorCtl", HAL_LCD_LINE_4 );
    676          #endif
    677            }
    678              
    679            // LCD页面切换(HAL_KEY_SW_5--OK)，共4种状态
    680            if ( keys & HAL_KEY_OK )
    681            {
    682              dispCnt++;
    683              dispCnt = dispCnt % 4;
    684              
    685              switch(dispCnt)
    686              {
    687                case 0:   // 第1屏，打开滚屏
    688                  autoScrollEnable = 1;
    689                  dispPage = 1;
    690                  break;
    691                case 1:   // 第1屏，关闭滚屏
    692                  autoScrollEnable = 0;
    693                  dispPage = 1; 
    694                  break;
    695                case 2:   // 第2屏，打开滚屏
    696                  autoScrollEnable = 1;
    697                  dispPage = 2; 
    698                  break;
    699                case 3:   // 第2屏，关闭滚屏
    700                  autoScrollEnable = 0;
    701                  dispPage = 2; 
    702                  dispCnt = 0;
    703                  break;
    704                default:
    705                  break;
    706              }
    707            }
    708              
    709            // 组网开关(HAL_KEY_SW_7--CANCEL)
    710            if ( keys & HAL_KEY_CANCEL )
    711            {
    712              networkPermitEn++;
    713              networkPermitEn = networkPermitEn % 2;
    714              if (networkPermitEn == 1)
    715              {
    716                NLME_PermitJoiningRequest(0xFF); // 允许组网
    717                HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
    718              }
    719              else if (networkPermitEn == 0)
    720              {
    721                NLME_PermitJoiningRequest(0x00); // 不允许组网
    722                HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
    723              }
    724            }
    725          }
    726          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    727          void TransmitApp_HandleKeys( byte shift, byte keys )
   \                     TransmitApp_HandleKeys:
    728          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    729            //zAddrType_t txAddr;
    730            static int8 MotorSpeed = 0;
    731            static uint8 NetWorkAllow = 0;
    732            /*这里这么设置似乎会出现内存问题
    733            static uint8 Relay1_on = 0x02;  //两个默认都是关闭
    734            static uint8 Relay2_on = 0x10;
    735            */
    736            /*3.21 LCD 显示*/
    737            static uint8 Relay1_on = 0;  //两个默认都是关闭
    738            static uint8 Relay2_on = 0;
    739            
    740            
    741            if ( keys & HAL_KEY_SW_1 )  //UP
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5059         JNC     ??TransmitApp_HandleKeys_0
    742            {
    743              switch(Ctrlcase)
   \   00000B   90....       MOV     DPTR,#Ctrlcase
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   6017         JZ      ??TransmitApp_HandleKeys_1
   \   000012   14           DEC     A
   \   000013   602A         JZ      ??TransmitApp_HandleKeys_2
    744              {
    745                default:    
    746                case 0:
    747                {
    748                  if(LCD_Page < LCD_PAGE_MAX)       {LCD_Page++;}
   \   000015   90....       MOV     DPTR,#LCD_Page
   \   000018   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00001B   5003         JNC     ??TransmitApp_HandleKeys_3
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   04           INC     A
   \   00001F   F0           MOVX    @DPTR,A
    749                  if(LCD_Page > LCD_PAGE_MAX - 1)       {LCD_Page = 0;}
   \                     ??TransmitApp_HandleKeys_3:
   \   000020   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000023   403F         JC      ??TransmitApp_HandleKeys_0
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
   \   000027   803B         SJMP    ??TransmitApp_HandleKeys_0
    750                  break;
    751                }
    752                case 1:
    753                {  
    754                  uint8 switch1;
    755                  if(Relay1_on == 0)  {Relay1_on = 1 ; switch1 = 0x02;}
   \                     ??TransmitApp_HandleKeys_1:
   \   000029   90....       MOV     DPTR,#??Relay1_on
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   7007         JNZ     ??TransmitApp_HandleKeys_4
   \   00002F   7401         MOV     A,#0x1
   \   000031   F0           MOVX    @DPTR,A
   \   000032   7902         MOV     R1,#0x2
   \   000034   8004         SJMP    ??TransmitApp_HandleKeys_5
    756                  else if(Relay1_on == 1)  {Relay1_on = 0; switch1 = 0x01;}
   \                     ??TransmitApp_HandleKeys_4:
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   7901         MOV     R1,#0x1
    757                  else  {Relay1_on = 0; switch1 = 0x01;}       
    758                  TransmitApp_SendToRelayMSG(switch1);  
   \                     ??TransmitApp_HandleKeys_5:
   \   00003A                ; Setup parameters for call to function TransmitApp_SendToRelayMSG
   \   00003A   12....       LCALL   ??TransmitApp_SendToRelayMSG?relay
    759                  break;
   \   00003D   8025         SJMP    ??TransmitApp_HandleKeys_0
    760                } 
    761                case 2:
    762                {
    763                  if(MotorSpeed < 50)     {MotorSpeed += 10;}
   \                     ??TransmitApp_HandleKeys_2:
   \   00003F   90....       MOV     DPTR,#??MotorSpeed
   \   000042   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000045   5004         JNC     ??TransmitApp_HandleKeys_6
   \   000047   E0           MOVX    A,@DPTR
   \   000048   240A         ADD     A,#0xa
   \   00004A   F0           MOVX    @DPTR,A
    764                  if(MotorSpeed >= 50)     
   \                     ??TransmitApp_HandleKeys_6:
   \   00004B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00004E   400F         JC      ??TransmitApp_HandleKeys_7
    765                  {
    766          #if defined ( LCD_SUPPORTED )
    767                     HalLcdWriteString( "Motor max Speed", HAL_LCD_LINE_4 );
   \   000050                ; Setup parameters for call to function HalLcdWriteString
   \   000050   7904         MOV     R1,#0x4
   \   000052   7A..         MOV     R2,#`?<Constant "Motor max Speed">` & 0xff
   \   000054   7B..         MOV     R3,#(`?<Constant "Motor max Speed">` >> 8) & 0xff
   \   000056   12....       LCALL   ??HalLcdWriteString?relay
    768          #endif 
    769                     MotorSpeed = 50;
   \   000059   90....       MOV     DPTR,#??MotorSpeed
   \   00005C   7432         MOV     A,#0x32
   \   00005E   F0           MOVX    @DPTR,A
    770                  }
    771                  Smart_home_Motor_cmd(MotorSpeed);
   \                     ??TransmitApp_HandleKeys_7:
   \   00005F                ; Setup parameters for call to function Smart_home_Motor_cmd
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??Smart_home_Motor_cmd?relay
    772                  
    773                  break;
    774                }
    775                   
    776              }    
    777            }
    778            
    779            if ( keys & HAL_KEY_SW_3 )  //DOWN
   \                     ??TransmitApp_HandleKeys_0:
   \   000064   EE           MOV     A,R6
   \   000065   A2E4         MOV     C,0xE0 /* A   */.4
   \   000067   5064         JNC     ??TransmitApp_HandleKeys_8
    780            {
    781              switch(Ctrlcase)
   \   000069   90....       MOV     DPTR,#Ctrlcase
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   14           DEC     A
   \   00006E   6018         JZ      ??TransmitApp_HandleKeys_9
   \   000070   14           DEC     A
   \   000071   6035         JZ      ??TransmitApp_HandleKeys_10
    782              {
    783                default:    
    784                case 0:
    785                {
    786                  if(LCD_Page >= 0)       {LCD_Page--;}
   \   000073   90....       MOV     DPTR,#LCD_Page
   \   000076   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000079   4003         JC      ??TransmitApp_HandleKeys_11
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   14           DEC     A
   \   00007D   F0           MOVX    @DPTR,A
    787                  if(LCD_Page < 0)        {LCD_Page = LCD_PAGE_MAX;}
   \                     ??TransmitApp_HandleKeys_11:
   \   00007E   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000081   504A         JNC     ??TransmitApp_HandleKeys_8
   \   000083   7404         MOV     A,#0x4
   \   000085   F0           MOVX    @DPTR,A
   \   000086   8045         SJMP    ??TransmitApp_HandleKeys_8
    788                  break;
    789                }
    790                case 1:  
    791                {
    792                  uint8 switch2;
    793                  if(Relay2_on == 0)  {Relay2_on = 1 ; switch2 = 0x20;}
   \                     ??TransmitApp_HandleKeys_9:
   \   000088   90....       MOV     DPTR,#??Relay2_on
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   7007         JNZ     ??TransmitApp_HandleKeys_12
   \   00008E   7401         MOV     A,#0x1
   \   000090   F0           MOVX    @DPTR,A
   \   000091   7920         MOV     R1,#0x20
   \   000093   800E         SJMP    ??TransmitApp_HandleKeys_13
    794                  else if(Relay2_on == 1)  {Relay2_on = 0; switch2 = 0x10;}
   \                     ??TransmitApp_HandleKeys_12:
   \   000095   6401         XRL     A,#0x1
   \   000097   7006         JNZ     ??TransmitApp_HandleKeys_14
   \   000099   E4           CLR     A
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   7910         MOV     R1,#0x10
   \   00009D   8004         SJMP    ??TransmitApp_HandleKeys_13
    795                  else  {Relay2_on = 0; switch2 = 0x01;}       
   \                     ??TransmitApp_HandleKeys_14:
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   7901         MOV     R1,#0x1
    796                  TransmitApp_SendToRelayMSG(switch2);       
   \                     ??TransmitApp_HandleKeys_13:
   \   0000A3                ; Setup parameters for call to function TransmitApp_SendToRelayMSG
   \   0000A3   12....       LCALL   ??TransmitApp_SendToRelayMSG?relay
    797                  break;
   \   0000A6   8025         SJMP    ??TransmitApp_HandleKeys_8
    798                } 
    799                case 2:
    800                {
    801                  /*
    802                  #define  HAL_MOTOR_STOP            0x01
    803                  #define  HAL_MOTOR_FORWORD         0x02
    804                  #define  HAL_MOTOR_BACKWORD        0x03*/
    805                  if(MotorSpeed > -50)     {MotorSpeed -= 10;}
   \                     ??TransmitApp_HandleKeys_10:
   \   0000A8   90....       MOV     DPTR,#??MotorSpeed
   \   0000AB   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000AE   4004         JC      ??TransmitApp_HandleKeys_15
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   24F6         ADD     A,#-0xa
   \   0000B3   F0           MOVX    @DPTR,A
    806                  if(MotorSpeed <= -50)     
   \                     ??TransmitApp_HandleKeys_15:
   \   0000B4   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000B7   500F         JNC     ??TransmitApp_HandleKeys_16
    807                  {
    808          #if defined ( LCD_SUPPORTED )
    809                     HalLcdWriteString( "Motor min Speed", HAL_LCD_LINE_4 );
   \   0000B9                ; Setup parameters for call to function HalLcdWriteString
   \   0000B9   7904         MOV     R1,#0x4
   \   0000BB   7A..         MOV     R2,#`?<Constant "Motor min Speed">` & 0xff
   \   0000BD   7B..         MOV     R3,#(`?<Constant "Motor min Speed">` >> 8) & 0xff
   \   0000BF   12....       LCALL   ??HalLcdWriteString?relay
    810          #endif 
    811                     MotorSpeed = -80;
   \   0000C2   90....       MOV     DPTR,#??MotorSpeed
   \   0000C5   74B0         MOV     A,#-0x50
   \   0000C7   F0           MOVX    @DPTR,A
    812                  }
    813                  Smart_home_Motor_cmd(MotorSpeed);
   \                     ??TransmitApp_HandleKeys_16:
   \   0000C8                ; Setup parameters for call to function Smart_home_Motor_cmd
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   12....       LCALL   ??Smart_home_Motor_cmd?relay
    814                  break; 
    815                }
    816              }
    817            }
    818            
    819            if ( keys & HAL_KEY_SW_2 )  //RIGHT  
   \                     ??TransmitApp_HandleKeys_8:
   \   0000CD   EE           MOV     A,R6
   \   0000CE   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000D0   5012         JNC     ??TransmitApp_HandleKeys_17
    820            /*3.22 这里在调试时出现问题，具体问题为 点击up时会出现屏幕变为禁止组网
    821              控制方面变为控制电机，问题在于汇编中的key值会出现  keys & HAL_KEY_SW_2 = 2
    822              的情况，暂时禁止，需要等待研究  还有key_7*/
    823            {
    824               if(Ctrlcase < 3)   { Ctrlcase++;}
   \   0000D2   90....       MOV     DPTR,#Ctrlcase
   \   0000D5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000D8   5003         JNC     ??TransmitApp_HandleKeys_18
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   04           INC     A
   \   0000DC   F0           MOVX    @DPTR,A
    825               if(Ctrlcase > 2)   { Ctrlcase=0;}
   \                     ??TransmitApp_HandleKeys_18:
   \   0000DD   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000E0   4002         JC      ??TransmitApp_HandleKeys_17
   \   0000E2   E4           CLR     A
   \   0000E3   F0           MOVX    @DPTR,A
    826               //Smart_home_Key_add(Ctrlcase);
    827            }
    828            
    829            if ( keys & HAL_KEY_SW_4 )  //LEFT
   \                     ??TransmitApp_HandleKeys_17:
   \   0000E4   EE           MOV     A,R6
   \   0000E5   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000E7   5013         JNC     ??TransmitApp_HandleKeys_19
    830            {
    831               if(Ctrlcase > -1)   { Ctrlcase--;}
   \   0000E9   90....       MOV     DPTR,#Ctrlcase
   \   0000EC   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000EF   4003         JC      ??TransmitApp_HandleKeys_20
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   14           DEC     A
   \   0000F3   F0           MOVX    @DPTR,A
    832               if(Ctrlcase < 0)    { Ctrlcase=2;}
   \                     ??TransmitApp_HandleKeys_20:
   \   0000F4   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000F7   5003         JNC     ??TransmitApp_HandleKeys_19
   \   0000F9   7402         MOV     A,#0x2
   \   0000FB   F0           MOVX    @DPTR,A
    833               //Smart_home_Key_add(Ctrlcase);    
    834            }
    835            
    836            if ( keys & HAL_KEY_SW_5 )  //OK
    837            {
    838          
    839            }
    840            
    841            if ( keys & HAL_KEY_SW_7 )  //CENCEL
   \                     ??TransmitApp_HandleKeys_19:
   \   0000FC   EE           MOV     A,R6
   \   0000FD   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000FF   5025         JNC     ??TransmitApp_HandleKeys_21
    842            {
    843               if(NetWorkAllow == 0)
   \   000101   90....       MOV     DPTR,#??NetWorkAllow
   \   000104   E0           MOVX    A,@DPTR
   \   000105   7010         JNZ     ??TransmitApp_HandleKeys_22
    844               {
    845                 NetWorkAllow = 1;
   \   000107   7401         MOV     A,#0x1
   \   000109   F0           MOVX    @DPTR,A
    846                 NLME_PermitJoiningRequest(0xFF); // 组网，允许随时加入
   \   00010A                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00010A   79FF         MOV     R1,#-0x1
   \   00010C   12....       LCALL   ??NLME_PermitJoiningRequest?relay
    847                 //HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
    848                 //HalLedSet(HAL_LED_2, HAL_LED_MODE_ON);
    849          #if defined ( LCD_SUPPORTED )
    850                 HalLcdWriteString( "Allow networking", HAL_LCD_LINE_4 );
   \   00010F                ; Setup parameters for call to function HalLcdWriteString
   \   00010F   7904         MOV     R1,#0x4
   \   000111   7A..         MOV     R2,#`?<Constant "Allow networking">` & 0xff
   \   000113   7B..         MOV     R3,#(`?<Constant "Allow networking">` >> 8) & 0xff
   \   000115   800C         SJMP    ??TransmitApp_HandleKeys_23
    851          #endif
    852               }
    853               else
    854               {
    855                 NetWorkAllow = 0;
   \                     ??TransmitApp_HandleKeys_22:
   \   000117   E4           CLR     A
   \   000118   F0           MOVX    @DPTR,A
    856                 NLME_PermitJoiningRequest(0x00); // 不允许组网
   \   000119                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000119   F9           MOV     R1,A
   \   00011A   12....       LCALL   ??NLME_PermitJoiningRequest?relay
    857                 //HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);  
    858                 //HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF); 
    859          #if defined ( LCD_SUPPORTED )
    860                 HalLcdWriteString( "Ban   networking", HAL_LCD_LINE_4 );
   \   00011D                ; Setup parameters for call to function HalLcdWriteString
   \   00011D   7904         MOV     R1,#0x4
   \   00011F   7A..         MOV     R2,#`?<Constant "Ban   networking">` & 0xff
   \   000121   7B..         MOV     R3,#(`?<Constant "Ban   networking">` >> 8) & 0xff
   \                     ??TransmitApp_HandleKeys_23:
   \   000123   12....       LCALL   ??HalLcdWriteString?relay
    861          #endif        
    862               }
    863            }
    864          }
   \                     ??TransmitApp_HandleKeys_21:
   \   000126   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9403         SUBB    A,#0x3
   \   000004   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000006   65D0         XRL     A,PSW
   \   000008   33           RLC     A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   94CF         SUBB    A,#-0x31
   \   000004   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000006   65D0         XRL     A,PSW
   \   000008   33           RLC     A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9432         SUBB    A,#0x32
   \   000004   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000006   65D0         XRL     A,PSW
   \   000008   33           RLC     A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9404         SUBB    A,#0x4
   \   000004   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000006   65D0         XRL     A,PSW
   \   000008   33           RLC     A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9400         SUBB    A,#0x0
   \   000004   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000006   65D0         XRL     A,PSW
   \   000008   33           RLC     A
   \   000009   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??MotorSpeed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??NetWorkAllow:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Relay1_on:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Relay2_on:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    865          
    866          
    867          /*******************************************************************************
    868           * LOCAL FUNCTIONS
    869           */
    870          
    871          /*******************************************************************************
    872           * @fn      TransmitApp_MessageMSGCB
    873           *
    874           * @brief   Data message processor callback.  This function processes
    875           *          any incoming data - probably from other devices.  So, based
    876           *          on cluster ID, perform the intended action.
    877           *
    878           * @param   none
    879           *
    880           * @return  none
    881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    882          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TransmitApp_MessageMSGCB:
    883          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    884          
    885            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for TransmitApp_MessageMSGCB>_0`:
   \   000019   0100         DW        1
   \   00001B   07           DB        7
   \   00001C   ....         DW        ??TransmitApp_MessageMSGCB_0
   \   00001E   ....         DW        ??TransmitApp_MessageMSGCB_1
   \   000020   ....         DW        ??TransmitApp_MessageMSGCB_2
   \   000022   ....         DW        ??TransmitApp_MessageMSGCB_3
   \   000024   ....         DW        ??TransmitApp_MessageMSGCB_4
   \   000026   ....         DW        ??TransmitApp_MessageMSGCB_5
   \   000028   ....         DW        ??TransmitApp_MessageMSGCB_6
   \   00002A   ....         DW        ??TransmitApp_MessageMSGCB_7
   \   00002C   ....         DW        ??TransmitApp_MessageMSGCB_8
    886            {
    887              // 温湿度传感器信息
    888              case TRANSMITAPP_CLUSTERID_HUMITMSG:
    889                Humit.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_1:
   \   00002E   90....       MOV     DPTR,#Humit
   \   000031   12....       LCALL   ?Subroutine2 & 0xFFFF
    890                Humit.data[0] = pkt->cmd.Data[4]; // 湿度 
   \                     ??CrossCallReturnLabel_0:
   \   000034   90....       MOV     DPTR,#Humit + 1
   \   000037   12....       LCALL   ?Subroutine6 & 0xFFFF
    891                Humit.data[1] = pkt->cmd.Data[5]; // 温度
   \                     ??CrossCallReturnLabel_12:
   \   00003A   90....       MOV     DPTR,#Humit + 2
   \   00003D   02....       LJMP    ??TransmitApp_MessageMSGCB_9 & 0xFFFF
    892                break;
    893              
    894              // 温度与光照度传感器信息  
    895              case TRANSMITAPP_CLUSTERID_TEMPLIGHTMSG:
    896                TempLight.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_2:
   \   000040   90....       MOV     DPTR,#TempLight
   \   000043   12....       LCALL   ?Subroutine2 & 0xFFFF
    897                TempLight.data[0] = pkt->cmd.Data[4]; // 温度整数
   \                     ??CrossCallReturnLabel_1:
   \   000046   90....       MOV     DPTR,#TempLight + 1
   \   000049   12....       LCALL   ?Subroutine7 & 0xFFFF
    898                TempLight.data[1] = pkt->cmd.Data[5]; // 温度小数
   \                     ??CrossCallReturnLabel_14:
   \   00004C   90....       MOV     DPTR,#TempLight + 2
   \   00004F   12....       LCALL   ?Subroutine5 & 0xFFFF
    899                TempLight.data[2] = pkt->cmd.Data[6]; // 光照
   \                     ??CrossCallReturnLabel_10:
   \   000052   90....       MOV     DPTR,#TempLight + 3
   \   000055   12....       LCALL   ?Subroutine4 & 0xFFFF
    900                TempLight.data[3] = pkt->cmd.Data[7]; // 光照
   \                     ??CrossCallReturnLabel_8:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   90....       MOV     DPTR,#TempLight + 4
   \   00005C   02....       LJMP    ??TransmitApp_MessageMSGCB_9 & 0xFFFF
    901                break;
    902              
    903              // RFID射频卡信息 
    904              case TRANSMITAPP_CLUSTERID_RFIDMSG:
    905                RfID.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_3:
   \   00005F   90....       MOV     DPTR,#RfID
   \   000062   12....       LCALL   ?Subroutine2 & 0xFFFF
    906                RfID.data[0] = pkt->cmd.Data[4]; // 射频卡类型
   \                     ??CrossCallReturnLabel_2:
   \   000065   90....       MOV     DPTR,#RfID + 1
   \   000068   12....       LCALL   ?Subroutine7 & 0xFFFF
    907                RfID.data[1] = pkt->cmd.Data[5]; // 4个字节的ID号
   \                     ??CrossCallReturnLabel_15:
   \   00006B   90....       MOV     DPTR,#RfID + 2
   \   00006E   12....       LCALL   ?Subroutine5 & 0xFFFF
    908                RfID.data[2] = pkt->cmd.Data[6]; //
   \                     ??CrossCallReturnLabel_11:
   \   000071   90....       MOV     DPTR,#RfID + 3
   \   000074   12....       LCALL   ?Subroutine31 & 0xFFFF
    909                RfID.data[3] = pkt->cmd.Data[7]; //
   \                     ??CrossCallReturnLabel_69:
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   90....       MOV     DPTR,#RfID + 4
   \   00007C   12....       LCALL   ?Subroutine4 & 0xFFFF
    910                RfID.data[4] = pkt->cmd.Data[8]; //           
   \                     ??CrossCallReturnLabel_9:
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   90....       MOV     DPTR,#RfID + 5
   \   000084   8063         SJMP    ??TransmitApp_MessageMSGCB_9
    911                break;
    912              
    913              // 烟雾与火焰报警信息  
    914              case TRANSMITAPP_CLUSTERID_GASFLAMEMSG:
    915                gasFlame.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_4:
   \   000086   90....       MOV     DPTR,#gasFlame
   \   000089   12....       LCALL   ?Subroutine3 & 0xFFFF
    916                gasFlame.data[0] = pkt->cmd.Data[4]; // 烟雾与火焰报警信息
   \                     ??CrossCallReturnLabel_4:
   \   00008C   90....       MOV     DPTR,#gasFlame + 1
   \   00008F   8058         SJMP    ??TransmitApp_MessageMSGCB_9
    917                break;
    918              
    919              // 人体红外检测信息  
    920              case TRANSMITAPP_CLUSTERID_INFRAREDMSG:
    921                infrared.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_5:
   \   000091   90....       MOV     DPTR,#infrared
   \   000094   12....       LCALL   ?Subroutine3 & 0xFFFF
    922                infrared.data[0] = pkt->cmd.Data[4]; // 人体红外 
   \                     ??CrossCallReturnLabel_5:
   \   000097   90....       MOV     DPTR,#infrared + 1
   \   00009A   804D         SJMP    ??TransmitApp_MessageMSGCB_9
    923                break;
    924              
    925              // 声音与振动传感器信息  
    926              case TRANSMITAPP_CLUSTERID_SOUNDVBMSG:
    927                soundVb.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_6:
   \   00009C   90....       MOV     DPTR,#soundVb
   \   00009F   12....       LCALL   ?Subroutine3 & 0xFFFF
    928                soundVb.data[0] = pkt->cmd.Data[4]; // 声音震动信息
   \                     ??CrossCallReturnLabel_6:
   \   0000A2   90....       MOV     DPTR,#soundVb + 1
   \   0000A5   8042         SJMP    ??TransmitApp_MessageMSGCB_9
    929                break;
    930              
    931              // 电机状态信息  
    932              case TRANSMITAPP_CLUSTERID_MOTORSTATUSMSG:
    933                motor.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_7:
   \   0000A7   90....       MOV     DPTR,#motor
   \   0000AA   7401         MOV     A,#0x1
   \   0000AC   F0           MOVX    @DPTR,A
    934                
    935                // 储存电机设备的网络地址，用于发送控制命令
    936                TransmitApp_DstMotorAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000AD   90....       MOV     DPTR,#TransmitApp_DstMotorAddr + 8
   \   0000B0   12....       LCALL   ?Subroutine8 & 0xFFFF
    937                TransmitApp_DstMotorAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_16:
   \   0000B3   90....       MOV     DPTR,#TransmitApp_DstMotorAddr
   \   0000B6   E8           MOV     A,R0
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E9           MOV     A,R1
   \   0000BA   F0           MOVX    @DPTR,A
    938                
    939                TransmitApp_DstMotorAddr.endPoint = 1;  // 目的节点的端口号
   \   0000BB   90....       MOV     DPTR,#TransmitApp_DstMotorAddr + 9
   \   0000BE   12....       LCALL   ?Subroutine2 & 0xFFFF
    940                //TransmitApp_DstMotorAddr.endPoint = TRANSMITAPP_ENDPOINT;
    941               
    942                motor.data[0] = pkt->cmd.Data[4]; // 电机转速
   \                     ??CrossCallReturnLabel_3:
   \   0000C1   90....       MOV     DPTR,#motor + 1
   \   0000C4   12....       LCALL   ?Subroutine6 & 0xFFFF
    943                motor.data[1] = pkt->cmd.Data[5]; // 电机状态
   \                     ??CrossCallReturnLabel_13:
   \   0000C7   90....       MOV     DPTR,#motor + 2
   \   0000CA   801D         SJMP    ??TransmitApp_MessageMSGCB_9
    944                break;
    945              
    946              // 继电器状态信息   
    947              case TRANSMITAPP_CLUSTERID_RELAYSTATUSMSG:
    948                relay.deviceNWKStatus = DEVICE_NWK_ONLINE;
   \                     ??TransmitApp_MessageMSGCB_8:
   \   0000CC   90....       MOV     DPTR,#relay
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
    949                
    950                // 储存继电器设备的网络地址，用于发送控制命令
    951                TransmitApp_DstRelayAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000D2   90....       MOV     DPTR,#TransmitApp_DstRelayAddr + 8
   \   0000D5   12....       LCALL   ?Subroutine8 & 0xFFFF
    952                TransmitApp_DstRelayAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_17:
   \   0000D8   90....       MOV     DPTR,#TransmitApp_DstRelayAddr
   \   0000DB   E8           MOV     A,R0
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F0           MOVX    @DPTR,A
    953                
    954                TransmitApp_DstRelayAddr.endPoint = 1; // 目的节点的端口号
   \   0000E0   90....       MOV     DPTR,#TransmitApp_DstRelayAddr + 9
   \   0000E3   12....       LCALL   ?Subroutine3 & 0xFFFF
    955                //TransmitApp_DstRelayAddr.endPoint = TRANSMITAPP_ENDPOINT;  
    956                
    957                relay.data[0] = pkt->cmd.Data[4]; 
   \                     ??CrossCallReturnLabel_7:
   \   0000E6   90....       MOV     DPTR,#relay + 1
   \                     ??TransmitApp_MessageMSGCB_9:
   \   0000E9   F0           MOVX    @DPTR,A
    958                break;
    959                
    960              // 同上面一样，可以在将来添加更多的控制信息
    961              default:
    962                break;
    963            }
    964          }
   \                     ??TransmitApp_MessageMSGCB_0:
   \   0000EA   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   04           INC     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7401         MOV     A,#0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   EA           MOV     A,R2
   \   000004   2422         ADD     A,#0x22
   \   000006   F582         MOV     DPL,A
   \   000008   EB           MOV     A,R3
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F583         MOV     DPH,A
   \   00000D   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7401         MOV     A,#0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   EA           MOV     A,R2
   \   000004   2422         ADD     A,#0x22
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    965          
    966          /*******************************************************************************
    967           * @fn      TransmitApp_DeviceNWKCheck
    968           *
    969           * @brief   check the device NWK status: online or offline.
    970           *          由宏定义TRANSMITAPP_DEVICE_CHECK_TIMER确定周期是2秒
    971           *
    972           * @param   none
    973           *
    974           * @return  none
    975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    976          void TransmitApp_DeviceNWKCheck(void)
   \                     TransmitApp_DeviceNWKCheck:
    977          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    978            // 设备离线计数器，超过临界值判定设备离线
    979            static uint8 humitCnt, tempLightCnt, rfIDCnt, gasFlameCnt, infraredCnt;
    980            static uint8 motorCnt, relayStatusCnt, soundVbCnt;
    981            
    982            // 温湿度传感器
    983            if (Humit.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
   \   000004   90....       MOV     DPTR,#Humit
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   600E         JZ      ??TransmitApp_DeviceNWKCheck_0
    984            {
    985              humitCnt++;
   \   00000C   90....       MOV     DPTR,#??humitCnt
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   04           INC     A
   \   000011   F0           MOVX    @DPTR,A
    986            }
    987            if (Humit.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
   \   000012   90....       MOV     DPTR,#Humit
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6401         XRL     A,#0x1
   \   000018   700A         JNZ     ??TransmitApp_DeviceNWKCheck_1
    988            {
    989              humitCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_0:
   \   00001A   90....       MOV     DPTR,#??humitCnt
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
    990              Humit.deviceNWKStatus = 0;
   \   00001F   90....       MOV     DPTR,#Humit
   \   000022   800F         SJMP    ??TransmitApp_DeviceNWKCheck_2
    991            }
    992            if (humitCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_1:
   \   000024   90....       MOV     DPTR,#??humitCnt
   \   000027   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00002A   4008         JC      ??TransmitApp_DeviceNWKCheck_3
    993            {
    994              humitCnt = DEVICE_NWK_CNT_LIMIT;
   \   00002C   7403         MOV     A,#0x3
   \   00002E   F0           MOVX    @DPTR,A
    995              Humit.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   00002F   90....       MOV     DPTR,#Humit
   \   000032   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_2:
   \   000033   F0           MOVX    @DPTR,A
    996            }
    997            
    998            // 温度与光照度传感器
    999            if (TempLight.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
   \                     ??TransmitApp_DeviceNWKCheck_3:
   \   000034   90....       MOV     DPTR,#TempLight
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6401         XRL     A,#0x1
   \   00003A   600E         JZ      ??TransmitApp_DeviceNWKCheck_4
   1000            {
   1001              tempLightCnt++;
   \   00003C   90....       MOV     DPTR,#??tempLightCnt
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   04           INC     A
   \   000041   F0           MOVX    @DPTR,A
   1002            }
   1003            if (TempLight.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
   \   000042   90....       MOV     DPTR,#TempLight
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6401         XRL     A,#0x1
   \   000048   700A         JNZ     ??TransmitApp_DeviceNWKCheck_5
   1004            {
   1005              tempLightCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_4:
   \   00004A   90....       MOV     DPTR,#??tempLightCnt
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
   1006              TempLight.deviceNWKStatus = 0;
   \   00004F   90....       MOV     DPTR,#TempLight
   \   000052   800F         SJMP    ??TransmitApp_DeviceNWKCheck_6
   1007            }
   1008            if (tempLightCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_5:
   \   000054   90....       MOV     DPTR,#??tempLightCnt
   \   000057   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00005A   4008         JC      ??TransmitApp_DeviceNWKCheck_7
   1009            {
   1010              tempLightCnt = DEVICE_NWK_CNT_LIMIT;
   \   00005C   7403         MOV     A,#0x3
   \   00005E   F0           MOVX    @DPTR,A
   1011              TempLight.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   00005F   90....       MOV     DPTR,#TempLight
   \   000062   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_6:
   \   000063   F0           MOVX    @DPTR,A
   1012            }
   1013            
   1014            // RFID读卡器
   1015            if (RfID.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
   \                     ??TransmitApp_DeviceNWKCheck_7:
   \   000064   90....       MOV     DPTR,#RfID
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   600E         JZ      ??TransmitApp_DeviceNWKCheck_8
   1016            {
   1017                rfIDCnt++;
   \   00006C   90....       MOV     DPTR,#??rfIDCnt
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   04           INC     A
   \   000071   F0           MOVX    @DPTR,A
   1018            }
   1019            if (RfID.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
   \   000072   90....       MOV     DPTR,#RfID
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6401         XRL     A,#0x1
   \   000078   700A         JNZ     ??TransmitApp_DeviceNWKCheck_9
   1020            {
   1021                rfIDCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_8:
   \   00007A   90....       MOV     DPTR,#??rfIDCnt
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   1022                RfID.deviceNWKStatus = 0;
   \   00007F   90....       MOV     DPTR,#RfID
   \   000082   800F         SJMP    ??TransmitApp_DeviceNWKCheck_10
   1023            }
   1024            if (rfIDCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_9:
   \   000084   90....       MOV     DPTR,#??rfIDCnt
   \   000087   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00008A   4008         JC      ??TransmitApp_DeviceNWKCheck_11
   1025            {
   1026                rfIDCnt = DEVICE_NWK_CNT_LIMIT;
   \   00008C   7403         MOV     A,#0x3
   \   00008E   F0           MOVX    @DPTR,A
   1027                RfID.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   00008F   90....       MOV     DPTR,#RfID
   \   000092   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_10:
   \   000093   F0           MOVX    @DPTR,A
   1028            }
   1029              
   1030            // 烟雾与火焰传感器  
   1031            if (gasFlame.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
   \                     ??TransmitApp_DeviceNWKCheck_11:
   \   000094   90....       MOV     DPTR,#gasFlame
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6401         XRL     A,#0x1
   \   00009A   600E         JZ      ??TransmitApp_DeviceNWKCheck_12
   1032            {
   1033              gasFlameCnt++;
   \   00009C   90....       MOV     DPTR,#??gasFlameCnt
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   04           INC     A
   \   0000A1   F0           MOVX    @DPTR,A
   1034            }
   1035            if (gasFlame.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
   \   0000A2   90....       MOV     DPTR,#gasFlame
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   700A         JNZ     ??TransmitApp_DeviceNWKCheck_13
   1036            {
   1037              gasFlameCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_12:
   \   0000AA   90....       MOV     DPTR,#??gasFlameCnt
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
   1038              gasFlame.deviceNWKStatus = 0;
   \   0000AF   90....       MOV     DPTR,#gasFlame
   \   0000B2   800F         SJMP    ??TransmitApp_DeviceNWKCheck_14
   1039            }
   1040            if (gasFlameCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_13:
   \   0000B4   90....       MOV     DPTR,#??gasFlameCnt
   \   0000B7   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000BA   4008         JC      ??TransmitApp_DeviceNWKCheck_15
   1041            {
   1042              gasFlameCnt = DEVICE_NWK_CNT_LIMIT;
   \   0000BC   7403         MOV     A,#0x3
   \   0000BE   F0           MOVX    @DPTR,A
   1043              gasFlame.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   0000BF   90....       MOV     DPTR,#gasFlame
   \   0000C2   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_14:
   \   0000C3   F0           MOVX    @DPTR,A
   1044            }
   1045            
   1046            // 人体红外检测传感器
   1047            if (infrared.deviceNWKStatus != DEVICE_NWK_ONLINE)  // 设备离线，计数+1
   \                     ??TransmitApp_DeviceNWKCheck_15:
   \   0000C4   90....       MOV     DPTR,#infrared
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6401         XRL     A,#0x1
   \   0000CA   600E         JZ      ??TransmitApp_DeviceNWKCheck_16
   1048            {
   1049              infraredCnt++;
   \   0000CC   90....       MOV     DPTR,#??infraredCnt
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   04           INC     A
   \   0000D1   F0           MOVX    @DPTR,A
   1050            }
   1051            if (infrared.deviceNWKStatus == DEVICE_NWK_ONLINE)  // 设备在线，计数清零
   \   0000D2   90....       MOV     DPTR,#infrared
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   6401         XRL     A,#0x1
   \   0000D8   700A         JNZ     ??TransmitApp_DeviceNWKCheck_17
   1052            {
   1053              infraredCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_16:
   \   0000DA   90....       MOV     DPTR,#??infraredCnt
   \   0000DD   E4           CLR     A
   \   0000DE   F0           MOVX    @DPTR,A
   1054              infrared.deviceNWKStatus = 0;
   \   0000DF   90....       MOV     DPTR,#infrared
   \   0000E2   800F         SJMP    ??TransmitApp_DeviceNWKCheck_18
   1055            }
   1056            if (infraredCnt > DEVICE_NWK_CNT_LIMIT)             // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_17:
   \   0000E4   90....       MOV     DPTR,#??infraredCnt
   \   0000E7   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000EA   4008         JC      ??TransmitApp_DeviceNWKCheck_19
   1057            {
   1058              infraredCnt = DEVICE_NWK_CNT_LIMIT;
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   F0           MOVX    @DPTR,A
   1059              infrared.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   0000EF   90....       MOV     DPTR,#infrared
   \   0000F2   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_18:
   \   0000F3   F0           MOVX    @DPTR,A
   1060            }
   1061              
   1062            // 声音振动传感器  
   1063            if (soundVb.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
   \                     ??TransmitApp_DeviceNWKCheck_19:
   \   0000F4   90....       MOV     DPTR,#soundVb
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   6401         XRL     A,#0x1
   \   0000FA   600E         JZ      ??TransmitApp_DeviceNWKCheck_20
   1064            {
   1065              soundVbCnt++;
   \   0000FC   90....       MOV     DPTR,#??soundVbCnt
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   04           INC     A
   \   000101   F0           MOVX    @DPTR,A
   1066            }
   1067            if (soundVb.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
   \   000102   90....       MOV     DPTR,#soundVb
   \   000105   E0           MOVX    A,@DPTR
   \   000106   6401         XRL     A,#0x1
   \   000108   700B         JNZ     ??TransmitApp_DeviceNWKCheck_21
   1068            {
   1069              soundVbCnt++;
   \                     ??TransmitApp_DeviceNWKCheck_20:
   \   00010A   90....       MOV     DPTR,#??soundVbCnt
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   04           INC     A
   \   00010F   F0           MOVX    @DPTR,A
   1070              soundVb.deviceNWKStatus = 0;
   \   000110   90....       MOV     DPTR,#soundVb
   \   000113   E4           CLR     A
   \   000114   F0           MOVX    @DPTR,A
   1071            }
   1072            if (soundVbCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_21:
   \   000115   90....       MOV     DPTR,#??soundVbCnt
   \   000118   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00011B   4008         JC      ??TransmitApp_DeviceNWKCheck_22
   1073            {
   1074              soundVbCnt = DEVICE_NWK_CNT_LIMIT;
   \   00011D   7403         MOV     A,#0x3
   \   00011F   F0           MOVX    @DPTR,A
   1075              soundVb.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   000120   90....       MOV     DPTR,#soundVb
   \   000123   14           DEC     A
   \   000124   F0           MOVX    @DPTR,A
   1076            }
   1077              
   1078            // 微型直流电机RF-310T/QJT310AH 
   1079            if (motor.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
   \                     ??TransmitApp_DeviceNWKCheck_22:
   \   000125   90....       MOV     DPTR,#motor
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6401         XRL     A,#0x1
   \   00012B   600E         JZ      ??TransmitApp_DeviceNWKCheck_23
   1080            {
   1081              motorCnt++;
   \   00012D   90....       MOV     DPTR,#??motorCnt
   \   000130   E0           MOVX    A,@DPTR
   \   000131   04           INC     A
   \   000132   F0           MOVX    @DPTR,A
   1082            }
   1083            if (motor.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
   \   000133   90....       MOV     DPTR,#motor
   \   000136   E0           MOVX    A,@DPTR
   \   000137   6401         XRL     A,#0x1
   \   000139   700A         JNZ     ??TransmitApp_DeviceNWKCheck_24
   1084            {
   1085              motorCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_23:
   \   00013B   90....       MOV     DPTR,#??motorCnt
   \   00013E   E4           CLR     A
   \   00013F   F0           MOVX    @DPTR,A
   1086              motor.deviceNWKStatus = 0;
   \   000140   90....       MOV     DPTR,#motor
   \   000143   800F         SJMP    ??TransmitApp_DeviceNWKCheck_25
   1087            }
   1088            if (motorCnt > DEVICE_NWK_CNT_LIMIT)            // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_24:
   \   000145   90....       MOV     DPTR,#??motorCnt
   \   000148   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00014B   4008         JC      ??TransmitApp_DeviceNWKCheck_26
   1089            {
   1090              motorCnt = DEVICE_NWK_CNT_LIMIT;
   \   00014D   7403         MOV     A,#0x3
   \   00014F   F0           MOVX    @DPTR,A
   1091              motor.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   000150   90....       MOV     DPTR,#motor
   \   000153   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_25:
   \   000154   F0           MOVX    @DPTR,A
   1092            }
   1093              
   1094            // 继电器  
   1095            if (relay.deviceNWKStatus != DEVICE_NWK_ONLINE) // 设备离线，计数+1
   \                     ??TransmitApp_DeviceNWKCheck_26:
   \   000155   90....       MOV     DPTR,#relay
   \   000158   E0           MOVX    A,@DPTR
   \   000159   6401         XRL     A,#0x1
   \   00015B   600E         JZ      ??TransmitApp_DeviceNWKCheck_27
   1096            {
   1097              relayStatusCnt++;
   \   00015D   90....       MOV     DPTR,#??relayStatusCnt
   \   000160   E0           MOVX    A,@DPTR
   \   000161   04           INC     A
   \   000162   F0           MOVX    @DPTR,A
   1098            }
   1099            if (relay.deviceNWKStatus == DEVICE_NWK_ONLINE) // 设备在线，计数清零
   \   000163   90....       MOV     DPTR,#relay
   \   000166   E0           MOVX    A,@DPTR
   \   000167   6401         XRL     A,#0x1
   \   000169   700A         JNZ     ??TransmitApp_DeviceNWKCheck_28
   1100            {
   1101              relayStatusCnt = 0;
   \                     ??TransmitApp_DeviceNWKCheck_27:
   \   00016B   90....       MOV     DPTR,#??relayStatusCnt
   \   00016E   E4           CLR     A
   \   00016F   F0           MOVX    @DPTR,A
   1102              relay.deviceNWKStatus = 0;
   \   000170   90....       MOV     DPTR,#relay
   \   000173   800F         SJMP    ??TransmitApp_DeviceNWKCheck_29
   1103            }
   1104            if (relayStatusCnt > DEVICE_NWK_CNT_LIMIT)      // 超时, 判为离线
   \                     ??TransmitApp_DeviceNWKCheck_28:
   \   000175   90....       MOV     DPTR,#??relayStatusCnt
   \   000178   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00017B   4008         JC      ??TransmitApp_DeviceNWKCheck_30
   1105            {
   1106              relayStatusCnt = DEVICE_NWK_CNT_LIMIT;
   \   00017D   7403         MOV     A,#0x3
   \   00017F   F0           MOVX    @DPTR,A
   1107              relay.deviceNWKStatus = DEVICE_NWK_OFFLINE;
   \   000180   90....       MOV     DPTR,#relay
   \   000183   14           DEC     A
   \                     ??TransmitApp_DeviceNWKCheck_29:
   \   000184   F0           MOVX    @DPTR,A
   1108            }  
   1109          }
   \                     ??TransmitApp_DeviceNWKCheck_30:
   \   000185   D083         POP     DPH
   \   000187   D082         POP     DPL
   \   000189   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9404         SUBB    A,#0x4
   \   000004   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??humitCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??tempLightCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??rfIDCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??gasFlameCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??infraredCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??motorCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??relayStatusCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??soundVbCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1110          
   1111          /*******************************************************************************
   1112           * @fn      TransmitApp_SendToRelayMSG
   1113           *
   1114           * @brief   Send control message to relay, if relay is in the network.
   1115           *
   1116           * @param   uint8 cmd: Relay control command
   1117           *
   1118           * @return  none
   1119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1120          void TransmitApp_SendToRelayMSG( uint8 cmd )
   \                     TransmitApp_SendToRelayMSG:
   1121          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1122            uint8 tmp;
   1123            
   1124            // 只有设备在线时, 方发送控制命令
   1125            if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000007   90....       MOV     DPTR,#relay
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   6068         JZ      ??TransmitApp_SendToRelayMSG_0
   1126            {
   1127              // put the sequence number in the message
   1128              tmp = HI_UINT8( TransmitApp_RelayTransID );
   \   00000F   90....       MOV     DPTR,#TransmitApp_RelayTransID
   \   000012   12....       LCALL   ?Subroutine21 & 0xFFFF
   1129              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_48:
   \   000015   5004         JNC     ??TransmitApp_SendToRelayMSG_1
   \   000017   7830         MOV     R0,#0x30
   \   000019   8002         SJMP    ??TransmitApp_SendToRelayMSG_2
   \                     ??TransmitApp_SendToRelayMSG_1:
   \   00001B   7837         MOV     R0,#0x37
   1130              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendToRelayMSG_2:
   \   00001D   E8           MOV     A,R0
   \   00001E   2A           ADD     A,R2
   \   00001F   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   000022   F0           MOVX    @DPTR,A
   1131              tmp = LO_UINT8( TransmitApp_RelayTransID );
   \   000023   90....       MOV     DPTR,#TransmitApp_RelayTransID
   \   000026   12....       LCALL   ?Subroutine35 & 0xFFFF
   1132              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_87:
   \   000029   5004         JNC     ??TransmitApp_SendToRelayMSG_3
   \   00002B   7830         MOV     R0,#0x30
   \   00002D   8002         SJMP    ??TransmitApp_SendToRelayMSG_4
   \                     ??TransmitApp_SendToRelayMSG_3:
   \   00002F   7837         MOV     R0,#0x37
   1133              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendToRelayMSG_4:
   \   000031   E8           MOV     A,R0
   \   000032   2A           ADD     A,R2
   \   000033   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000036   12....       LCALL   ?Subroutine10 & 0xFFFF
   1134              
   1135              // 发送给继电器的控制命令 
   1136              TransmitApp_Msg[4] = cmd;
   1137              
   1138              // TransmitApp_epDesc.endPoint = TRANSMITAPP_CLUSTERID_RELAYCTLMSG; // 20201225
   1139              tmp = AF_DataRequest( &TransmitApp_DstRelayAddr,           \
   1140                                    &TransmitApp_epDesc,                 \
   1141                                     TRANSMITAPP_CLUSTERID_RELAYCTLMSG,  \
   1142                                     TRANSMITAPP_RELAY_DATA_LEN,         \
   1143                                     TransmitApp_Msg,                    \
   1144                                    &TransmitApp_RelayTransID,           \
   1145                                     TRANSMITAPP_TX_OPTIONS,             \
   1146                                     AF_DEFAULT_RADIUS );
   1147            }
   \                     ??CrossCallReturnLabel_20:
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003C   75....       MOV     ?V0 + 0,#TransmitApp_RelayTransID & 0xff
   \   00003F   75....       MOV     ?V0 + 1,#(TransmitApp_RelayTransID >> 8) & 0xff
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   00004A   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..05       MOV     ?V0 + 0,#0x5
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..0A       MOV     ?V0 + 0,#0xa
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7920         MOV     R1,#0x20
   \   000067   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000069   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00006B   7A..         MOV     R2,#TransmitApp_DstRelayAddr & 0xff
   \   00006D   7B..         MOV     R3,#(TransmitApp_DstRelayAddr >> 8) & 0xff
   \   00006F   12....       LCALL   ??AF_DataRequest?relay
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   1148          }
   \                     ??TransmitApp_SendToRelayMSG_0:
   \   000077   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   540F         ANL     A,#0xf
   \   000002   FA           MOV     R2,A
   \   000003   C3           CLR     C
   \   000004   940A         SUBB    A,#0xa
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function AF_DataRequest
   \   000004                ; Setup parameters for call to function AF_DataRequest
   \   000004   75..1E       MOV     ?V0 + 0,#0x1e
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET
   1149          
   1150          /*******************************************************************************
   1151           * @fn      TransmitApp_SendToMotorMSG
   1152           *
   1153           * @brief   Send  message to motor.
   1154           *
   1155           * @param   uint8 cmd: motor command
   1156           *
   1157           * @return  none
   1158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          void TransmitApp_SendToMotorMSG( uint8 cmd, uint8 speed )
   \                     TransmitApp_SendToMotorMSG:
   1160          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   1161            uint8 tmp;
   1162            
   1163            // 只有设备在线时, 方发送控制命令
   1164            if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000009   90....       MOV     DPTR,#motor
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   606B         JZ      ??TransmitApp_SendToMotorMSG_0
   1165            {
   1166              // put the sequence number in the message
   1167              tmp = HI_UINT8( TransmitApp_MotorTransID );
   \   000011   90....       MOV     DPTR,#TransmitApp_MotorTransID
   \   000014   12....       LCALL   ?Subroutine21 & 0xFFFF
   1168              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_49:
   \   000017   5004         JNC     ??TransmitApp_SendToMotorMSG_1
   \   000019   7830         MOV     R0,#0x30
   \   00001B   8002         SJMP    ??TransmitApp_SendToMotorMSG_2
   \                     ??TransmitApp_SendToMotorMSG_1:
   \   00001D   7837         MOV     R0,#0x37
   1169              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendToMotorMSG_2:
   \   00001F   E8           MOV     A,R0
   \   000020   2A           ADD     A,R2
   \   000021   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   000024   F0           MOVX    @DPTR,A
   1170              tmp = LO_UINT8( TransmitApp_MotorTransID );
   \   000025   90....       MOV     DPTR,#TransmitApp_MotorTransID
   \   000028   12....       LCALL   ?Subroutine35 & 0xFFFF
   1171              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \                     ??CrossCallReturnLabel_88:
   \   00002B   5004         JNC     ??TransmitApp_SendToMotorMSG_3
   \   00002D   7830         MOV     R0,#0x30
   \   00002F   8002         SJMP    ??TransmitApp_SendToMotorMSG_4
   \                     ??TransmitApp_SendToMotorMSG_3:
   \   000031   7837         MOV     R0,#0x37
   1172              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendToMotorMSG_4:
   \   000033   E8           MOV     A,R0
   \   000034   2A           ADD     A,R2
   \   000035   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000038   F0           MOVX    @DPTR,A
   1173              
   1174              TransmitApp_Msg[4] = speed; // 电机速度
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ?Subroutine10 & 0xFFFF
   1175              TransmitApp_Msg[5] = cmd;   // 电机控制状态(方向)
   1176            
   1177              //TransmitApp_epDesc.endPoint = TRANSMITAPP_CLUSTERID_MOTORCTLMSG; // 20201225
   1178              tmp = AF_DataRequest( &TransmitApp_DstMotorAddr,            \
   1179                                    &TransmitApp_epDesc,                  \
   1180                                     TRANSMITAPP_CLUSTERID_MOTORCTLMSG,   \
   1181                                     TRANSMITAPP_MOTOR_DATA_LEN,          \
   1182                                     TransmitApp_Msg,                     \
   1183                                    &TransmitApp_MotorTransID,            \
   1184                                     TRANSMITAPP_TX_OPTIONS,              \
   1185                                     AF_DEFAULT_RADIUS );
   1186            }
   \                     ??CrossCallReturnLabel_21:
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000041   75....       MOV     ?V0 + 0,#TransmitApp_MotorTransID & 0xff
   \   000044   75....       MOV     ?V0 + 1,#(TransmitApp_MotorTransID >> 8) & 0xff
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   00004F   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..06       MOV     ?V0 + 0,#0x6
   \   00005A   75..00       MOV     ?V0 + 1,#0x0
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   75..0B       MOV     ?V0 + 0,#0xb
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7920         MOV     R1,#0x20
   \   00006C   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   00006E   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000070   7A..         MOV     R2,#TransmitApp_DstMotorAddr & 0xff
   \   000072   7B..         MOV     R3,#(TransmitApp_DstMotorAddr >> 8) & 0xff
   \   000074   12....       LCALL   ??AF_DataRequest?relay
   \   000077   7409         MOV     A,#0x9
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   1187          }
   \                     ??TransmitApp_SendToMotorMSG_0:
   \   00007C                REQUIRE ?Subroutine1
   \   00007C                ; // Fall through to label ?Subroutine1
   1188          
   1189          /*******************************************************************************
   1190           * @fn      TransmitApp_DisplayResults
   1191           *
   1192           * @brief   Display the results
   1193           *
   1194           * @param   none
   1195           *
   1196           * @return  none
   1197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1198          void TransmitApp_DisplayResults( uint8 dispPage, uint8 *scrollLine )
   \                     TransmitApp_DisplayResults:
   1199          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 206
   \   000005   7432         MOV     A,#0x32
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   1200          #if defined LCD_SUPPORTED 
   1201            uint8 i, scrollLineTmp;
   1202            char dispBuf[12][16]; // LCD显示缓存
   1203            uint8 buf[6];
   1204            uint16 light;
   1205            uint8 dispIDBuf[8];
   1206            
   1207            // 温湿度传感器中的湿度显示
   1208            strcpy(dispBuf[0], "H:");
   \   000010                ; Setup parameters for call to function strcpy
   \   000010   7C..         MOV     R4,#`?<Constant "H:">` & 0xff
   \   000012   7D..         MOV     R5,#(`?<Constant "H:">` >> 8) & 0xff
   \   000014   740E         MOV     A,#0xe
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   AA82         MOV     R2,DPL
   \   00001B   AB83         MOV     R3,DPH
   \   00001D   12....       LCALL   ??strcpy?relay
   1209            if (Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000020   90....       MOV     DPTR,#Humit
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6402         XRL     A,#0x2
   \   000026   6038         JZ      ??TransmitApp_DisplayResults_0
   1210            {
   1211              _ltoa(Humit.data[0], buf, 10);
   \   000028                ; Setup parameters for call to function _ltoa
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   8582..       MOV     ?V0 + 2,DPL
   \   000031   8583..       MOV     ?V0 + 3,DPH
   \   000034   78..         MOV     R0,#?V0 + 2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   790A         MOV     R1,#0xa
   \   00003B   90....       MOV     DPTR,#Humit + 1
   \   00003E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   1212              strcat(dispBuf[0], (char *)buf);
   \   000044                ; Setup parameters for call to function strcat
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   AC82         MOV     R4,DPL
   \   00004C   AD83         MOV     R5,DPH
   \   00004E   740E         MOV     A,#0xe
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   AA82         MOV     R2,DPL
   \   000055   AB83         MOV     R3,DPH
   \   000057   12....       LCALL   ??strcat?relay
   1213              strcat(dispBuf[0], "%");
   \   00005A                ; Setup parameters for call to function strcat
   \   00005A   7C..         MOV     R4,#`?<Constant "%">` & 0xff
   \   00005C   7D..         MOV     R5,#(`?<Constant "%">` >> 8) & 0xff
   \   00005E   8004         SJMP    ??TransmitApp_DisplayResults_1
   1214            }
   1215            else
   1216            {
   1217                strcat(dispBuf[0], "OFF");
   \                     ??TransmitApp_DisplayResults_0:
   \   000060                ; Setup parameters for call to function strcat
   \   000060   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000062   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_1:
   \   000064   740E         MOV     A,#0xe
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   12....       LCALL   ??strcat?relay
   1218            }
   1219            // 温湿度传感器中的温度显示
   1220            strcat(dispBuf[0], " T:");
   \   000070                ; Setup parameters for call to function strcat
   \   000070   7C..         MOV     R4,#`?<Constant " T:">` & 0xff
   \   000072   7D..         MOV     R5,#(`?<Constant " T:">` >> 8) & 0xff
   \   000074   740E         MOV     A,#0xe
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??strcat?relay
   1221            if (Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000080   90....       MOV     DPTR,#Humit
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6402         XRL     A,#0x2
   \   000086   6038         JZ      ??TransmitApp_DisplayResults_2
   1222            {
   1223              _ltoa(Humit.data[1], buf, 10);
   \   000088                ; Setup parameters for call to function _ltoa
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   8582..       MOV     ?V0 + 2,DPL
   \   000091   8583..       MOV     ?V0 + 3,DPH
   \   000094   78..         MOV     R0,#?V0 + 2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   790A         MOV     R1,#0xa
   \   00009B   90....       MOV     DPTR,#Humit + 2
   \   00009E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   1224              strcat(dispBuf[0], (char *)buf);
   \   0000A4                ; Setup parameters for call to function strcat
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   AC82         MOV     R4,DPL
   \   0000AC   AD83         MOV     R5,DPH
   \   0000AE   740E         MOV     A,#0xe
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   AA82         MOV     R2,DPL
   \   0000B5   AB83         MOV     R3,DPH
   \   0000B7   12....       LCALL   ??strcat?relay
   1225              strcat(dispBuf[0], "C");
   \   0000BA                ; Setup parameters for call to function strcat
   \   0000BA   7C..         MOV     R4,#`?<Constant "C">` & 0xff
   \   0000BC   7D..         MOV     R5,#(`?<Constant "C">` >> 8) & 0xff
   \   0000BE   8004         SJMP    ??TransmitApp_DisplayResults_3
   1226            }
   1227            else
   1228            {
   1229              strcat(dispBuf[0], "OFF");
   \                     ??TransmitApp_DisplayResults_2:
   \   0000C0                ; Setup parameters for call to function strcat
   \   0000C0   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0000C2   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_3:
   \   0000C4   740E         MOV     A,#0xe
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   12....       LCALL   ??strcat?relay
   1230            }
   1231                  
   1232            // 温度与光照度显示
   1233            if (TempLight.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0000D0   90....       MOV     DPTR,#TempLight
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   6402         XRL     A,#0x2
   \   0000D6   7003         JNZ     $+5
   \   0000D8   02....       LJMP    ??TransmitApp_DisplayResults_4 & 0xFFFF
   1234            {
   1235             _ltoa(TempLight.data[0], buf, 10);
   \   0000DB                ; Setup parameters for call to function _ltoa
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   8582..       MOV     ?V0 + 2,DPL
   \   0000E4   8583..       MOV     ?V0 + 3,DPH
   \   0000E7   78..         MOV     R0,#?V0 + 2
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   790A         MOV     R1,#0xa
   \   0000EE   90....       MOV     DPTR,#TempLight + 1
   \   0000F1   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   1236             strcpy(dispBuf[1], (char *)buf);
   \   0000F7                ; Setup parameters for call to function strcpy
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   AC82         MOV     R4,DPL
   \   0000FF   AD83         MOV     R5,DPH
   \   000101   741E         MOV     A,#0x1e
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   AA82         MOV     R2,DPL
   \   000108   AB83         MOV     R3,DPH
   \   00010A   12....       LCALL   ??strcpy?relay
   1237              strcat(dispBuf[1], ".");
   \   00010D                ; Setup parameters for call to function strcat
   \   00010D   7C..         MOV     R4,#`?<Constant ".">` & 0xff
   \   00010F   7D..         MOV     R5,#(`?<Constant ".">` >> 8) & 0xff
   \   000111   741E         MOV     A,#0x1e
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   AA82         MOV     R2,DPL
   \   000118   AB83         MOV     R3,DPH
   \   00011A   12....       LCALL   ??strcat?relay
   1238              _ltoa((long)((float)TempLight.data[1]*62.5), buf, 10);
   \   00011D                ; Setup parameters for call to function _ltoa
   \   00011D   78..         MOV     R0,#?V0 + 2
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000122   90....       MOV     DPTR,#TempLight + 2
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F5..         MOV     ?V0 + 4,A
   \   000128   E4           CLR     A
   \   000129   F5..         MOV     ?V0 + 5,A
   \   00012B   F5..         MOV     ?V0 + 6,A
   \   00012D   F5..         MOV     ?V0 + 7,A
   \   00012F   78..         MOV     R0,#?V0 + 4
   \   000131   12....       LCALL   ?UL_TO_FLT
   \   000134   90....       MOV     DPTR,#__Constant_427a0000
   \   000137   78..         MOV     R0,#?V0 + 8
   \   000139   12....       LCALL   ?L_MOV_X
   \   00013C   78..         MOV     R0,#?V0 + 4
   \   00013E   79..         MOV     R1,#?V0 + 8
   \   000140   12....       LCALL   ?FLT_MUL
   \   000143   78..         MOV     R0,#?V0 + 4
   \   000145   12....       LCALL   ?FLT_TO_L
   \   000148   AA..         MOV     R2,?V0 + 4
   \   00014A   AB..         MOV     R3,?V0 + 5
   \   00014C   AC..         MOV     R4,?V0 + 6
   \   00014E   AD..         MOV     R5,?V0 + 7
   \   000150   740A         MOV     A,#0xa
   \   000152   F9           MOV     R1,A
   \   000153   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   1239              strcat(dispBuf[1], (char *)buf);
   \   000159                ; Setup parameters for call to function strcat
   \   000159   85..82       MOV     DPL,?XSP + 0
   \   00015C   85..83       MOV     DPH,?XSP + 1
   \   00015F   AC82         MOV     R4,DPL
   \   000161   AD83         MOV     R5,DPH
   \   000163   741E         MOV     A,#0x1e
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   AA82         MOV     R2,DPL
   \   00016A   AB83         MOV     R3,DPH
   \   00016C   12....       LCALL   ??strcat?relay
   1240              strcat(dispBuf[1], "C ");
   \   00016F                ; Setup parameters for call to function strcat
   \   00016F   7C..         MOV     R4,#`?<Constant "C ">` & 0xff
   \   000171   7D..         MOV     R5,#(`?<Constant "C ">` >> 8) & 0xff
   \   000173   741E         MOV     A,#0x1e
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   AA82         MOV     R2,DPL
   \   00017A   AB83         MOV     R3,DPH
   \   00017C   12....       LCALL   ??strcat?relay
   1241              light = (uint16)(TempLight.data[2]<<8) + TempLight.data[3];
   1242              _ltoa(light, buf, 10);
   \   00017F                ; Setup parameters for call to function _ltoa
   \   00017F   78..         MOV     R0,#?V0 + 2
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000184   790A         MOV     R1,#0xa
   \   000186   90....       MOV     DPTR,#TempLight + 3
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   FB           MOV     R3,A
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   FA           MOV     R2,A
   \   00018E   E4           CLR     A
   \   00018F   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   1243              strcat(dispBuf[1], (char *)buf);
   \   000195                ; Setup parameters for call to function strcat
   \   000195   85..82       MOV     DPL,?XSP + 0
   \   000198   85..83       MOV     DPH,?XSP + 1
   \   00019B   AC82         MOV     R4,DPL
   \   00019D   AD83         MOV     R5,DPH
   \   00019F   741E         MOV     A,#0x1e
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   AA82         MOV     R2,DPL
   \   0001A6   AB83         MOV     R3,DPH
   \   0001A8   12....       LCALL   ??strcat?relay
   1244              strcat(dispBuf[1], "L");
   \   0001AB                ; Setup parameters for call to function strcat
   \   0001AB   7C..         MOV     R4,#`?<Constant "L">` & 0xff
   \   0001AD   7D..         MOV     R5,#(`?<Constant "L">` >> 8) & 0xff
   \   0001AF   741E         MOV     A,#0x1e
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   AA82         MOV     R2,DPL
   \   0001B6   AB83         MOV     R3,DPH
   \   0001B8   12....       LCALL   ??strcat?relay
   \   0001BB   8010         SJMP    ??TransmitApp_DisplayResults_5
   1245            }
   1246            else
   1247            {
   1248              strcpy(dispBuf[1], "T:OFF L:OFF");
   \                     ??TransmitApp_DisplayResults_4:
   \   0001BD                ; Setup parameters for call to function strcpy
   \   0001BD   7C..         MOV     R4,#`?<Constant "T:OFF L:OFF">` & 0xff
   \   0001BF   7D..         MOV     R5,#(`?<Constant "T:OFF L:OFF">` >> 8) & 0xff
   \   0001C1   741E         MOV     A,#0x1e
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   AA82         MOV     R2,DPL
   \   0001C8   AB83         MOV     R3,DPH
   \   0001CA   12....       LCALL   ??strcpy?relay
   1249            }
   1250              
   1251            // 继电器状态显示
   1252            strcpy(dispBuf[2], "K1:");
   \                     ??TransmitApp_DisplayResults_5:
   \   0001CD                ; Setup parameters for call to function strcpy
   \   0001CD   7C..         MOV     R4,#`?<Constant "K1:">` & 0xff
   \   0001CF   7D..         MOV     R5,#(`?<Constant "K1:">` >> 8) & 0xff
   \   0001D1   742E         MOV     A,#0x2e
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   AA82         MOV     R2,DPL
   \   0001D8   AB83         MOV     R3,DPH
   \   0001DA   12....       LCALL   ??strcpy?relay
   1253            if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0001DD   90....       MOV     DPTR,#relay
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   6402         XRL     A,#0x2
   \   0001E3   6016         JZ      ??TransmitApp_DisplayResults_6
   1254            {
   1255              if (relay.data[0] & 0x01)
   \   0001E5   A3           INC     DPTR
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001E9   5006         JNC     ??TransmitApp_DisplayResults_7
   1256              {
   1257                strcat(dispBuf[2], "off");
   \   0001EB                ; Setup parameters for call to function strcat
   \   0001EB   7C..         MOV     R4,#`?<Constant "off">` & 0xff
   \   0001ED   7D..         MOV     R5,#(`?<Constant "off">` >> 8) & 0xff
   \   0001EF   800E         SJMP    ??TransmitApp_DisplayResults_8
   1258              }
   1259              else if(relay.data[0] & 0x02)
   \                     ??TransmitApp_DisplayResults_7:
   \   0001F1   A2E1         MOV     C,0xE0 /* A   */.1
   \   0001F3   5016         JNC     ??TransmitApp_DisplayResults_9
   1260              {
   1261                strcat(dispBuf[2], "on");
   \   0001F5                ; Setup parameters for call to function strcat
   \   0001F5   7C..         MOV     R4,#`?<Constant "on">` & 0xff
   \   0001F7   7D..         MOV     R5,#(`?<Constant "on">` >> 8) & 0xff
   \   0001F9   8004         SJMP    ??TransmitApp_DisplayResults_8
   1262              }
   1263            }
   1264            else
   1265            {
   1266              strcat(dispBuf[2], "OFF");
   \                     ??TransmitApp_DisplayResults_6:
   \   0001FB                ; Setup parameters for call to function strcat
   \   0001FB   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0001FD   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_8:
   \   0001FF   742E         MOV     A,#0x2e
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   AA82         MOV     R2,DPL
   \   000206   AB83         MOV     R3,DPH
   \   000208   12....       LCALL   ??strcat?relay
   1267            }
   1268            strcat(dispBuf[2], " K2:");
   \                     ??TransmitApp_DisplayResults_9:
   \   00020B                ; Setup parameters for call to function strcat
   \   00020B   7C..         MOV     R4,#`?<Constant " K2:">` & 0xff
   \   00020D   7D..         MOV     R5,#(`?<Constant " K2:">` >> 8) & 0xff
   \   00020F   742E         MOV     A,#0x2e
   \   000211   12....       LCALL   ?XSTACK_DISP0_8
   \   000214   AA82         MOV     R2,DPL
   \   000216   AB83         MOV     R3,DPH
   \   000218   12....       LCALL   ??strcat?relay
   1269            if (relay.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   00021B   90....       MOV     DPTR,#relay
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   6402         XRL     A,#0x2
   \   000221   6016         JZ      ??TransmitApp_DisplayResults_10
   1270            {
   1271              if (relay.data[0] & 0x10)
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \   000225   A2E4         MOV     C,0xE0 /* A   */.4
   \   000227   5006         JNC     ??TransmitApp_DisplayResults_11
   1272              {
   1273                strcat(dispBuf[2], "off");
   \   000229                ; Setup parameters for call to function strcat
   \   000229   7C..         MOV     R4,#`?<Constant "off">` & 0xff
   \   00022B   7D..         MOV     R5,#(`?<Constant "off">` >> 8) & 0xff
   \   00022D   800E         SJMP    ??TransmitApp_DisplayResults_12
   1274              }
   1275              else if(relay.data[0] & 0x20)
   \                     ??TransmitApp_DisplayResults_11:
   \   00022F   A2E5         MOV     C,0xE0 /* A   */.5
   \   000231   5016         JNC     ??TransmitApp_DisplayResults_13
   1276              {
   1277                strcat(dispBuf[2], "on");
   \   000233                ; Setup parameters for call to function strcat
   \   000233   7C..         MOV     R4,#`?<Constant "on">` & 0xff
   \   000235   7D..         MOV     R5,#(`?<Constant "on">` >> 8) & 0xff
   \   000237   8004         SJMP    ??TransmitApp_DisplayResults_12
   1278              }
   1279            }
   1280            else
   1281            {
   1282              strcat(dispBuf[2], "OFF");
   \                     ??TransmitApp_DisplayResults_10:
   \   000239                ; Setup parameters for call to function strcat
   \   000239   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   00023B   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_12:
   \   00023D   742E         MOV     A,#0x2e
   \   00023F   12....       LCALL   ?XSTACK_DISP0_8
   \   000242   AA82         MOV     R2,DPL
   \   000244   AB83         MOV     R3,DPH
   \   000246   12....       LCALL   ??strcat?relay
   1283            }
   1284                 
   1285            // 直流电机运行状态显示
   1286            strcpy(dispBuf[3], "Motor:");
   \                     ??TransmitApp_DisplayResults_13:
   \   000249                ; Setup parameters for call to function strcpy
   \   000249   7C..         MOV     R4,#`?<Constant "Motor:">` & 0xff
   \   00024B   7D..         MOV     R5,#(`?<Constant "Motor:">` >> 8) & 0xff
   \   00024D   743E         MOV     A,#0x3e
   \   00024F   12....       LCALL   ?XSTACK_DISP0_8
   \   000252   12....       LCALL   ?Subroutine27 & 0xFFFF
   1287            if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_61:
   \   000255   6024         JZ      ??TransmitApp_DisplayResults_14
   1288            {
   1289              if (motor.data[1] == 1)
   \   000257   90....       MOV     DPTR,#motor + 2
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   6401         XRL     A,#0x1
   \   00025D   7006         JNZ     ??TransmitApp_DisplayResults_15
   1290              {
   1291                strcat(dispBuf[3], "Stop");
   \   00025F                ; Setup parameters for call to function strcat
   \   00025F   7C..         MOV     R4,#`?<Constant "Stop">` & 0xff
   \   000261   7D..         MOV     R5,#(`?<Constant "Stop">` >> 8) & 0xff
   \   000263   801A         SJMP    ??TransmitApp_DisplayResults_16
   1292              }
   1293              else if (motor.data[1] == 2)
   \                     ??TransmitApp_DisplayResults_15:
   \   000265   E0           MOVX    A,@DPTR
   \   000266   6402         XRL     A,#0x2
   \   000268   7006         JNZ     ??TransmitApp_DisplayResults_17
   1294              {
   1295                strcat(dispBuf[3], "Forward");
   \   00026A                ; Setup parameters for call to function strcat
   \   00026A   7C..         MOV     R4,#`?<Constant "Forward">` & 0xff
   \   00026C   7D..         MOV     R5,#(`?<Constant "Forward">` >> 8) & 0xff
   \   00026E   800F         SJMP    ??TransmitApp_DisplayResults_16
   1296              }
   1297              else if(motor.data[1] == 3)
   \                     ??TransmitApp_DisplayResults_17:
   \   000270   E0           MOVX    A,@DPTR
   \   000271   6403         XRL     A,#0x3
   \   000273   7016         JNZ     ??TransmitApp_DisplayResults_18
   1298              {
   1299                strcat(dispBuf[3], "Backward");
   \   000275                ; Setup parameters for call to function strcat
   \   000275   7C..         MOV     R4,#`?<Constant "Backward">` & 0xff
   \   000277   7D..         MOV     R5,#(`?<Constant "Backward">` >> 8) & 0xff
   \   000279   8004         SJMP    ??TransmitApp_DisplayResults_16
   1300              }
   1301            }
   1302            else
   1303            {
   1304              strcat(dispBuf[3], "OFF");
   \                     ??TransmitApp_DisplayResults_14:
   \   00027B                ; Setup parameters for call to function strcat
   \   00027B   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   00027D   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_16:
   \   00027F   743E         MOV     A,#0x3e
   \   000281   12....       LCALL   ?XSTACK_DISP0_8
   \   000284   AA82         MOV     R2,DPL
   \   000286   AB83         MOV     R3,DPH
   \   000288   12....       LCALL   ??strcat?relay
   1305            }
   1306              
   1307            // 电机转速信息显示
   1308            strcpy(dispBuf[4], "Speed:");
   \                     ??TransmitApp_DisplayResults_18:
   \   00028B                ; Setup parameters for call to function strcpy
   \   00028B   7C..         MOV     R4,#`?<Constant "Speed:">` & 0xff
   \   00028D   7D..         MOV     R5,#(`?<Constant "Speed:">` >> 8) & 0xff
   \   00028F   744E         MOV     A,#0x4e
   \   000291   12....       LCALL   ?XSTACK_DISP0_8
   \   000294   12....       LCALL   ?Subroutine27 & 0xFFFF
   1309            if (motor.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_62:
   \   000297   6046         JZ      ??TransmitApp_DisplayResults_19
   1310            {
   1311              _ltoa(motor.data[0]*60, buf, 10);
   \   000299                ; Setup parameters for call to function _ltoa
   \   000299   85..82       MOV     DPL,?XSP + 0
   \   00029C   85..83       MOV     DPH,?XSP + 1
   \   00029F   8582..       MOV     ?V0 + 2,DPL
   \   0002A2   8583..       MOV     ?V0 + 3,DPH
   \   0002A5   78..         MOV     R0,#?V0 + 2
   \   0002A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002AA   790A         MOV     R1,#0xa
   \   0002AC   90....       MOV     DPTR,#motor + 1
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   75F03C       MOV     B,#0x3c
   \   0002B3   A4           MUL     AB
   \   0002B4   FA           MOV     R2,A
   \   0002B5   A8F0         MOV     R0,B
   \   0002B7   E4           CLR     A
   \   0002B8   28           ADD     A,R0
   \   0002B9   FB           MOV     R3,A
   \   0002BA   33           RLC     A
   \   0002BB   95E0         SUBB    A,0xE0 /* A   */
   \   0002BD   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0002C0   12....       LCALL   ?DEALLOC_XSTACK8
   1312              strcat(dispBuf[4], (char *)buf);
   \   0002C3                ; Setup parameters for call to function strcat
   \   0002C3   85..82       MOV     DPL,?XSP + 0
   \   0002C6   85..83       MOV     DPH,?XSP + 1
   \   0002C9   AC82         MOV     R4,DPL
   \   0002CB   AD83         MOV     R5,DPH
   \   0002CD   744E         MOV     A,#0x4e
   \   0002CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D2   AA82         MOV     R2,DPL
   \   0002D4   AB83         MOV     R3,DPH
   \   0002D6   12....       LCALL   ??strcat?relay
   1313              strcat(dispBuf[4], "RPS");
   \   0002D9                ; Setup parameters for call to function strcat
   \   0002D9   7C..         MOV     R4,#`?<Constant "RPS">` & 0xff
   \   0002DB   7D..         MOV     R5,#(`?<Constant "RPS">` >> 8) & 0xff
   \   0002DD   8004         SJMP    ??TransmitApp_DisplayResults_20
   1314            }
   1315            else
   1316            {
   1317              strcat(dispBuf[4], "OFF");
   \                     ??TransmitApp_DisplayResults_19:
   \   0002DF                ; Setup parameters for call to function strcat
   \   0002DF   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0002E1   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_20:
   \   0002E3   744E         MOV     A,#0x4e
   \   0002E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E8   AA82         MOV     R2,DPL
   \   0002EA   AB83         MOV     R3,DPH
   \   0002EC   12....       LCALL   ??strcat?relay
   1318            }
   1319            
   1320            // 第0位存储烟雾/有害气体报警信息，第1位存储火焰报警信息
   1321            // 烟雾/有害气体检测信息信息
   1322            strcpy(dispBuf[5], "Gas:");
   \   0002EF                ; Setup parameters for call to function strcpy
   \   0002EF   7C..         MOV     R4,#`?<Constant "Gas:">` & 0xff
   \   0002F1   7D..         MOV     R5,#(`?<Constant "Gas:">` >> 8) & 0xff
   \   0002F3   745E         MOV     A,#0x5e
   \   0002F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F8   12....       LCALL   ?Subroutine28 & 0xFFFF
   1323            if (gasFlame.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_63:
   \   0002FB   6012         JZ      ??TransmitApp_DisplayResults_21
   1324            {
   1325              if (gasFlame.data[0] & 0x01)
   \   0002FD   A3           INC     DPTR
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   A2E0         MOV     C,0xE0 /* A   */.0
   \   000301   5006         JNC     ??TransmitApp_DisplayResults_22
   1326              {
   1327                strcat(dispBuf[5], "Alarm!");
   \   000303                ; Setup parameters for call to function strcat
   \   000303   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000305   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000307   800A         SJMP    ??TransmitApp_DisplayResults_23
   1328              }
   1329              else
   1330              {
   1331                strcat(dispBuf[5], "ON");
   \                     ??TransmitApp_DisplayResults_22:
   \   000309                ; Setup parameters for call to function strcat
   \   000309   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00030B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00030D   8004         SJMP    ??TransmitApp_DisplayResults_23
   1332              }
   1333            }
   1334            else
   1335            {
   1336              strcat(dispBuf[5], "OFF");
   \                     ??TransmitApp_DisplayResults_21:
   \   00030F                ; Setup parameters for call to function strcat
   \   00030F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000311   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_23:
   \   000313   745E         MOV     A,#0x5e
   \   000315   12....       LCALL   ?XSTACK_DISP0_8
   \   000318   AA82         MOV     R2,DPL
   \   00031A   AB83         MOV     R3,DPH
   \   00031C   12....       LCALL   ??strcat?relay
   1337            }
   1338              
   1339            // 火焰检测信息显示
   1340            strcpy(dispBuf[6], "Flame:");
   \   00031F                ; Setup parameters for call to function strcpy
   \   00031F   7C..         MOV     R4,#`?<Constant "Flame:">` & 0xff
   \   000321   7D..         MOV     R5,#(`?<Constant "Flame:">` >> 8) & 0xff
   \   000323   746E         MOV     A,#0x6e
   \   000325   12....       LCALL   ?XSTACK_DISP0_8
   \   000328   12....       LCALL   ?Subroutine28 & 0xFFFF
   1341            if (gasFlame.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_64:
   \   00032B   6012         JZ      ??TransmitApp_DisplayResults_24
   1342            {
   1343              if(gasFlame.data[0] & 0x02)
   \   00032D   A3           INC     DPTR
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000331   5006         JNC     ??TransmitApp_DisplayResults_25
   1344              {
   1345                strcat(dispBuf[6], "Alarm!");
   \   000333                ; Setup parameters for call to function strcat
   \   000333   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000335   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000337   800A         SJMP    ??TransmitApp_DisplayResults_26
   1346              }
   1347              else
   1348              {
   1349                strcat(dispBuf[6], "ON");
   \                     ??TransmitApp_DisplayResults_25:
   \   000339                ; Setup parameters for call to function strcat
   \   000339   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00033B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00033D   8004         SJMP    ??TransmitApp_DisplayResults_26
   1350              }
   1351            }
   1352            else
   1353            {
   1354              strcat(dispBuf[6], "OFF");
   \                     ??TransmitApp_DisplayResults_24:
   \   00033F                ; Setup parameters for call to function strcat
   \   00033F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000341   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_26:
   \   000343   746E         MOV     A,#0x6e
   \   000345   12....       LCALL   ?XSTACK_DISP0_8
   \   000348   AA82         MOV     R2,DPL
   \   00034A   AB83         MOV     R3,DPH
   \   00034C   12....       LCALL   ??strcat?relay
   1355            }
   1356              
   1357            // 第0位存储声音报警信息，第1位存储振动报警信息
   1358            // 声音检测信息显示
   1359            strcpy(dispBuf[7], "Sound:");
   \   00034F                ; Setup parameters for call to function strcpy
   \   00034F   7C..         MOV     R4,#`?<Constant "Sound:">` & 0xff
   \   000351   7D..         MOV     R5,#(`?<Constant "Sound:">` >> 8) & 0xff
   \   000353   747E         MOV     A,#0x7e
   \   000355   12....       LCALL   ?XSTACK_DISP0_8
   \   000358   12....       LCALL   ?Subroutine29 & 0xFFFF
   1360            if (soundVb.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_65:
   \   00035B   6012         JZ      ??TransmitApp_DisplayResults_27
   1361            {
   1362              if (soundVb.data[0] & 0x01)
   \   00035D   A3           INC     DPTR
   \   00035E   E0           MOVX    A,@DPTR
   \   00035F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000361   5006         JNC     ??TransmitApp_DisplayResults_28
   1363              {
   1364                strcat(dispBuf[7], "Alarm!");
   \   000363                ; Setup parameters for call to function strcat
   \   000363   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000365   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000367   800A         SJMP    ??TransmitApp_DisplayResults_29
   1365              }
   1366              else
   1367              {
   1368                strcat(dispBuf[7], "ON");
   \                     ??TransmitApp_DisplayResults_28:
   \   000369                ; Setup parameters for call to function strcat
   \   000369   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00036B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00036D   8004         SJMP    ??TransmitApp_DisplayResults_29
   1369              }
   1370            }
   1371            else
   1372            {
   1373              strcat(dispBuf[7], "OFF");
   \                     ??TransmitApp_DisplayResults_27:
   \   00036F                ; Setup parameters for call to function strcat
   \   00036F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000371   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_29:
   \   000373   747E         MOV     A,#0x7e
   \   000375   12....       LCALL   ?XSTACK_DISP0_8
   \   000378   AA82         MOV     R2,DPL
   \   00037A   AB83         MOV     R3,DPH
   \   00037C   12....       LCALL   ??strcat?relay
   1374            }
   1375            
   1376            // 震动检测信息显示
   1377            strcpy(dispBuf[8], "Vibrate:");
   \   00037F                ; Setup parameters for call to function strcpy
   \   00037F   7C..         MOV     R4,#`?<Constant "Vibrate:">` & 0xff
   \   000381   7D..         MOV     R5,#(`?<Constant "Vibrate:">` >> 8) & 0xff
   \   000383   748E         MOV     A,#-0x72
   \   000385   12....       LCALL   ?XSTACK_DISP0_8
   \   000388   12....       LCALL   ?Subroutine29 & 0xFFFF
   1378            if (soundVb.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_66:
   \   00038B   6012         JZ      ??TransmitApp_DisplayResults_30
   1379            {
   1380              if(soundVb.data[0] & 0x02)
   \   00038D   A3           INC     DPTR
   \   00038E   E0           MOVX    A,@DPTR
   \   00038F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000391   5006         JNC     ??TransmitApp_DisplayResults_31
   1381              {
   1382                strcat(dispBuf[8], "Alarm!");
   \   000393                ; Setup parameters for call to function strcat
   \   000393   7C..         MOV     R4,#`?<Constant "Alarm!">` & 0xff
   \   000395   7D..         MOV     R5,#(`?<Constant "Alarm!">` >> 8) & 0xff
   \   000397   800A         SJMP    ??TransmitApp_DisplayResults_32
   1383              }
   1384              else
   1385              {
   1386                strcat(dispBuf[8], "ON");
   \                     ??TransmitApp_DisplayResults_31:
   \   000399                ; Setup parameters for call to function strcat
   \   000399   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   00039B   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   00039D   8004         SJMP    ??TransmitApp_DisplayResults_32
   1387              }
   1388            }
   1389            else
   1390            {
   1391              strcat(dispBuf[8], "OFF");
   \                     ??TransmitApp_DisplayResults_30:
   \   00039F                ; Setup parameters for call to function strcat
   \   00039F   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0003A1   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_32:
   \   0003A3   748E         MOV     A,#-0x72
   \   0003A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A8   AA82         MOV     R2,DPL
   \   0003AA   AB83         MOV     R3,DPH
   \   0003AC   12....       LCALL   ??strcat?relay
   1392            }
   1393              
   1394            // 人体红外检测信息显示
   1395            strcpy(dispBuf[9], "Infrared:");
   \   0003AF                ; Setup parameters for call to function strcpy
   \   0003AF   7C..         MOV     R4,#`?<Constant "Infrared:">` & 0xff
   \   0003B1   7D..         MOV     R5,#(`?<Constant "Infrared:">` >> 8) & 0xff
   \   0003B3   749E         MOV     A,#-0x62
   \   0003B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B8   AA82         MOV     R2,DPL
   \   0003BA   AB83         MOV     R3,DPH
   \   0003BC   12....       LCALL   ??strcpy?relay
   1396            if (infrared.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0003BF   90....       MOV     DPTR,#infrared
   \   0003C2   E0           MOVX    A,@DPTR
   \   0003C3   6402         XRL     A,#0x2
   \   0003C5   6012         JZ      ??TransmitApp_DisplayResults_33
   1397            {
   1398              if (infrared.data[0] & 0x01)
   \   0003C7   A3           INC     DPTR
   \   0003C8   E0           MOVX    A,@DPTR
   \   0003C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003CB   5006         JNC     ??TransmitApp_DisplayResults_34
   1399              {
   1400                strcat(dispBuf[9], "Human!");
   \   0003CD                ; Setup parameters for call to function strcat
   \   0003CD   7C..         MOV     R4,#`?<Constant "Human!">` & 0xff
   \   0003CF   7D..         MOV     R5,#(`?<Constant "Human!">` >> 8) & 0xff
   \   0003D1   800A         SJMP    ??TransmitApp_DisplayResults_35
   1401              }
   1402              else
   1403              {
   1404                 strcat(dispBuf[9], "ON");
   \                     ??TransmitApp_DisplayResults_34:
   \   0003D3                ; Setup parameters for call to function strcat
   \   0003D3   7C..         MOV     R4,#`?<Constant "ON">` & 0xff
   \   0003D5   7D..         MOV     R5,#(`?<Constant "ON">` >> 8) & 0xff
   \   0003D7   8004         SJMP    ??TransmitApp_DisplayResults_35
   1405              }
   1406            }
   1407            else
   1408            {
   1409              strcat(dispBuf[9], "OFF");
   \                     ??TransmitApp_DisplayResults_33:
   \   0003D9                ; Setup parameters for call to function strcat
   \   0003D9   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   0003DB   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_35:
   \   0003DD   749E         MOV     A,#-0x62
   \   0003DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E2   AA82         MOV     R2,DPL
   \   0003E4   AB83         MOV     R3,DPH
   \   0003E6   12....       LCALL   ??strcat?relay
   1410            }
   1411          
   1412            // 射频卡类别信息显示
   1413            strcpy(dispBuf[10], "Card:");
   \   0003E9                ; Setup parameters for call to function strcpy
   \   0003E9   7C..         MOV     R4,#`?<Constant "Card:">` & 0xff
   \   0003EB   7D..         MOV     R5,#(`?<Constant "Card:">` >> 8) & 0xff
   \   0003ED   74AE         MOV     A,#-0x52
   \   0003EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F2   AA82         MOV     R2,DPL
   \   0003F4   AB83         MOV     R3,DPH
   \   0003F6   12....       LCALL   ??strcpy?relay
   1414            if (RfID.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   0003F9   90....       MOV     DPTR,#RfID
   \   0003FC   E0           MOVX    A,@DPTR
   \   0003FD   6402         XRL     A,#0x2
   \   0003FF   6044         JZ      ??TransmitApp_DisplayResults_36
   1415            {
   1416              if (RfID.data[0] == 0x01)
   \   000401   A3           INC     DPTR
   \   000402   E0           MOVX    A,@DPTR
   \   000403   6401         XRL     A,#0x1
   \   000405   7012         JNZ     ??TransmitApp_DisplayResults_37
   1417              {
   1418                strcpy(dispBuf[10], "MFOne-S50");
   \   000407                ; Setup parameters for call to function strcpy
   \   000407   7C..         MOV     R4,#`?<Constant "MFOne-S50">` & 0xff
   \   000409   7D..         MOV     R5,#(`?<Constant "MFOne-S50">` >> 8) & 0xff
   \                     ??TransmitApp_DisplayResults_38:
   \   00040B   74AE         MOV     A,#-0x52
   \   00040D   12....       LCALL   ?XSTACK_DISP0_8
   \   000410   AA82         MOV     R2,DPL
   \   000412   AB83         MOV     R3,DPH
   \   000414   12....       LCALL   ??strcpy?relay
   \   000417   803C         SJMP    ??TransmitApp_DisplayResults_39
   1419              }
   1420              else if (RfID.data[0] == 0x02)
   \                     ??TransmitApp_DisplayResults_37:
   \   000419   E0           MOVX    A,@DPTR
   \   00041A   6402         XRL     A,#0x2
   \   00041C   7006         JNZ     ??TransmitApp_DisplayResults_40
   1421              {
   1422                strcpy(dispBuf[10], "MFOne-S70");
   \   00041E                ; Setup parameters for call to function strcpy
   \   00041E   7C..         MOV     R4,#`?<Constant "MFOne-S70">` & 0xff
   \   000420   7D..         MOV     R5,#(`?<Constant "MFOne-S70">` >> 8) & 0xff
   \   000422   80E7         SJMP    ??TransmitApp_DisplayResults_38
   1423              }
   1424              else if (RfID.data[0] == 0x03)
   \                     ??TransmitApp_DisplayResults_40:
   \   000424   E0           MOVX    A,@DPTR
   \   000425   6403         XRL     A,#0x3
   \   000427   7006         JNZ     ??TransmitApp_DisplayResults_41
   1425              {
   1426                strcpy(dispBuf[10], "MF-UltraLight");
   \   000429                ; Setup parameters for call to function strcpy
   \   000429   7C..         MOV     R4,#`?<Constant "MF-UltraLight">` & 0xff
   \   00042B   7D..         MOV     R5,#(`?<Constant "MF-UltraLight">` >> 8) & 0xff
   \   00042D   80DC         SJMP    ??TransmitApp_DisplayResults_38
   1427              }
   1428              else if (RfID.data[0] == 0x04)
   \                     ??TransmitApp_DisplayResults_41:
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   6404         XRL     A,#0x4
   \   000432   7006         JNZ     ??TransmitApp_DisplayResults_42
   1429              {
   1430                strcpy(dispBuf[10], "MF-Pro");
   \   000434                ; Setup parameters for call to function strcpy
   \   000434   7C..         MOV     R4,#`?<Constant "MF-Pro">` & 0xff
   \   000436   7D..         MOV     R5,#(`?<Constant "MF-Pro">` >> 8) & 0xff
   \   000438   80D1         SJMP    ??TransmitApp_DisplayResults_38
   1431              }
   1432              else if (RfID.data[0] == 0x05)
   \                     ??TransmitApp_DisplayResults_42:
   \   00043A   E0           MOVX    A,@DPTR
   \   00043B   6405         XRL     A,#0x5
   \   00043D   7016         JNZ     ??TransmitApp_DisplayResults_39
   1433              {
   1434                strcpy(dispBuf[10], "MF-DesFire");
   \   00043F                ; Setup parameters for call to function strcpy
   \   00043F   7C..         MOV     R4,#`?<Constant "MF-DesFire">` & 0xff
   \   000441   7D..         MOV     R5,#(`?<Constant "MF-DesFire">` >> 8) & 0xff
   \   000443   80C6         SJMP    ??TransmitApp_DisplayResults_38
   1435              }
   1436            }
   1437            else
   1438            {
   1439              strcat(dispBuf[10], "OFF");
   \                     ??TransmitApp_DisplayResults_36:
   \   000445                ; Setup parameters for call to function strcat
   \   000445   7C..         MOV     R4,#`?<Constant "OFF">` & 0xff
   \   000447   7D..         MOV     R5,#(`?<Constant "OFF">` >> 8) & 0xff
   \   000449   74AE         MOV     A,#-0x52
   \   00044B   12....       LCALL   ?XSTACK_DISP0_8
   \   00044E   AA82         MOV     R2,DPL
   \   000450   AB83         MOV     R3,DPH
   \   000452   12....       LCALL   ??strcat?relay
   1440            }
   1441              
   1442            // RFID射频卡的序列号
   1443            if (!((RfID.data[4] == 0) && (RfID.data[1] == 0) && (RfID.data[2] == 0)
   1444              && (RfID.data[3] == 0)))
   \                     ??TransmitApp_DisplayResults_39:
   \   000455   90....       MOV     DPTR,#RfID + 5
   \   000458   E0           MOVX    A,@DPTR
   \   000459   7011         JNZ     ??TransmitApp_DisplayResults_43
   \   00045B   90....       MOV     DPTR,#RfID + 2
   \   00045E   E0           MOVX    A,@DPTR
   \   00045F   700B         JNZ     ??TransmitApp_DisplayResults_43
   \   000461   A3           INC     DPTR
   \   000462   E0           MOVX    A,@DPTR
   \   000463   7007         JNZ     ??TransmitApp_DisplayResults_43
   \   000465   A3           INC     DPTR
   \   000466   E0           MOVX    A,@DPTR
   \   000467   7003         JNZ     $+5
   \   000469   02....       LJMP    ??TransmitApp_DisplayResults_44 & 0xFFFF
   1445            {
   1446              for (i = 0; i < 4; i++)
   \                     ??TransmitApp_DisplayResults_43:
   \   00046C   7A00         MOV     R2,#0x0
   1447              {
   1448                dispIDBuf[2*i]   = (RfID.data[i+1]&0xF0)>>4;
   \                     ??TransmitApp_DisplayResults_45:
   \   00046E   8A82         MOV     DPL,R2
   \   000470   A882         MOV     R0,DPL
   \   000472   74..         MOV     A,#(RfID + 2) & 0xff
   \   000474   28           ADD     A,R0
   \   000475   F582         MOV     DPL,A
   \   000477   74..         MOV     A,#((RfID + 2) >> 8) & 0xff
   \   000479   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00047C   FB           MOV     R3,A
   \   00047D   E8           MOV     A,R0
   \   00047E   C3           CLR     C
   \   00047F   33           RLC     A
   \   000480   F8           MOV     R0,A
   \   000481   E4           CLR     A
   \   000482   33           RLC     A
   \   000483   F9           MOV     R1,A
   \   000484   EB           MOV     A,R3
   \   000485   C4           SWAP    A
   \   000486   540F         ANL     A,#0xf
   \   000488   C0E0         PUSH    A
   \   00048A   7406         MOV     A,#0x6
   \   00048C   12....       LCALL   ?XSTACK_DISP0_8
   \   00048F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000492   D0E0         POP     A
   \   000494   F0           MOVX    @DPTR,A
   1449                dispIDBuf[2*i+1] =  RfID.data[i+1]&0x0F;
   \   000495   740F         MOV     A,#0xf
   \   000497   5B           ANL     A,R3
   \   000498   C0E0         PUSH    A
   \   00049A   7406         MOV     A,#0x6
   \   00049C   12....       LCALL   ?XSTACK_DISP0_8
   \   00049F   12....       LCALL   ?Subroutine30 & 0xFFFF
   1450              }
   \                     ??CrossCallReturnLabel_68:
   \   0004A2   A3           INC     DPTR
   \   0004A3   D0E0         POP     A
   \   0004A5   F0           MOVX    @DPTR,A
   \   0004A6   0A           INC     R2
   \   0004A7   EA           MOV     A,R2
   \   0004A8   C3           CLR     C
   \   0004A9   9404         SUBB    A,#0x4
   \   0004AB   40C1         JC      ??TransmitApp_DisplayResults_45
   1451              for (i = 0; i < 8; i++)
   \   0004AD   7A00         MOV     R2,#0x0
   1452              {
   1453                if (dispIDBuf[i] <= 0x09)
   \                     ??TransmitApp_DisplayResults_46:
   \   0004AF   8A..         MOV     ?V0 + 2,R2
   \   0004B1   7406         MOV     A,#0x6
   \   0004B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B6   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0004B9   C3           CLR     C
   \   0004BA   940A         SUBB    A,#0xa
   \   0004BC   7406         MOV     A,#0x6
   \   0004BE   500A         JNC     ??TransmitApp_DisplayResults_47
   1454                  dispIDBuf[i] += '0';
   \   0004C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C3   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0004C6   2430         ADD     A,#0x30
   \   0004C8   8008         SJMP    ??TransmitApp_DisplayResults_48
   1455                else if (dispIDBuf[i] >= 0x0A)
   1456                  dispIDBuf[i] += 'A' - 10;
   \                     ??TransmitApp_DisplayResults_47:
   \   0004CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0004CD   12....       LCALL   ?Subroutine26 & 0xFFFF
   1457              }
   \                     ??CrossCallReturnLabel_94:
   \   0004D0   2437         ADD     A,#0x37
   \                     ??TransmitApp_DisplayResults_48:
   \   0004D2   F0           MOVX    @DPTR,A
   \   0004D3   0A           INC     R2
   \   0004D4   EA           MOV     A,R2
   \   0004D5   C3           CLR     C
   \   0004D6   9408         SUBB    A,#0x8
   \   0004D8   40D5         JC      ??TransmitApp_DisplayResults_46
   1458              dispBuf[11][0] = 'I';
   \   0004DA   74BE         MOV     A,#-0x42
   \   0004DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0004DF   7449         MOV     A,#0x49
   \   0004E1   F0           MOVX    @DPTR,A
   1459              dispBuf[11][1] = 'D';
   \   0004E2   74BF         MOV     A,#-0x41
   \   0004E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0004E7   7444         MOV     A,#0x44
   \   0004E9   F0           MOVX    @DPTR,A
   1460              dispBuf[11][2] = ':';
   \   0004EA   74C0         MOV     A,#-0x40
   \   0004EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EF   743A         MOV     A,#0x3a
   \   0004F1   F0           MOVX    @DPTR,A
   1461              for (i = 0; i < 8; i++)
   \   0004F2   7A00         MOV     R2,#0x0
   1462              {
   1463                dispBuf[11][i+3] = dispIDBuf[i];
   \                     ??TransmitApp_DisplayResults_49:
   \   0004F4   8A82         MOV     DPL,R2
   \   0004F6   A882         MOV     R0,DPL
   \   0004F8   7406         MOV     A,#0x6
   \   0004FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0004FD   E582         MOV     A,DPL
   \   0004FF   28           ADD     A,R0
   \   000500   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   1464              }
   \                     ??CrossCallReturnLabel_91:
   \   000503   C0E0         PUSH    A
   \   000505   740E         MOV     A,#0xe
   \   000507   12....       LCALL   ?XSTACK_DISP0_8
   \   00050A   E582         MOV     A,DPL
   \   00050C   28           ADD     A,R0
   \   00050D   F8           MOV     R0,A
   \   00050E   E583         MOV     A,DPH
   \   000510   3400         ADDC    A,#0x0
   \   000512   F9           MOV     R1,A
   \   000513   E8           MOV     A,R0
   \   000514   24B3         ADD     A,#-0x4d
   \   000516   F582         MOV     DPL,A
   \   000518   E9           MOV     A,R1
   \   000519   3400         ADDC    A,#0x0
   \   00051B   F583         MOV     DPH,A
   \   00051D   D0E0         POP     A
   \   00051F   F0           MOVX    @DPTR,A
   \   000520   0A           INC     R2
   \   000521   EA           MOV     A,R2
   \   000522   C3           CLR     C
   \   000523   9408         SUBB    A,#0x8
   \   000525   5029         JNC     ??TransmitApp_DisplayResults_50
   \   000527   80CB         SJMP    ??TransmitApp_DisplayResults_49
   1465            }
   1466            else
   1467            {
   1468              for (i = 0; i < 16; i++)
   \                     ??TransmitApp_DisplayResults_44:
   \   000529   7A00         MOV     R2,#0x0
   1469              {
   1470                dispBuf[11][i] = ' ';
   \                     ??TransmitApp_DisplayResults_51:
   \   00052B   8A..         MOV     ?V0 + 2,R2
   \   00052D   740E         MOV     A,#0xe
   \   00052F   12....       LCALL   ?XSTACK_DISP0_8
   \   000532   E582         MOV     A,DPL
   \   000534   25..         ADD     A,?V0 + 2
   \   000536   F8           MOV     R0,A
   \   000537   E583         MOV     A,DPH
   \   000539   3400         ADDC    A,#0x0
   \   00053B   F9           MOV     R1,A
   \   00053C   E8           MOV     A,R0
   \   00053D   24B0         ADD     A,#-0x50
   \   00053F   F582         MOV     DPL,A
   \   000541   E9           MOV     A,R1
   \   000542   3400         ADDC    A,#0x0
   \   000544   F583         MOV     DPH,A
   \   000546   7420         MOV     A,#0x20
   \   000548   F0           MOVX    @DPTR,A
   1471              }
   \   000549   0A           INC     R2
   \   00054A   EA           MOV     A,R2
   \   00054B   C3           CLR     C
   \   00054C   9410         SUBB    A,#0x10
   \   00054E   40DB         JC      ??TransmitApp_DisplayResults_51
   1472            }
   1473              
   1474            // 滚屏处理
   1475            if (dispPage == 1)
   \                     ??TransmitApp_DisplayResults_50:
   \   000550   7401         MOV     A,#0x1
   \   000552   6F           XRL     A,R7
   \   000553   707D         JNZ     ??TransmitApp_DisplayResults_52
   1476            {        
   1477              if (*scrollLine > 4) // 第一屏5行
   \   000555   85..82       MOV     DPL,?V0 + 0
   \   000558   85..83       MOV     DPH,?V0 + 1
   \   00055B   E0           MOVX    A,@DPTR
   \   00055C   C3           CLR     C
   \   00055D   9405         SUBB    A,#0x5
   \   00055F   4002         JC      ??TransmitApp_DisplayResults_53
   1478              {
   1479                *scrollLine = 0;
   \   000561   E4           CLR     A
   \   000562   F0           MOVX    @DPTR,A
   1480              }
   1481              scrollLineTmp = *scrollLine;
   \                     ??TransmitApp_DisplayResults_53:
   \   000563   E0           MOVX    A,@DPTR
   \   000564   FE           MOV     R6,A
   1482              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_1 );
   \   000565                ; Setup parameters for call to function HalLcdWriteString
   \   000565   7901         MOV     R1,#0x1
   \   000567   8E..         MOV     ?V0 + 0,R6
   \   000569   75..00       MOV     ?V0 + 1,#0x0
   \   00056C   7404         MOV     A,#0x4
   \   00056E   78..         MOV     R0,#?V0 + 0
   \   000570   12....       LCALL   ?S_SHL
   \   000573   740E         MOV     A,#0xe
   \   000575   12....       LCALL   ?XSTACK_DISP0_8
   \   000578   12....       LCALL   ?Subroutine23 & 0xFFFF
   1483              if (scrollLineTmp > 4)
   \                     ??CrossCallReturnLabel_53:
   \   00057B   4002         JC      ??TransmitApp_DisplayResults_54
   1484              {
   1485                scrollLineTmp = 0;
   \   00057D   7E00         MOV     R6,#0x0
   1486              }
   1487              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_2 );
   \                     ??TransmitApp_DisplayResults_54:
   \   00057F                ; Setup parameters for call to function HalLcdWriteString
   \   00057F   7902         MOV     R1,#0x2
   \   000581   8E..         MOV     ?V0 + 0,R6
   \   000583   75..00       MOV     ?V0 + 1,#0x0
   \   000586   7404         MOV     A,#0x4
   \   000588   78..         MOV     R0,#?V0 + 0
   \   00058A   12....       LCALL   ?S_SHL
   \   00058D   740E         MOV     A,#0xe
   \   00058F   12....       LCALL   ?XSTACK_DISP0_8
   \   000592   12....       LCALL   ?Subroutine23 & 0xFFFF
   1488              if (scrollLineTmp > 4)
   \                     ??CrossCallReturnLabel_54:
   \   000595   4002         JC      ??TransmitApp_DisplayResults_55
   1489              {
   1490                scrollLineTmp = 0;
   \   000597   7E00         MOV     R6,#0x0
   1491              }
   1492              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_3 );
   \                     ??TransmitApp_DisplayResults_55:
   \   000599                ; Setup parameters for call to function HalLcdWriteString
   \   000599   7903         MOV     R1,#0x3
   \   00059B   8E..         MOV     ?V0 + 0,R6
   \   00059D   75..00       MOV     ?V0 + 1,#0x0
   \   0005A0   7404         MOV     A,#0x4
   \   0005A2   78..         MOV     R0,#?V0 + 0
   \   0005A4   12....       LCALL   ?S_SHL
   \   0005A7   740E         MOV     A,#0xe
   \   0005A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005AC   12....       LCALL   ?Subroutine23 & 0xFFFF
   1493              if (scrollLineTmp > 4)
   \                     ??CrossCallReturnLabel_55:
   \   0005AF   4002         JC      ??TransmitApp_DisplayResults_56
   1494              {
   1495                scrollLineTmp = 0;
   \   0005B1   7E00         MOV     R6,#0x0
   1496              }
   1497              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_4 );
   \                     ??TransmitApp_DisplayResults_56:
   \   0005B3                ; Setup parameters for call to function HalLcdWriteString
   \   0005B3   7904         MOV     R1,#0x4
   \   0005B5   8E..         MOV     ?V0 + 0,R6
   \   0005B7   75..00       MOV     ?V0 + 1,#0x0
   \   0005BA   E9           MOV     A,R1
   \   0005BB   78..         MOV     R0,#?V0 + 0
   \   0005BD   12....       LCALL   ?S_SHL
   \   0005C0   740E         MOV     A,#0xe
   \   0005C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0005C5   12....       LCALL   ?Subroutine39 & 0xFFFF
   1498            }
   1499            else if(dispPage ==2)
   1500            {
   1501              if (*scrollLine > 6) // 第二屏7行
   1502              {
   1503                *scrollLine = 0;
   1504              }
   1505              scrollLineTmp = *scrollLine + 5;
   1506              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_1 );
   1507              if (scrollLineTmp > 11)
   1508              {
   1509                scrollLineTmp = 5;
   1510              }
   1511              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_2 );
   1512              if (scrollLineTmp > 11)
   1513              {
   1514                scrollLineTmp = 5;
   1515              }
   1516              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_3 );
   1517              if (scrollLineTmp > 11)
   1518              {
   1519                scrollLineTmp = 5;
   1520              }
   1521              HalLcdWriteString( dispBuf[scrollLineTmp++], HAL_LCD_LINE_4 );
   1522            }
   1523          #endif // LCD_SUPPORTED
   1524          }
   \                     ??CrossCallReturnLabel_81:
   \   0005C8   74CE         MOV     A,#-0x32
   \   0005CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005CD   7F0C         MOV     R7,#0xc
   \   0005CF   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??TransmitApp_DisplayResults_52:
   \   0005D2   7402         MOV     A,#0x2
   \   0005D4   6F           XRL     A,R7
   \   0005D5   70F1         JNZ     ??CrossCallReturnLabel_81
   \   0005D7   85..82       MOV     DPL,?V0 + 0
   \   0005DA   85..83       MOV     DPH,?V0 + 1
   \   0005DD   E0           MOVX    A,@DPTR
   \   0005DE   C3           CLR     C
   \   0005DF   9407         SUBB    A,#0x7
   \   0005E1   4002         JC      ??TransmitApp_DisplayResults_57
   \   0005E3   E4           CLR     A
   \   0005E4   F0           MOVX    @DPTR,A
   \                     ??TransmitApp_DisplayResults_57:
   \   0005E5   E0           MOVX    A,@DPTR
   \   0005E6   2405         ADD     A,#0x5
   \   0005E8   FE           MOV     R6,A
   \   0005E9                ; Setup parameters for call to function HalLcdWriteString
   \   0005E9   7901         MOV     R1,#0x1
   \   0005EB   8E..         MOV     ?V0 + 0,R6
   \   0005ED   75..00       MOV     ?V0 + 1,#0x0
   \   0005F0   7404         MOV     A,#0x4
   \   0005F2   78..         MOV     R0,#?V0 + 0
   \   0005F4   12....       LCALL   ?S_SHL
   \   0005F7   740E         MOV     A,#0xe
   \   0005F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005FC   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0005FF   4002         JC      ??TransmitApp_DisplayResults_58
   \   000601   7E05         MOV     R6,#0x5
   \                     ??TransmitApp_DisplayResults_58:
   \   000603                ; Setup parameters for call to function HalLcdWriteString
   \   000603   7902         MOV     R1,#0x2
   \   000605   8E..         MOV     ?V0 + 0,R6
   \   000607   75..00       MOV     ?V0 + 1,#0x0
   \   00060A   7404         MOV     A,#0x4
   \   00060C   78..         MOV     R0,#?V0 + 0
   \   00060E   12....       LCALL   ?S_SHL
   \   000611   740E         MOV     A,#0xe
   \   000613   12....       LCALL   ?XSTACK_DISP0_8
   \   000616   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000619   4002         JC      ??TransmitApp_DisplayResults_59
   \   00061B   7E05         MOV     R6,#0x5
   \                     ??TransmitApp_DisplayResults_59:
   \   00061D                ; Setup parameters for call to function HalLcdWriteString
   \   00061D   7903         MOV     R1,#0x3
   \   00061F   8E..         MOV     ?V0 + 0,R6
   \   000621   75..00       MOV     ?V0 + 1,#0x0
   \   000624   7404         MOV     A,#0x4
   \   000626   78..         MOV     R0,#?V0 + 0
   \   000628   12....       LCALL   ?S_SHL
   \   00062B   740E         MOV     A,#0xe
   \   00062D   12....       LCALL   ?XSTACK_DISP0_8
   \   000630   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000633   5003         JNC     $+5
   \   000635   02....       LJMP    ??TransmitApp_DisplayResults_56 & 0xFFFF
   \   000638   7E05         MOV     R6,#0x5
   \   00063A   02....       LJMP    ??TransmitApp_DisplayResults_56 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strcpy?relay
   \   000007   90....       MOV     DPTR,#soundVb
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strcpy?relay
   \   000007   90....       MOV     DPTR,#gasFlame
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strcpy?relay
   \   000007   90....       MOV     DPTR,#motor
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 2
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine43_0
   \   000004                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   940C         SUBB    A,#0xc
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   9405         SUBB    A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   0E           INC     R6
   \   000004   EE           MOV     A,R6
   \   000005   C3           CLR     C
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   FA           MOV     R2,A
   \   000005   E583         MOV     A,DPH
   \   000007   35..         ADDC    A,?V0 + 1
   \   000009   FB           MOV     R3,A
   \   00000A   12....       LCALL   ??HalLcdWriteString?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   E4           CLR     A
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   FC           MOV     R4,A
   \   000001   FD           MOV     R5,A
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL   ??_ltoa?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
   1525          
   1526          /*******************************************************************************
   1527           * @fn      TransmitAPP_CallBack
   1528           *
   1529           * @brief   Send data OTA.
   1530           *
   1531           * @param   port - UART port.
   1532           * @param   event - the UART port event flag.
   1533           *
   1534           * @return  none
   1535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1536          void TransmitAPP_CallBack(uint8 port, uint8 event)
   \                     TransmitAPP_CallBack:
   1537          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1538          }
   \   000000   02....       LJMP    ?BRET
   1539          
   1540          /*******************************************************************************
   1541          *******************************************************************************/
   1542          /*********************************************************************
   1543           * @fn      Smart_home_Display
   1544           *
   1545           * @brief   屏幕回显函数，定义了内容如何显示.
   1546           *
   1547           * @param   port - UART port.
   1548           * @param   event - the UART port event flag.
   1549           *
   1550           * @return  none
   1551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1552          static void Smart_home_Display(void)
   \                     Smart_home_Display:
   1553          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1554          #if defined LCD_SUPPORTED
   1555            static uint8 percent;
   1556            switch(Ctrlcase)
   \   000005   90....       MOV     DPTR,#Ctrlcase
   \   000008   E0           MOVX    A,@DPTR
   \   000009   14           DEC     A
   \   00000A   7003         JNZ     $+5
   \   00000C   02....       LJMP    ??Smart_home_Display_0 & 0xFFFF
   \   00000F   14           DEC     A
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??Smart_home_Display_1 & 0xFFFF
   1557            {
   1558              default:    
   1559              case 0:
   1560                HalLcdWriteString( "      Menu      ", HAL_LCD_LINE_1 );
   \   000015                ; Setup parameters for call to function HalLcdWriteString
   \   000015   7901         MOV     R1,#0x1
   \   000017   7A..         MOV     R2,#`?<Constant "      Menu      ">` & 0xff
   \   000019   7B..         MOV     R3,#(`?<Constant "      Menu      ">` >> 8) & 0xff
   \   00001B   12....       LCALL   ?Subroutine22 & 0xFFFF
   1561                //HalLcdWriteString( "Flip use UP/DOWN", HAL_LCD_LINE_4 ); 
   1562                //清除屏幕显示
   1563                HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
   1564                HalLcdWriteString( " ", HAL_LCD_LINE_3 );
   1565                
   1566                switch(LCD_Page)
   \                     ??CrossCallReturnLabel_50:
   \   00001E   90....       MOV     DPTR,#LCD_Page
   \   000021   E0           MOVX    A,@DPTR
   \   000022   14           DEC     A
   \   000023   7003         JNZ     $+5
   \   000025   02....       LJMP    ??Smart_home_Display_2 & 0xFFFF
   \   000028   14           DEC     A
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??Smart_home_Display_3 & 0xFFFF
   \   00002E   14           DEC     A
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??Smart_home_Display_4 & 0xFFFF
   1567                {
   1568                  default:
   1569                  case 0:
   1570                  { 
   1571                    //DeviceInfo* Devhum = &DeviceList[Humit];
   1572                    //DeviceInfo* DevSound = &DeviceList[soundVb];
   1573                    //第一页第二行显示温度
   1574                    //      第三行显示光照
   1575                    if(Humit.deviceNWKStatus != DEVICE_NWK_OFFLINE)
   \   000034   90....       MOV     DPTR,#Humit
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6402         XRL     A,#0x2
   \   00003A   6040         JZ      ??Smart_home_Display_5
   1576                    {    
   1577                        HalLcdWriteStringValueValue( "Hum:", Humit.data[0], 10, "% T_1:", Humit.data[1], 10, HAL_LCD_LINE_2 );
   \   00003C                ; Setup parameters for call to function HalLcdWriteStringValueValue
   \   00003C   75..02       MOV     ?V0 + 0,#0x2
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75..0A       MOV     ?V0 + 0,#0xa
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   90....       MOV     DPTR,#Humit + 2
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V0 + 0,A
   \   000052   75..00       MOV     ?V0 + 1,#0x0
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   75....       MOV     ?V0 + 0,#`?<Constant "% T_1:">` & 0xff
   \   00005D   75....       MOV     ?V0 + 1,#(`?<Constant "% T_1:">` >> 8) & 0xff
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   790A         MOV     R1,#0xa
   \   000067   90....       MOV     DPTR,#Humit + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FC           MOV     R4,A
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A..         MOV     R2,#`?<Constant "Hum:">` & 0xff
   \   000070   7B..         MOV     R3,#(`?<Constant "Hum:">` >> 8) & 0xff
   \   000072   12....       LCALL   ??HalLcdWriteStringValueValue?relay
   \   000075   7406         MOV     A,#0x6
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   8009         SJMP    ??Smart_home_Display_6
   1578                    }
   1579                    else
   1580                    {
   1581                        HalLcdWriteString( "Hum:OFF T_1:OFF", HAL_LCD_LINE_2 ); 
   \                     ??Smart_home_Display_5:
   \   00007C                ; Setup parameters for call to function HalLcdWriteString
   \   00007C   7902         MOV     R1,#0x2
   \   00007E   7A..         MOV     R2,#`?<Constant "Hum:OFF T_1:OFF">` & 0xff
   \   000080   7B..         MOV     R3,#(`?<Constant "Hum:OFF T_1:OFF">` >> 8) & 0xff
   \   000082   12....       LCALL   ??HalLcdWriteString?relay
   1582                    }
   1583                    
   1584                    
   1585                    if(soundVb.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
   \                     ??Smart_home_Display_6:
   \   000085   90....       MOV     DPTR,#soundVb
   \   000088   E0           MOVX    A,@DPTR
   \   000089   6402         XRL     A,#0x2
   \   00008B   6014         JZ      ??Smart_home_Display_7
   1586                    {    
   1587                        if(soundVb.data[0] & 0x01 == 0x01) { HalLcdWriteString( "Sound: Voice", HAL_LCD_LINE_3 ); }
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000091   7903         MOV     R1,#0x3
   \   000093   5006         JNC     ??Smart_home_Display_8
   \   000095                ; Setup parameters for call to function HalLcdWriteString
   \   000095   7A..         MOV     R2,#`?<Constant "Sound: Voice">` & 0xff
   \   000097   7B..         MOV     R3,#(`?<Constant "Sound: Voice">` >> 8) & 0xff
   \   000099   800C         SJMP    ??Smart_home_Display_9
   1588                        else if(soundVb.data[0] & 0x02 == 0x02) { HalLcdWriteString( "Sound: Vibration", HAL_LCD_LINE_3 ); }
   1589                        else if(soundVb.data[0] & 0x03 == 0x03) { HalLcdWriteString( "Sound: All", HAL_LCD_LINE_3 ); }
   1590                        else {HalLcdWriteString( "Sound: None", HAL_LCD_LINE_3 );}
   \                     ??Smart_home_Display_8:
   \   00009B                ; Setup parameters for call to function HalLcdWriteString
   \   00009B   7A..         MOV     R2,#`?<Constant "Sound: None">` & 0xff
   \   00009D   7B..         MOV     R3,#(`?<Constant "Sound: None">` >> 8) & 0xff
   \   00009F   8006         SJMP    ??Smart_home_Display_9
   1591                    }
   1592                    else
   1593                    {
   1594                        HalLcdWriteString( "Sound:OFFLINE", HAL_LCD_LINE_3 ); 
   \                     ??Smart_home_Display_7:
   \   0000A1                ; Setup parameters for call to function HalLcdWriteString
   \   0000A1   7903         MOV     R1,#0x3
   \   0000A3   7A..         MOV     R2,#`?<Constant "Sound:OFFLINE">` & 0xff
   \   0000A5   7B..         MOV     R3,#(`?<Constant "Sound:OFFLINE">` >> 8) & 0xff
   \                     ??Smart_home_Display_9:
   \   0000A7   12....       LCALL   ??HalLcdWriteString?relay
   1595                    }
   1596                 
   1597                    //HalLcdWriteStringValue( "Sound:", SoundVb, 16, HAL_LCD_LINE_3 );
   1598                    
   1599                    
   1600                    //显示最下面的百分比条
   1601                    percent = (1 * 100) / LCD_PAGE_MAX;
   \   0000AA   90....       MOV     DPTR,#??percent
   \   0000AD   7419         MOV     A,#0x19
   \                     ??Smart_home_Display_10:
   \   0000AF   12....       LCALL   ?Subroutine9 & 0xFFFF
   1602                    HalLcdDisplayPercentBar("",percent);
   1603                    break;
   \                     ??CrossCallReturnLabel_18:
   \   0000B2   02....       LJMP    ??Smart_home_Display_11 & 0xFFFF
   1604                  }
   1605                  case 1:
   1606                  {
   1607                    //第二页只有光照
   1608                    //第一页第二行显示温度
   1609                    //      第三行显示光照
   1610                    //DeviceInfo* Devtmp = &DeviceList[TempLight];
   1611                    if(TempLight.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
   \                     ??Smart_home_Display_2:
   \   0000B5   90....       MOV     DPTR,#TempLight
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   6402         XRL     A,#0x2
   \   0000BB   7003         JNZ     $+5
   \   0000BD   02....       LJMP    ??Smart_home_Display_12 & 0xFFFF
   1612                    {    
   1613                        static uint16 Light;
   1614                        static uint8 lightmp;
   1615                    
   1616          
   1617                        lightmp = TempLight.data[3];
   \   0000C0   90....       MOV     DPTR,#TempLight + 4
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   90....       MOV     DPTR,#??lightmp
   \   0000C7   F0           MOVX    @DPTR,A
   1618                        Light = (uint16)TempLight.data[4];
   \   0000C8   90....       MOV     DPTR,#TempLight + 5
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   90....       MOV     DPTR,#??Light
   \   0000CF   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   1619                        memcpy(&Light,&lightmp,sizeof(lightmp));
   \                     ??CrossCallReturnLabel_102:
   \   0000D2                ; Setup parameters for call to function memcpy
   \   0000D2   75..01       MOV     ?V0 + 0,#0x1
   \   0000D5   F5..         MOV     ?V0 + 1,A
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DC   7C..         MOV     R4,#??lightmp & 0xff
   \   0000DE   7D..         MOV     R5,#(??lightmp >> 8) & 0xff
   \   0000E0   7A..         MOV     R2,#??Light & 0xff
   \   0000E2   7B..         MOV     R3,#(??Light >> 8) & 0xff
   \   0000E4   12....       LCALL   ??memcpy?relay
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   1620                    
   1621                        HalLcdWriteStringValueValue( "Temper_2:", TempLight.data[0], 10, ".", TempLight.data[1], 10, HAL_LCD_LINE_2 );
   \   0000EC                ; Setup parameters for call to function HalLcdWriteStringValueValue
   \   0000EC   75..02       MOV     ?V0 + 0,#0x2
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F4   75..0A       MOV     ?V0 + 0,#0xa
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FC   90....       MOV     DPTR,#TempLight + 2
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F5..         MOV     ?V0 + 0,A
   \   000102   78..         MOV     R0,#?V0 + 0
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   75....       MOV     ?V0 + 0,#`?<Constant ".">` & 0xff
   \   00010A   75....       MOV     ?V0 + 1,#(`?<Constant ".">` >> 8) & 0xff
   \   00010D   78..         MOV     R0,#?V0 + 0
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   790A         MOV     R1,#0xa
   \   000114   90....       MOV     DPTR,#TempLight + 1
   \   000117   E0           MOVX    A,@DPTR
   \   000118   FC           MOV     R4,A
   \   000119   7D00         MOV     R5,#0x0
   \   00011B   7A..         MOV     R2,#`?<Constant "Temper_2:">` & 0xff
   \   00011D   7B..         MOV     R3,#(`?<Constant "Temper_2:">` >> 8) & 0xff
   \   00011F   12....       LCALL   ??HalLcdWriteStringValueValue?relay
   \   000122   7406         MOV     A,#0x6
   \   000124   12....       LCALL   ?DEALLOC_XSTACK8
   1622                        HalLcdWriteStringValue( "Light:", Light, 10, HAL_LCD_LINE_3 );
   \   000127                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000127   75..03       MOV     ?V0 + 0,#0x3
   \   00012A   78..         MOV     R0,#?V0 + 0
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012F   790A         MOV     R1,#0xa
   \   000131   90....       MOV     DPTR,#??Light
   \   000134   E0           MOVX    A,@DPTR
   \   000135   FC           MOV     R4,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   FD           MOV     R5,A
   \   000139   7A..         MOV     R2,#`?<Constant "Light:">` & 0xff
   \   00013B   7B..         MOV     R3,#(`?<Constant "Light:">` >> 8) & 0xff
   \   00013D   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   000140   7401         MOV     A,#0x1
   \   000142   12....       LCALL   ?DEALLOC_XSTACK8
   1623                        
   1624                        osal_msg_deallocate((uint8*)Light);
   \   000145                ; Setup parameters for call to function osal_msg_deallocate
   \   000145   90....       MOV     DPTR,#??Light
   \   000148   12....       LCALL   ?Subroutine14 & 0xFFFF
   1625                    }
   \                     ??CrossCallReturnLabel_29:
   \   00014B   8012         SJMP    ??Smart_home_Display_13
   1626                    else
   1627                    {
   1628                        HalLcdWriteString( "Temper_2:OFF", HAL_LCD_LINE_2 ); 
   \                     ??Smart_home_Display_12:
   \   00014D                ; Setup parameters for call to function HalLcdWriteString
   \   00014D   7902         MOV     R1,#0x2
   \   00014F   7A..         MOV     R2,#`?<Constant "Temper_2:OFF">` & 0xff
   \   000151   7B..         MOV     R3,#(`?<Constant "Temper_2:OFF">` >> 8) & 0xff
   \   000153   12....       LCALL   ??HalLcdWriteString?relay
   1629                        HalLcdWriteString( "Light:OFF", HAL_LCD_LINE_3 ); 
   \   000156                ; Setup parameters for call to function HalLcdWriteString
   \   000156   7903         MOV     R1,#0x3
   \   000158   7A..         MOV     R2,#`?<Constant "Light:OFF">` & 0xff
   \   00015A   7B..         MOV     R3,#(`?<Constant "Light:OFF">` >> 8) & 0xff
   \   00015C   12....       LCALL   ??HalLcdWriteString?relay
   1630                    }
   1631                    
   1632                    //显示最下面的百分比条
   1633                    percent = (2 * 100) / LCD_PAGE_MAX;
   \                     ??Smart_home_Display_13:
   \   00015F   90....       MOV     DPTR,#??percent
   \   000162   7432         MOV     A,#0x32
   \   000164   02....       LJMP    ??Smart_home_Display_10 & 0xFFFF
   1634                    HalLcdDisplayPercentBar("",percent);
   1635                    break;
   1636                    
   1637                    
   1638                  }
   1639                  
   1640                case 2:
   1641                {
   1642                    static uint16 Data1;
   1643                    static uint16 Data2;
   1644                    //显示最下面的百分比条
   1645                    //DeviceInfo* rfid = &DeviceList[RfID];
   1646                    
   1647                    Data1 = ( RfID.data[1] << 8) | RfID.data[2];
   \                     ??Smart_home_Display_3:
   \   000167   90....       MOV     DPTR,#RfID + 2
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F9           MOV     R1,A
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   90....       MOV     DPTR,#??Data1
   \   000171   F0           MOVX    @DPTR,A
   \   000172   A3           INC     DPTR
   \   000173   E9           MOV     A,R1
   \   000174   F0           MOVX    @DPTR,A
   1648                    Data2 = ( RfID.data[3] << 8) | RfID.data[4];
   \   000175   90....       MOV     DPTR,#RfID + 4
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F9           MOV     R1,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   90....       MOV     DPTR,#??Data2
   \   00017F   F0           MOVX    @DPTR,A
   \   000180   A3           INC     DPTR
   \   000181   E9           MOV     A,R1
   \   000182   F0           MOVX    @DPTR,A
   1649                    
   1650                    switch(RfID.data[0])
   \   000183   90....       MOV     DPTR,#RfID + 1
   \   000186   E0           MOVX    A,@DPTR
   \   000187   14           DEC     A
   \   000188   600E         JZ      ??Smart_home_Display_14
   \   00018A   14           DEC     A
   \   00018B   6013         JZ      ??Smart_home_Display_15
   \   00018D   14           DEC     A
   \   00018E   6018         JZ      ??Smart_home_Display_16
   \   000190   14           DEC     A
   \   000191   601D         JZ      ??Smart_home_Display_17
   \   000193   14           DEC     A
   \   000194   6022         JZ      ??Smart_home_Display_18
   \   000196   8028         SJMP    ??Smart_home_Display_19
   1651                    {
   1652                    case 0x01:
   1653                      HalLcdWriteString( "MFOne-S50", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_14:
   \   000198                ; Setup parameters for call to function HalLcdWriteString
   \   000198   7902         MOV     R1,#0x2
   \   00019A   7A..         MOV     R2,#`?<Constant "MFOne-S50">` & 0xff
   \   00019C   7B..         MOV     R3,#(`?<Constant "MFOne-S50">` >> 8) & 0xff
   \   00019E   8026         SJMP    ??Smart_home_Display_20
   1654                      break;
   1655                    case 0x02:
   1656                      HalLcdWriteString( "MFOne-S70", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_15:
   \   0001A0                ; Setup parameters for call to function HalLcdWriteString
   \   0001A0   7902         MOV     R1,#0x2
   \   0001A2   7A..         MOV     R2,#`?<Constant "MFOne-S70">` & 0xff
   \   0001A4   7B..         MOV     R3,#(`?<Constant "MFOne-S70">` >> 8) & 0xff
   \   0001A6   801E         SJMP    ??Smart_home_Display_20
   1657                      break;
   1658                    case 0x03:
   1659                      HalLcdWriteString( "MF-UltraLight", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_16:
   \   0001A8                ; Setup parameters for call to function HalLcdWriteString
   \   0001A8   7902         MOV     R1,#0x2
   \   0001AA   7A..         MOV     R2,#`?<Constant "MF-UltraLight">` & 0xff
   \   0001AC   7B..         MOV     R3,#(`?<Constant "MF-UltraLight">` >> 8) & 0xff
   \   0001AE   8016         SJMP    ??Smart_home_Display_20
   1660                      break;
   1661                    case 0x04:
   1662                      HalLcdWriteString( "MF-Pro", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_17:
   \   0001B0                ; Setup parameters for call to function HalLcdWriteString
   \   0001B0   7902         MOV     R1,#0x2
   \   0001B2   7A..         MOV     R2,#`?<Constant "MF-Pro">` & 0xff
   \   0001B4   7B..         MOV     R3,#(`?<Constant "MF-Pro">` >> 8) & 0xff
   \   0001B6   800E         SJMP    ??Smart_home_Display_20
   1663                      break;
   1664                    case 0x05:
   1665                      HalLcdWriteString( "MF-DesFire", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_18:
   \   0001B8                ; Setup parameters for call to function HalLcdWriteString
   \   0001B8   7902         MOV     R1,#0x2
   \   0001BA   7A..         MOV     R2,#`?<Constant "MF-DesFire">` & 0xff
   \   0001BC   7B..         MOV     R3,#(`?<Constant "MF-DesFire">` >> 8) & 0xff
   \   0001BE   8006         SJMP    ??Smart_home_Display_20
   1666                      break;
   1667                      
   1668                    default:
   1669                      HalLcdWriteString( "No Card", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_19:
   \   0001C0                ; Setup parameters for call to function HalLcdWriteString
   \   0001C0   7902         MOV     R1,#0x2
   \   0001C2   7A..         MOV     R2,#`?<Constant "No Card">` & 0xff
   \   0001C4   7B..         MOV     R3,#(`?<Constant "No Card">` >> 8) & 0xff
   1670                      break;
   1671                    }
   \                     ??Smart_home_Display_20:
   \   0001C6   12....       LCALL   ?Subroutine25 & 0xFFFF
   1672                    
   1673                    HalLcdWriteStringValueValue( "ID: ", Data1, 16, "-", Data2, 16, HAL_LCD_LINE_3 );
   \                     ??CrossCallReturnLabel_59:
   \   0001C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CC   75..10       MOV     ?V0 + 0,#0x10
   \   0001CF   78..         MOV     R0,#?V0 + 0
   \   0001D1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D4   90....       MOV     DPTR,#??Data2
   \   0001D7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001DA   75....       MOV     ?V0 + 0,#`?<Constant "-">` & 0xff
   \   0001DD   75....       MOV     ?V0 + 1,#(`?<Constant "-">` >> 8) & 0xff
   \   0001E0   78..         MOV     R0,#?V0 + 0
   \   0001E2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E5   7910         MOV     R1,#0x10
   \   0001E7   90....       MOV     DPTR,#??Data1
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   FC           MOV     R4,A
   \   0001EC   A3           INC     DPTR
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   FD           MOV     R5,A
   \   0001EF   7A..         MOV     R2,#`?<Constant "ID: ">` & 0xff
   \   0001F1   7B..         MOV     R3,#(`?<Constant "ID: ">` >> 8) & 0xff
   \   0001F3   12....       LCALL   ??HalLcdWriteStringValueValue?relay
   \   0001F6   7406         MOV     A,#0x6
   \   0001F8   12....       LCALL   ?DEALLOC_XSTACK8
   1674                    
   1675                    percent = (3 * 100) / LCD_PAGE_MAX;
   \   0001FB   90....       MOV     DPTR,#??percent
   \   0001FE   744B         MOV     A,#0x4b
   \   000200   12....       LCALL   ?Subroutine9 & 0xFFFF
   1676                    HalLcdDisplayPercentBar("",percent);
   1677                    
   1678                    osal_msg_deallocate((uint8*)Data1);
   \                     ??CrossCallReturnLabel_19:
   \   000203                ; Setup parameters for call to function osal_msg_deallocate
   \   000203   90....       MOV     DPTR,#??Data1
   \   000206   12....       LCALL   ?Subroutine14 & 0xFFFF
   1679                    osal_msg_deallocate((uint8*)Data2);
   \                     ??CrossCallReturnLabel_30:
   \   000209                ; Setup parameters for call to function osal_msg_deallocate
   \   000209   90....       MOV     DPTR,#??Data2
   \   00020C   12....       LCALL   ?Subroutine14 & 0xFFFF
   1680                    
   1681                    break;
   \                     ??CrossCallReturnLabel_31:
   \   00020F   02....       LJMP    ??Smart_home_Display_11 & 0xFFFF
   1682                }
   1683                
   1684                case 3:
   1685                {        
   1686                    //DeviceInfo* DevGas = &DeviceList[gasFlame];
   1687                    //DeviceInfo* DevInf = &DeviceList[infrared];         
   1688                    
   1689                    if(gasFlame.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
   \                     ??Smart_home_Display_4:
   \   000212   90....       MOV     DPTR,#gasFlame
   \   000215   E0           MOVX    A,@DPTR
   \   000216   6402         XRL     A,#0x2
   \   000218   6014         JZ      ??Smart_home_Display_21
   1690                    {    
   1691                        if(gasFlame.data[0] & 0x01 == 0x01) { HalLcdWriteString( "GasFlame: Flame", HAL_LCD_LINE_2 ); }         //0位是火焰
   \   00021A   A3           INC     DPTR
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00021E   7902         MOV     R1,#0x2
   \   000220   5006         JNC     ??Smart_home_Display_22
   \   000222                ; Setup parameters for call to function HalLcdWriteString
   \   000222   7A..         MOV     R2,#`?<Constant "GasFlame: Flame">` & 0xff
   \   000224   7B..         MOV     R3,#(`?<Constant "GasFlame: Flame">` >> 8) & 0xff
   \   000226   800C         SJMP    ??Smart_home_Display_23
   1692                        else if(gasFlame.data[0] & 0x02 == 0x02) { HalLcdWriteString( "GasFlame: Gas", HAL_LCD_LINE_2 ); }//1位是气体
   1693                        else if(gasFlame.data[0] & 0x03 == 0x03) { HalLcdWriteString( "GasFlame: All", HAL_LCD_LINE_2 ); }
   1694                        else {HalLcdWriteString( "GasFlame: None", HAL_LCD_LINE_2 );}
   \                     ??Smart_home_Display_22:
   \   000228                ; Setup parameters for call to function HalLcdWriteString
   \   000228   7A..         MOV     R2,#`?<Constant "GasFlame: None">` & 0xff
   \   00022A   7B..         MOV     R3,#(`?<Constant "GasFlame: None">` >> 8) & 0xff
   \   00022C   8006         SJMP    ??Smart_home_Display_23
   1695                    }
   1696                    else
   1697                    {
   1698                        HalLcdWriteString( "GasFlame: OFF", HAL_LCD_LINE_2 ); 
   \                     ??Smart_home_Display_21:
   \   00022E                ; Setup parameters for call to function HalLcdWriteString
   \   00022E   7902         MOV     R1,#0x2
   \   000230   7A..         MOV     R2,#`?<Constant "GasFlame: OFF">` & 0xff
   \   000232   7B..         MOV     R3,#(`?<Constant "GasFlame: OFF">` >> 8) & 0xff
   \                     ??Smart_home_Display_23:
   \   000234   12....       LCALL   ??HalLcdWriteString?relay
   1699                    }
   1700                    
   1701                    
   1702                    if(infrared.deviceNWKStatus  != DEVICE_NWK_OFFLINE)
   \   000237   90....       MOV     DPTR,#infrared
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   6402         XRL     A,#0x2
   \   00023D   6014         JZ      ??Smart_home_Display_24
   1703                    {    
   1704                        if(infrared.data[0] == 0x01)
   \   00023F   A3           INC     DPTR
   \   000240   E0           MOVX    A,@DPTR
   \   000241   6401         XRL     A,#0x1
   \   000243   7903         MOV     R1,#0x3
   \   000245   7006         JNZ     ??Smart_home_Display_25
   1705                        {
   1706                          HalLcdWriteString("Infrared: Human", HAL_LCD_LINE_3 );
   \   000247                ; Setup parameters for call to function HalLcdWriteString
   \   000247   7A..         MOV     R2,#`?<Constant "Infrared: Human">` & 0xff
   \   000249   7B..         MOV     R3,#(`?<Constant "Infrared: Human">` >> 8) & 0xff
   \   00024B   800C         SJMP    ??Smart_home_Display_26
   1707                        }
   1708                        else{
   1709                          HalLcdWriteString("Infrared: NoHuman", HAL_LCD_LINE_3 );
   \                     ??Smart_home_Display_25:
   \   00024D                ; Setup parameters for call to function HalLcdWriteString
   \   00024D   7A..         MOV     R2,#`?<Constant "Infrared: NoHuman">` & 0xff
   \   00024F   7B..         MOV     R3,#(`?<Constant "Infrared: NoHuman">` >> 8) & 0xff
   \   000251   8006         SJMP    ??Smart_home_Display_26
   1710                        }
   1711                    }
   1712                    else
   1713                    {
   1714                        HalLcdWriteString( "Infrared: OFF", HAL_LCD_LINE_3 ); 
   \                     ??Smart_home_Display_24:
   \   000253                ; Setup parameters for call to function HalLcdWriteString
   \   000253   7903         MOV     R1,#0x3
   \   000255   7A..         MOV     R2,#`?<Constant "Infrared: OFF">` & 0xff
   \   000257   7B..         MOV     R3,#(`?<Constant "Infrared: OFF">` >> 8) & 0xff
   \                     ??Smart_home_Display_26:
   \   000259   12....       LCALL   ??HalLcdWriteString?relay
   1715                    }         
   1716          
   1717                    
   1718                    
   1719                    //显示最下面的百分比条
   1720                    percent = (4 * 100) / LCD_PAGE_MAX;
   \   00025C   90....       MOV     DPTR,#??percent
   \   00025F   7464         MOV     A,#0x64
   \   000261   02....       LJMP    ??Smart_home_Display_10 & 0xFFFF
   1721                    HalLcdDisplayPercentBar("",percent);
   1722                    break;
   1723                }
   1724                    
   1725              }
   1726                
   1727                break;
   1728              
   1729              case 1:
   1730                HalLcdWriteString( "Relay Contrling", HAL_LCD_LINE_4 ); 
   \                     ??Smart_home_Display_0:
   \   000264                ; Setup parameters for call to function HalLcdWriteString
   \   000264   7904         MOV     R1,#0x4
   \   000266   7A..         MOV     R2,#`?<Constant "Relay Contrling">` & 0xff
   \   000268   7B..         MOV     R3,#(`?<Constant "Relay Contrling">` >> 8) & 0xff
   \   00026A   12....       LCALL   ?Subroutine22 & 0xFFFF
   1731                //清除屏幕显示
   1732                HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
   1733                HalLcdWriteString( " ", HAL_LCD_LINE_3 );
   1734                //这里的deviceStatus 可能是0x00,所以会出现bug 这个0在Device检查时被设置 2.24
   1735                if(relay.deviceNWKStatus == DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_51:
   \   00026D   90....       MOV     DPTR,#relay
   \   000270   E0           MOVX    A,@DPTR
   \   000271   6402         XRL     A,#0x2
   \   000273   7901         MOV     R1,#0x1
   \   000275   700A         JNZ     ??Smart_home_Display_27
   1736                {
   1737                  HalLcdWriteString( "Relay Offline", HAL_LCD_LINE_1 );      
   \   000277                ; Setup parameters for call to function HalLcdWriteString
   \   000277   7A..         MOV     R2,#`?<Constant "Relay Offline">` & 0xff
   \   000279   7B..         MOV     R3,#(`?<Constant "Relay Offline">` >> 8) & 0xff
   \                     ??Smart_home_Display_28:
   \   00027B   12....       LCALL   ??HalLcdWriteString?relay
   \   00027E   02....       LJMP    ??Smart_home_Display_11 & 0xFFFF
   1738                }
   1739                else  //设备在线回显  设备在线可能是 0/1
   1740                {
   1741                  HalLcdWriteString( "Relay Online", HAL_LCD_LINE_1 ); 
   \                     ??Smart_home_Display_27:
   \   000281                ; Setup parameters for call to function HalLcdWriteString
   \   000281   7A..         MOV     R2,#`?<Constant "Relay Online">` & 0xff
   \   000283   7B..         MOV     R3,#(`?<Constant "Relay Online">` >> 8) & 0xff
   \   000285   12....       LCALL   ??HalLcdWriteString?relay
   1742                  //继电器控制界面
   1743          
   1744                  if((relay.data[0]& 0x02) == 0x02) {HalLcdWriteString( "K1:ON", HAL_LCD_LINE_2 );}
   \   000288   90....       MOV     DPTR,#relay + 1
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00028E   5009         JNC     ??Smart_home_Display_29
   \   000290                ; Setup parameters for call to function HalLcdWriteString
   \   000290   7902         MOV     R1,#0x2
   \   000292   7A..         MOV     R2,#`?<Constant "K1:ON">` & 0xff
   \   000294   7B..         MOV     R3,#(`?<Constant "K1:ON">` >> 8) & 0xff
   \   000296   12....       LCALL   ??HalLcdWriteString?relay
   1745                  if((relay.data[0] & 0x01) == 0x01) {HalLcdWriteString( "K1:OFF", HAL_LCD_LINE_2 );}
   \                     ??Smart_home_Display_29:
   \   000299   90....       MOV     DPTR,#relay + 1
   \   00029C   E0           MOVX    A,@DPTR
   \   00029D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00029F   5009         JNC     ??Smart_home_Display_30
   \   0002A1                ; Setup parameters for call to function HalLcdWriteString
   \   0002A1   7902         MOV     R1,#0x2
   \   0002A3   7A..         MOV     R2,#`?<Constant "K1:OFF">` & 0xff
   \   0002A5   7B..         MOV     R3,#(`?<Constant "K1:OFF">` >> 8) & 0xff
   \   0002A7   12....       LCALL   ??HalLcdWriteString?relay
   1746                  if((relay.data[0] & 0x20) == 0x20) {HalLcdWriteString( "K2:ON", HAL_LCD_LINE_3 );}
   \                     ??Smart_home_Display_30:
   \   0002AA   90....       MOV     DPTR,#relay + 1
   \   0002AD   E0           MOVX    A,@DPTR
   \   0002AE   A2E5         MOV     C,0xE0 /* A   */.5
   \   0002B0   5009         JNC     ??Smart_home_Display_31
   \   0002B2                ; Setup parameters for call to function HalLcdWriteString
   \   0002B2   7903         MOV     R1,#0x3
   \   0002B4   7A..         MOV     R2,#`?<Constant "K2:ON">` & 0xff
   \   0002B6   7B..         MOV     R3,#(`?<Constant "K2:ON">` >> 8) & 0xff
   \   0002B8   12....       LCALL   ??HalLcdWriteString?relay
   1747                  if((relay.data[0] & 0x10) == 0x10) {HalLcdWriteString( "K2:OFF", HAL_LCD_LINE_3 );}      
   \                     ??Smart_home_Display_31:
   \   0002BB   90....       MOV     DPTR,#relay + 1
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   A2E4         MOV     C,0xE0 /* A   */.4
   \   0002C1   5062         JNC     ??Smart_home_Display_11
   \   0002C3                ; Setup parameters for call to function HalLcdWriteString
   \   0002C3   7903         MOV     R1,#0x3
   \   0002C5   7A..         MOV     R2,#`?<Constant "K2:OFF">` & 0xff
   \   0002C7   7B..         MOV     R3,#(`?<Constant "K2:OFF">` >> 8) & 0xff
   \   0002C9   80B0         SJMP    ??Smart_home_Display_28
   1748                }
   1749          
   1750                break;
   1751              
   1752              case 2:
   1753                HalLcdWriteString( "Motor Contrling", HAL_LCD_LINE_4 );
   \                     ??Smart_home_Display_1:
   \   0002CB                ; Setup parameters for call to function HalLcdWriteString
   \   0002CB   7904         MOV     R1,#0x4
   \   0002CD   7A..         MOV     R2,#`?<Constant "Motor Contrling">` & 0xff
   \   0002CF   7B..         MOV     R3,#(`?<Constant "Motor Contrling">` >> 8) & 0xff
   \   0002D1   12....       LCALL   ?Subroutine22 & 0xFFFF
   1754                //清除屏幕显示
   1755                HalLcdWriteString( " ", HAL_LCD_LINE_2 ); 
   1756                HalLcdWriteString( " ", HAL_LCD_LINE_3 );
   1757                if(motor.deviceNWKStatus == DEVICE_NWK_OFFLINE)
   \                     ??CrossCallReturnLabel_52:
   \   0002D4   90....       MOV     DPTR,#motor
   \   0002D7   E0           MOVX    A,@DPTR
   \   0002D8   6402         XRL     A,#0x2
   \   0002DA   7901         MOV     R1,#0x1
   \   0002DC   7006         JNZ     ??Smart_home_Display_32
   1758                {
   1759                  HalLcdWriteString( "Motor Offline", HAL_LCD_LINE_1 );      
   \   0002DE                ; Setup parameters for call to function HalLcdWriteString
   \   0002DE   7A..         MOV     R2,#`?<Constant "Motor Offline">` & 0xff
   \   0002E0   7B..         MOV     R3,#(`?<Constant "Motor Offline">` >> 8) & 0xff
   \   0002E2   8097         SJMP    ??Smart_home_Display_28
   1760                }
   1761                else  //设备在线回显  设备在线可能是 0/1
   1762                {
   1763                  HalLcdWriteString( "Motor Online", HAL_LCD_LINE_1 ); 
   \                     ??Smart_home_Display_32:
   \   0002E4                ; Setup parameters for call to function HalLcdWriteString
   \   0002E4   7A..         MOV     R2,#`?<Constant "Motor Online">` & 0xff
   \   0002E6   7B..         MOV     R3,#(`?<Constant "Motor Online">` >> 8) & 0xff
   \   0002E8   12....       LCALL   ??HalLcdWriteString?relay
   1764                  //电机控制界面
   1765                  switch(motor.data[1])
   \   0002EB   90....       MOV     DPTR,#motor + 2
   \   0002EE   E0           MOVX    A,@DPTR
   \   0002EF   24FE         ADD     A,#-0x2
   \   0002F1   600B         JZ      ??Smart_home_Display_33
   \   0002F3   14           DEC     A
   \   0002F4   7902         MOV     R1,#0x2
   \   0002F6   600E         JZ      ??Smart_home_Display_34
   1766                  {
   1767                  default:
   1768                  case 1:
   1769                    HalLcdWriteString( "Status: STOP", HAL_LCD_LINE_2 );
   \   0002F8                ; Setup parameters for call to function HalLcdWriteString
   \   0002F8   7A..         MOV     R2,#`?<Constant "Status: STOP">` & 0xff
   \   0002FA   7B..         MOV     R3,#(`?<Constant "Status: STOP">` >> 8) & 0xff
   \   0002FC   800C         SJMP    ??Smart_home_Display_35
   1770                    break;
   1771                  case 2:
   1772                    HalLcdWriteString( "Status: FORWARD", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_33:
   \   0002FE                ; Setup parameters for call to function HalLcdWriteString
   \   0002FE   7902         MOV     R1,#0x2
   \   000300   7A..         MOV     R2,#`?<Constant "Status: FORWARD">` & 0xff
   \   000302   7B..         MOV     R3,#(`?<Constant "Status: FORWARD">` >> 8) & 0xff
   \   000304   8004         SJMP    ??Smart_home_Display_35
   1773                    break;
   1774                  case 3:
   1775                    HalLcdWriteString( "Status: BACKWARD", HAL_LCD_LINE_2 );
   \                     ??Smart_home_Display_34:
   \   000306                ; Setup parameters for call to function HalLcdWriteString
   \   000306   7A..         MOV     R2,#`?<Constant "Status: BACKWARD">` & 0xff
   \   000308   7B..         MOV     R3,#(`?<Constant "Status: BACKWARD">` >> 8) & 0xff
   1776                    break;
   1777                  }
   1778                  
   1779                  HalLcdWriteStringValue( "Speed:", motor.data[0], 10, HAL_LCD_LINE_3 );
   1780                
   1781                }
   1782            }
   \                     ??Smart_home_Display_35:
   \   00030A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00030D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000310   790A         MOV     R1,#0xa
   \   000312   90....       MOV     DPTR,#motor + 1
   \   000315   E0           MOVX    A,@DPTR
   \   000316   FC           MOV     R4,A
   \   000317   7D00         MOV     R5,#0x0
   \   000319   7A..         MOV     R2,#`?<Constant "Speed:">` & 0xff
   \   00031B   7B..         MOV     R3,#(`?<Constant "Speed:">` >> 8) & 0xff
   \   00031D   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   000320   7401         MOV     A,#0x1
   \   000322   12....       LCALL   ?DEALLOC_XSTACK8
   1783            
   1784          #endif // LCD_SUPPORTED  
   1785          }
   \                     ??Smart_home_Display_11:
   \   000325   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ??HalLcdWriteString?relay
   \   000003                ; Setup parameters for call to function HalLcdWriteStringValueValue
   \   000003                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000003   75..03       MOV     ?V0 + 0,#0x3
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??HalLcdWriteString?relay
   \   000003                ; Setup parameters for call to function HalLcdWriteString
   \   000003                ; Setup parameters for call to function HalLcdWriteString
   \   000003                ; Setup parameters for call to function HalLcdWriteString
   \   000003   7902         MOV     R1,#0x2
   \   000005   7A..         MOV     R2,#`?<Constant " ">` & 0xff
   \   000007   7B..         MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
   \   000009   12....       LCALL   ??HalLcdWriteString?relay
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7903         MOV     R1,#0x3
   \   00000E   7A..         MOV     R2,#`?<Constant " ">` & 0xff
   \   000010   7B..         MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
   \   000012   12....       LCALL   ??HalLcdWriteString?relay
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_msg_deallocate?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalLcdDisplayPercentBar
   \   000001                ; Setup parameters for call to function HalLcdDisplayPercentBar
   \   000001   F9           MOV     R1,A
   \   000002   7A..         MOV     R2,#`?<Constant "">` & 0xff
   \   000004   7B..         MOV     R3,#(`?<Constant "">` >> 8) & 0xff
   \   000006   12....       LCALL   ??HalLcdDisplayPercentBar?relay
   \   000009   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??percent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Light:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??lightmp:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Data1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Data2:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for autoScrollEnable>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Smart_home_Motor_cmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Smart_home_Motor_cmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DeviceNWKCheck?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DeviceNWKCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendToRelayMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendToRelayMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendToMotorMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendToMotorMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DisplayResults?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DisplayResults

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitAPP_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitAPP_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Smart_home_Display?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Smart_home_Display

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TransmitApp">`:
   \   000000   5472616E     DB "TransmitApp"
   \            736D6974
   \            41707000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Motor max Speed">`:
   \   000000   4D6F746F     DB "Motor max Speed"
   \            72206D61
   \            78205370
   \            65656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Motor min Speed">`:
   \   000000   4D6F746F     DB "Motor min Speed"
   \            72206D69
   \            6E205370
   \            65656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Allow networking">`:
   \   000000   416C6C6F     DB "Allow networking"
   \            77206E65
   \            74776F72
   \            6B696E67
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Ban   networking">`:
   \   000000   42616E20     DB "Ban   networking"
   \            20206E65
   \            74776F72
   \            6B696E67
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "H:">`:
   \   000000   483A00       DB "H:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%">`:
   \   000000   2500         DB "%"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OFF">`:
   \   000000   4F464600     DB "OFF"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " T:">`:
   \   000000   20543A00     DB " T:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "C">`:
   \   000000   4300         DB "C"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ".">`:
   \   000000   2E00         DB "."

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "C ">`:
   \   000000   432000       DB "C "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "L">`:
   \   000000   4C00         DB "L"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T:OFF L:OFF">`:
   \   000000   543A4F46     DB "T:OFF L:OFF"
   \            46204C3A
   \            4F464600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "K1:">`:
   \   000000   4B313A00     DB "K1:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "off">`:
   \   000000   6F666600     DB "off"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "on">`:
   \   000000   6F6E00       DB "on"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " K2:">`:
   \   000000   204B323A     DB " K2:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Motor:">`:
   \   000000   4D6F746F     DB "Motor:"
   \            723A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Stop">`:
   \   000000   53746F70     DB "Stop"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Forward">`:
   \   000000   466F7277     DB "Forward"
   \            61726400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Backward">`:
   \   000000   4261636B     DB "Backward"
   \            77617264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Speed:">`:
   \   000000   53706565     DB "Speed:"
   \            643A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RPS">`:
   \   000000   52505300     DB "RPS"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Gas:">`:
   \   000000   4761733A     DB "Gas:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Alarm!">`:
   \   000000   416C6172     DB "Alarm!"
   \            6D2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ON">`:
   \   000000   4F4E00       DB "ON"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Flame:">`:
   \   000000   466C616D     DB "Flame:"
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sound:">`:
   \   000000   536F756E     DB "Sound:"
   \            643A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Vibrate:">`:
   \   000000   56696272     DB "Vibrate:"
   \            6174653A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Infrared:">`:
   \   000000   496E6672     DB "Infrared:"
   \            61726564
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Human!">`:
   \   000000   48756D61     DB "Human!"
   \            6E2100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Card:">`:
   \   000000   43617264     DB "Card:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MFOne-S50">`:
   \   000000   4D464F6E     DB "MFOne-S50"
   \            652D5335
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MFOne-S70">`:
   \   000000   4D464F6E     DB "MFOne-S70"
   \            652D5337
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MF-UltraLight">`:
   \   000000   4D462D55     DB "MF-UltraLight"
   \            6C747261
   \            4C696768
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MF-Pro">`:
   \   000000   4D462D50     DB "MF-Pro"
   \            726F00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MF-DesFire">`:
   \   000000   4D462D44     DB "MF-DesFire"
   \            65734669
   \            726500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "      Menu      ">`:
   \   000000   20202020     DB "      Menu      "
   \            20204D65
   \            6E752020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hum:">`:
   \   000000   48756D3A     DB "Hum:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "% T_1:">`:
   \   000000   2520545F     DB "% T_1:"
   \            313A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hum:OFF T_1:OFF">`:
   \   000000   48756D3A     DB "Hum:OFF T_1:OFF"
   \            4F464620
   \            545F313A
   \            4F464600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sound: Voice">`:
   \   000000   536F756E     DB "Sound: Voice"
   \            643A2056
   \            6F696365
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \   000000   536F756E     DB "Sound: Vibration"
   \            643A2056
   \            69627261
   \            74696F6E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \   000000   536F756E     DB "Sound: All"
   \            643A2041
   \            6C6C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sound: None">`:
   \   000000   536F756E     DB "Sound: None"
   \            643A204E
   \            6F6E6500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Sound:OFFLINE">`:
   \   000000   536F756E     DB "Sound:OFFLINE"
   \            643A4F46
   \            464C494E
   \            4500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Temper_2:">`:
   \   000000   54656D70     DB "Temper_2:"
   \            65725F32
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Light:">`:
   \   000000   4C696768     DB "Light:"
   \            743A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Temper_2:OFF">`:
   \   000000   54656D70     DB "Temper_2:OFF"
   \            65725F32
   \            3A4F4646
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Light:OFF">`:
   \   000000   4C696768     DB "Light:OFF"
   \            743A4F46
   \            4600    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "No Card">`:
   \   000000   4E6F2043     DB "No Card"
   \            61726400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ID: ">`:
   \   000000   49443A20     DB "ID: "
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "-">`:
   \   000000   2D00         DB "-"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GasFlame: Flame">`:
   \   000000   47617346     DB "GasFlame: Flame"
   \            6C616D65
   \            3A20466C
   \            616D6500

   \                                 In  segment XDATA_ROM_C, align 1
   \   000000   47617346     DB "GasFlame: Gas"
   \            6C616D65
   \            3A204761
   \            7300    

   \                                 In  segment XDATA_ROM_C, align 1
   \   000000   47617346     DB "GasFlame: All"
   \            6C616D65
   \            3A20416C
   \            6C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GasFlame: None">`:
   \   000000   47617346     DB "GasFlame: None"
   \            6C616D65
   \            3A204E6F
   \            6E6500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GasFlame: OFF">`:
   \   000000   47617346     DB "GasFlame: OFF"
   \            6C616D65
   \            3A204F46
   \            4600    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Infrared: Human">`:
   \   000000   496E6672     DB "Infrared: Human"
   \            61726564
   \            3A204875
   \            6D616E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Infrared: NoHuman">`:
   \   000000   496E6672     DB "Infrared: NoHuman"
   \            61726564
   \            3A204E6F
   \            48756D61
   \            6E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Infrared: OFF">`:
   \   000000   496E6672     DB "Infrared: OFF"
   \            61726564
   \            3A204F46
   \            4600    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Relay Contrling">`:
   \   000000   52656C61     DB "Relay Contrling"
   \            7920436F
   \            6E74726C
   \            696E6700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Relay Offline">`:
   \   000000   52656C61     DB "Relay Offline"
   \            79204F66
   \            666C696E
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Relay Online">`:
   \   000000   52656C61     DB "Relay Online"
   \            79204F6E
   \            6C696E65
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "K1:ON">`:
   \   000000   4B313A4F     DB "K1:ON"
   \            4E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "K1:OFF">`:
   \   000000   4B313A4F     DB "K1:OFF"
   \            464600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "K2:ON">`:
   \   000000   4B323A4F     DB "K2:ON"
   \            4E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "K2:OFF">`:
   \   000000   4B323A4F     DB "K2:OFF"
   \            464600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Motor Contrling">`:
   \   000000   4D6F746F     DB "Motor Contrling"
   \            7220436F
   \            6E74726C
   \            696E6700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Motor Offline">`:
   \   000000   4D6F746F     DB "Motor Offline"
   \            72204F66
   \            666C696E
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Motor Online">`:
   \   000000   4D6F746F     DB "Motor Online"
   \            72204F6E
   \            6C696E65
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Status: STOP">`:
   \   000000   53746174     DB "Status: STOP"
   \            75733A20
   \            53544F50
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Status: FORWARD">`:
   \   000000   53746174     DB "Status: FORWARD"
   \            75733A20
   \            464F5257
   \            41524400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Status: BACKWARD">`:
   \   000000   53746174     DB "Status: BACKWARD"
   \            75733A20
   \            4241434B
   \            57415244
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_427a0000:
   \   000000   00007A42     DD 427A0000H
   1786          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Smart_home_Display                 0      0     28
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteStringValueValue
                                        0      0     32
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdDisplayPercentBar       0      0     20
       -> memcpy                        0      0     24
       -> HalLcdWriteStringValueValue
                                        0      0     32
       -> HalLcdWriteStringValue        0      0     22
       -> osal_msg_deallocate           0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdDisplayPercentBar       0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteStringValueValue
                                        0      0     32
       -> HalLcdDisplayPercentBar       0      0     20
       -> osal_msg_deallocate           0      0     20
       -> osal_msg_deallocate           0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdDisplayPercentBar       0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteString             0      0     20
       -> HalLcdWriteStringValue        0      0     22
     Smart_home_Motor_cmd               0      0     18
       -> TransmitApp_SendToMotorMSG
                                        0      0     18
     TransmitAPP_CallBack               0      0      0
     TransmitApp_DeviceNWKCheck         2      0     12
     TransmitApp_DisplayResults         1      0    228
       -> strcpy                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> _ltoa                         0      0    456
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcat                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcpy                        0      0    452
       -> strcat                        0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
       -> HalLcdWriteString             0      0    452
     TransmitApp_HandleKeys             0      0     21
       -> TransmitApp_SendToRelayMSG
                                        0      0     18
       -> HalLcdWriteString             0      0     18
       -> Smart_home_Motor_cmd          0      0     18
       -> TransmitApp_SendToRelayMSG
                                        0      0     18
       -> HalLcdWriteString             0      0     18
       -> Smart_home_Motor_cmd          0      0     18
       -> NLME_PermitJoiningRequest     0      0     18
       -> HalLcdWriteString             0      0     18
       -> NLME_PermitJoiningRequest     0      0     18
       -> HalLcdWriteString             0      0     18
     TransmitApp_Init                   0      0     40
       -> HalUARTOpen                   0      0     80
       -> afRegister                    0      0     80
       -> RegisterForKeys               0      0     80
       -> HalLcdWriteString             0      0     80
       -> afDataReqMTU                  0      0     80
       -> ZDO_RegisterForZDOMsg         0      0     80
       -> ZDO_RegisterForZDOMsg         0      0     80
       -> osal_start_timerEx            0      0     80
       -> osal_start_timerEx            0      0     80
       -> NLME_PermitJoiningRequest     0      0     80
       -> HalLedSet                     0      0     80
     TransmitApp_MessageMSGCB           0      0     22
     TransmitApp_ProcessEvent           0      0     12
       -> osal_msg_receive              0      0     24
       -> TransmitApp_MessageMSGCB      0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> TransmitApp_HandleKeys        0      0     24
       -> TransmitApp_DeviceNWKCheck
                                        0      0     24
       -> osal_start_timerEx            0      0     24
       -> Smart_home_Display            0      0     24
       -> osal_start_timerEx            0      0     24
     TransmitApp_ProcessZDOMsgs         0      0      0
     TransmitApp_SendToMotorMSG         0      0     28
       -> AF_DataRequest                0      0     38
     TransmitApp_SendToRelayMSG         0      0     28
       -> AF_DataRequest                0      0     38


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     TransmitApp_Msg                      102
     TransmitApp_InClusterList             16
     TransmitApp_OutClusterList             6
     TransmitApp_SimpleDesc                12
     TransmitApp_epDesc                     6
     Ctrlcase                               1
     LCD_Page                               1
     Humit                                  6
     TempLight                              6
     RfID                                   6
     gasFlame                               6
     infrared                               6
     motor                                  6
     relay                                  6
     soundVb                                6
     TransmitApp_TaskID                     1
     TransmitApp_RelayTransID               1
     TransmitApp_MotorTransID               1
     TransmitApp_DstAddr                   12
     TransmitApp_DstRelayAddr              12
     TransmitApp_DstMotorAddr              12
     TransmitApp_MaxDataLength              2
     scrollLine                             1
     autoScrollEnable                       1
     TransmitApp_Init                     314
     ?Subroutine0                           5
     ?Subroutine15                          2
     ??Subroutine40_0                      11
     ?Subroutine11                          2
     ??Subroutine45_0                       5
     TransmitApp_ProcessEvent             186
     TransmitApp_ProcessZDOMsgs             3
     Smart_home_Motor_cmd                  56
     TransmitApp_HandleKeys               297
     ?Subroutine20                         10
     ?Subroutine19                         10
     ?Subroutine18                         10
     ?Subroutine16                         10
     ?Subroutine12                         10
     MotorSpeed                             1
     NetWorkAllow                           1
     Relay1_on                              1
     Relay2_on                              1
     TransmitApp_MessageMSGCB             237
     ?Subroutine8                          18
     ?Subroutine7                           7
     ?Subroutine6                           5
     ?Subroutine5                           5
     ?Subroutine31                          7
     ?Subroutine4                           6
     ?Subroutine32                         10
     ?Subroutine3                          18
     ?Subroutine38                         13
     ?Subroutine2                          16
     ?Subroutine33                          4
     ?Subroutine37                         17
     ?Subroutine1                           5
     TransmitApp_DeviceNWKCheck           396
     ?Subroutine17                          5
     humitCnt                               1
     tempLightCnt                           1
     rfIDCnt                                1
     gasFlameCnt                            1
     infraredCnt                            1
     motorCnt                               1
     relayStatusCnt                         1
     soundVbCnt                             1
     TransmitApp_SendToRelayMSG           122
     ?Subroutine35                          1
     ??Subroutine41_0                       7
     ?Subroutine21                          6
     ?Subroutine10                         10
     TransmitApp_SendToMotorMSG           124
     TransmitApp_DisplayResults          1597
     ?Subroutine30                         11
     ?Subroutine29                         14
     ?Subroutine28                         14
     ?Subroutine27                         14
     ?Subroutine26                          4
     ??Subroutine42_0                       4
     ??Subroutine43_0                       6
     ?Subroutine24                          6
     ?Subroutine23                          6
     ?Subroutine34                          7
     ?Subroutine39                         14
     ?Subroutine13                          8
     ?Subroutine36                          2
     ??Subroutine44_0                       6
     TransmitAPP_CallBack                   3
     Smart_home_Display                   808
     ?Subroutine25                          9
     ?Subroutine22                         22
     ?Subroutine14                          9
     ?Subroutine9                          10
     percent                                1
     Light                                  2
     lightmp                                1
     Data1                                  2
     Data2                                  2
     ?<Initializer for autoScrollEnable>    1
     ??TransmitApp_Init?relay               6
     ??TransmitApp_ProcessEvent?relay       6
     ??TransmitApp_ProcessZDOMsgs?relay     6
     ??Smart_home_Motor_cmd?relay           6
     ??TransmitApp_HandleKeys?relay         6
     ??TransmitApp_MessageMSGCB?relay       6
     ??TransmitApp_DeviceNWKCheck?relay     6
     ??TransmitApp_SendToRelayMSG?relay     6
     ??TransmitApp_SendToMotorMSG?relay     6
     ??TransmitApp_DisplayResults?relay     6
     ??TransmitAPP_CallBack?relay           6
     ??Smart_home_Display?relay             6
     ?<Constant "TransmitApp">             12
     ?<Constant "Motor max Speed">         16
     ?<Constant "Motor min Speed">         16
     ?<Constant "Allow networking">        17
     ?<Constant "Ban   networking">        17
     ?<Constant "H:">                       3
     ?<Constant "%">                        2
     ?<Constant "OFF">                      4
     ?<Constant " T:">                      4
     ?<Constant "C">                        2
     ?<Constant ".">                        2
     ?<Constant "C ">                       3
     ?<Constant "L">                        2
     ?<Constant "T:OFF L:OFF">             12
     ?<Constant "K1:">                      4
     ?<Constant "off">                      4
     ?<Constant "on">                       3
     ?<Constant " K2:">                     5
     ?<Constant "Motor:">                   7
     ?<Constant "Stop">                     5
     ?<Constant "Forward">                  8
     ?<Constant "Backward">                 9
     ?<Constant "Speed:">                   7
     ?<Constant "RPS">                      4
     ?<Constant "Gas:">                     5
     ?<Constant "Alarm!">                   7
     ?<Constant "ON">                       3
     ?<Constant "Flame:">                   7
     ?<Constant "Sound:">                   7
     ?<Constant "Vibrate:">                 9
     ?<Constant "Infrared:">               10
     ?<Constant "Human!">                   7
     ?<Constant "Card:">                    6
     ?<Constant "MFOne-S50">               10
     ?<Constant "MFOne-S70">               10
     ?<Constant "MF-UltraLight">           14
     ?<Constant "MF-Pro">                   7
     ?<Constant "MF-DesFire">              11
     ?<Constant "      Menu      ">        17
     ?<Constant " ">                        2
     ?<Constant "Hum:">                     5
     ?<Constant "% T_1:">                   7
     ?<Constant "Hum:OFF T_1:OFF">         16
     ?<Constant "Sound: Voice">            13
     ?<Constant "Sound: Vibration">        17
     ?<Constant "Sound: All">              11
     ?<Constant "Sound: None">             12
     ?<Constant "Sound:OFFLINE">           14
     ?<Constant "">                         1
     ?<Constant "Temper_2:">               10
     ?<Constant "Light:">                   7
     ?<Constant "Temper_2:OFF">            13
     ?<Constant "Light:OFF">               10
     ?<Constant "No Card">                  8
     ?<Constant "ID: ">                     5
     ?<Constant "-">                        2
     ?<Constant "GasFlame: Flame">         16
     ?<Constant "GasFlame: Gas">           14
     ?<Constant "GasFlame: All">           14
     ?<Constant "GasFlame: None">          15
     ?<Constant "GasFlame: OFF">           14
     ?<Constant "Infrared: Human">         16
     ?<Constant "Infrared: NoHuman">       18
     ?<Constant "Infrared: OFF">           14
     ?<Constant "Relay Contrling">         16
     ?<Constant "Relay Offline">           14
     ?<Constant "Relay Online">            13
     ?<Constant "K1:ON">                    6
     ?<Constant "K1:OFF">                   7
     ?<Constant "K2:ON">                    6
     ?<Constant "K2:OFF">                   7
     ?<Constant "Motor Contrling">         16
     ?<Constant "Motor Offline">           14
     ?<Constant "Motor Online">            13
     ?<Constant "Status: STOP">            13
     ?<Constant "Status: FORWARD">         16
     ?<Constant "Status: BACKWARD">        17
     __Constant_427a0000                    4

 
 4 544 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   768 bytes in segment XDATA_ROM_C
   220 bytes in segment XDATA_Z
 
 4 617 bytes of CODE  memory
   764 bytes of CONST memory (+ 4 bytes shared)
   221 bytes of XDATA memory

Errors: none
Warnings: 1
