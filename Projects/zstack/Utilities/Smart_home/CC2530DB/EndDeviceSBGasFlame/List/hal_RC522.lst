###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         26/Mar/2021  10:54:28 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\毕设\CC2530-smart_home\Components\hal\target\CC #
#                          2530SB\hal_RC522.c                                 #
#    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Utili #
#                          ties\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB\f #
#                          8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func         #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\毕设\CC2530-smart_home\P #
#                          rojects\zstack\Utilities\Smart_home\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO      #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\C #
#                          omponents\hal\target\CC2530SB\hal_RC522.c -D       #
#                          HAL_UART=TRUE -D HAL_UART_TEST -D xREFLECTOR -D    #
#                          xPOWER_SAVING -lC D:\毕设\CC2530-smart_home\Projec #
#                          ts\zstack\Utilities\Smart_home\CC2530DB\EndDeviceS #
#                          BGasFlame\List\ -lA D:\毕设\CC2530-smart_home\Proj #
#                          ects\zstack\Utilities\Smart_home\CC2530DB\EndDevic #
#                          eSBGasFlame\List\ --diag_suppress Pe001,Pa010 -o   #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\EndDeviceSBGasFlame\Obj\ -e  #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Utili #
#                          ties\Smart_home\CC2530DB\ -I                       #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\Source\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\ -I  #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\ha #
#                          l\include\ -I D:\毕设\CC2530-smart_home\Projects\z #
#                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\.. #
#                          \Components\hal\target\CC2530SB\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\include\ -I D:\毕设\CC2530-smart_home\Projects\z #
#                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\.. #
#                          \Components\mac\high_level\ -I                     #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\ -I D:\毕设\CC2530-smart_home\Pr #
#                          ojects\zstack\Utilities\Smart_home\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\low_level\srf04\single_chi #
#                          p\ -I D:\毕设\CC2530-smart_home\Projects\zstack\Ut #
#                          ilities\Smart_home\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mt\ -I D:\毕设\CC2530-smart_home\Projects\zsta #
#                          ck\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I D:\毕设\CC2530-smart_home\Project #
#                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. #
#                          \..\Components\services\sdata\ -I                  #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\af\ -I D:\毕设\CC2530-smart_home\Projects\zsta #
#                          ck\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co #
#                          mponents\stack\nwk\ -I D:\毕设\CC2530-smart_home\P #
#                          rojects\zstack\Utilities\Smart_home\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sapi\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I D:\毕设\CC2530-smart_home\Projects\zst #
#                          ack\Utilities\Smart_home\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sys\ -I D:\毕设\CC2530-smart_home\ #
#                          Projects\zstack\Utilities\Smart_home\CC2530DB\..\. #
#                          .\..\..\..\Components\stack\zdo\ -I                #
#                          D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\ -I D:\毕设\CC2530-smart_home\Projects\zstack\U #
#                          tilities\Smart_home\CC2530DB\..\..\..\..\..\Compon #
#                          ents\zmac\f8w\ -Ohz                                #
#    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\EndDeviceSBGasFlame\List\hal #
#                          _RC522.lst                                         #
#    Object file        =  D:\毕设\CC2530-smart_home\Projects\zstack\Utilitie #
#                          s\Smart_home\CC2530DB\EndDeviceSBGasFlame\Obj\hal_ #
#                          RC522.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\毕设\CC2530-smart_home\Components\hal\target\CC2530SB\hal_RC522.c
      1          /*******************************************************************************
      2           * 文 件 名：RC522.c
      3           *
      4           * 作    者：yizedxl
      5           *
      6           * 修改日期：2013.5.23
      7           *
      8           * 说    明：1、射频驱动芯片MFRC522，程序整体框架来自网络。
      9           *           2、移植主要在管脚宏定义部分，程序目前使用的是IO口模拟SPI接口与MFRC522
     10           *              芯片通信。
     11           *           3、除去本实验的基本功能外，程序后半部分提供了扩展功能，可以读取卡内
     12           *              的数据，模拟扣费和充值的动作。这些额外的函数可用于扩展实验。
     13           *
     14          *******************************************************************************/
     15          
     16          #include <ioCC2530.h>

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     17          #include "hal_RC522.H"
     18          #include "hal_types.h"
     19          #include "hal_defs.h"
     20          
     21          //****************************************************************************
     22          //操作宏定义
     23          
     24          //------------------------------- RC522操作宏 ------------------------------//
     25          //#define    RF_POWER_ON             P8OUT &=~RF_PCTL        // 射频模块上电
     26          //#define    RF_POWER_OFF            P8OUT |= RF_PCTL        // 射频模块下电
     27          #define    RF_POWER_ON             asm("NOP")                // 射频模块上电
     28          #define    RF_POWER_OFF            asm("NOP")                // 射频模块下电
     29          #define    RED_LED_ON              P1_0 = 1        // 红灯亮起
     30          #define    RED_LED_OFF             P1_0 = 0        // 红灯熄灭
     31          
     32          #define    RF_SLEEP                P2_0 = 0        // 射频模块唤醒
     33          #define    RF_WAKEUP               P2_0 = 1        // 射频模块休眠
     34          #define    SCLK_HIGH               P1_5 = 1        // 数据时钟置高
     35          #define    SCLK_LOW                P1_5 = 0        // 数据时钟置低
     36          #define    DATA_OUT_HIGH           P1_6 = 1        // 数据置高
     37          #define    DATA_OUT_LOW            P1_6 = 0        // 数据置低
     38          #define    SS_HIGH                 P1_4 = 1        // 从机选择无效
     39          #define    SS_LOW                  P1_4 = 0        // 从机选择有效
     40          #define    DATA_IN                 P1_7            // 数据输入
     41          
     42          #define    NSS522_1                SS_HIGH        // 从机选择无效       
     43          #define    NSS522_0                SS_LOW         // 从机选择有效
     44          #define    SCK522_1                SCLK_HIGH       // 数据时钟置高
     45          #define    SCK522_0                SCLK_LOW        // 数据时钟置低
     46          #define    SI522_1                 DATA_OUT_HIGH      // 数据置高        
     47          #define    SI522_0                 DATA_OUT_LOW       // 数据置低        
     48          #define    SO522                   DATA_IN            // 数据输入
     49          #define    RST522_1                RF_WAKEUP 
     50          #define    RST522_0                RF_SLEEP
     51          
     52          #define    RC522_EA                P1_3 = 1
     53          #define    RC522_I2C               P1_2 = 0
     54          
     55          //------------------------------ 操作结果  ------------------------------------//
     56          #define    SUCCESS      0
     57          #define    FAILURE      1
     58          #define    CRC_ERROR    2
     59          
     60          //******************************************************************************/
     61          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     62          void  HalRc522Init(void)
   \                     HalRc522Init:
     63          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     64              P1DIR |= BV(6) + BV(5) + BV(4) + BV(3) + BV(2) + BV(0);
   \   000000   43FE7D       ORL     0xfe,#0x7d
     65              P1DIR &= ~BV(7);
   \   000003   53FE7F       ANL     0xfe,#0x7f
     66              P2DIR |= BV(0);
   \   000006   43FF01       ORL     0xff,#0x1
     67              RC522_EA;
   \   000009   D293         SETB    0x90.3
     68              RC522_I2C;
   \   00000B   C292         CLR     0x90.2
     69          }
   \   00000D   02....       LJMP    ?BRET
   \   000010                REQUIRE P1DIR
   \   000010                REQUIRE P2DIR
   \   000010                REQUIRE _A_P1
     70          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     71          void HalRc522Delay(int i)
   \                     HalRc522Delay:
     72          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     73              int j;
     74              
     75              while(i--)
   \                     ??HalRc522Delay_0:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   EB           MOV     A,R3
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   1A           DEC     R2
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FB           MOV     R3,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   6008         JZ      ??HalRc522Delay_1
     76              {
     77                  for(j = 255; j > 0; j--)
   \   000010   74FF         MOV     A,#-0x1
     78                    asm("nop");
   \                     ??HalRc522Delay_2:
   \   000012   00           nop
   \   000013   14           DEC     A
   \   000014   60EA         JZ      ??HalRc522Delay_0
   \   000016   80FA         SJMP    ??HalRc522Delay_2
     79              }
     80          }
   \                     ??HalRc522Delay_1:
   \   000018   02....       LJMP    ?BRET
     81          
     82          //******************************************************************/
     83          //功    能：读RC522寄存器
     84          //参数说明：Address[IN]:寄存器地址
     85          //返    回：读出的值
     86          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          uint8 ReadRawRC(uint8 Address)
   \                     ReadRawRC:
     88          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
     89            uint8 i, ucAddr;
     90            uint8 ucResult=0;
   \   000001   7900         MOV     R1,#0x0
     91            
     92            NSS522_0;
   \   000003   C294         CLR     0x90.4
     93            SCK522_0;
   \   000005   C295         CLR     0x90.5
     94            ucAddr = ((Address<<1)&0x7E)|0x80;
   \   000007   C3           CLR     C
   \   000008   33           RLC     A
   \   000009   4480         ORL     A,#0x80
   \   00000B   FA           MOV     R2,A
     95            for (i = 8; i > 0; i--)
   \   00000C   7808         MOV     R0,#0x8
     96            {
     97              if ((ucAddr & 0x80) == 0x80)
   \                     ??ReadRawRC_0:
   \   00000E   EA           MOV     A,R2
   \   00000F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000011   5004         JNC     ??ReadRawRC_1
     98                SI522_1;
   \   000013   D296         SETB    0x90.6
   \   000015   8002         SJMP    ??ReadRawRC_2
     99              else
    100                SI522_0;
   \                     ??ReadRawRC_1:
   \   000017   C296         CLR     0x90.6
    101              
    102              SCK522_1;
   \                     ??ReadRawRC_2:
   \   000019   D295         SETB    0x90.5
    103              ucAddr <<= 1;
   \   00001B   C3           CLR     C
   \   00001C   33           RLC     A
   \   00001D   FA           MOV     R2,A
    104              SCK522_0;
   \   00001E   C295         CLR     0x90.5
    105            }
   \   000020   18           DEC     R0
   \   000021   E8           MOV     A,R0
   \   000022   70EA         JNZ     ??ReadRawRC_0
    106            
    107            for (i = 8; i > 0;i--)
   \   000024   7A08         MOV     R2,#0x8
    108            {
    109              SCK522_1;
   \                     ??ReadRawRC_3:
   \   000026   D295         SETB    0x90.5
    110              ucResult <<= 1;
    111              ucResult |= SO522;
   \   000028   A297         MOV     C,0x90.7
   \   00002A   E4           CLR     A
   \   00002B   33           RLC     A
   \   00002C   F8           MOV     R0,A
   \   00002D   E9           MOV     A,R1
   \   00002E   33           RLC     A
   \   00002F   48           ORL     A,R0
   \   000030   F9           MOV     R1,A
    112              SCK522_0;
   \   000031   C295         CLR     0x90.5
    113            }
   \   000033   1A           DEC     R2
   \   000034   EA           MOV     A,R2
   \   000035   70EF         JNZ     ??ReadRawRC_3
    114            
    115            SCK522_0;
   \   000037                REQUIRE ?Subroutine0
   \   000037                REQUIRE _A_P1
   \   000037                ; // Fall through to label ?Subroutine0
    116            NSS522_1;
    117            return ucResult;
    118          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   C295         CLR     0x90.5
   \   000002   D294         SETB    0x90.4
   \   000004   02....       LJMP    ?BRET
    119          
    120          //******************************************************************/
    121          //功    能：写RC522寄存器
    122          //参数说明：Address[IN]:寄存器地址
    123          //          value[IN]:写入的值
    124          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          void WriteRawRC(uint8 Address, uint8 value)
   \                     WriteRawRC:
    126          {  
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    127             uint8 i, ucAddr;
    128             NSS522_0;
   \   000000   C294         CLR     0x90.4
    129             SCK522_0;
   \   000002   C295         CLR     0x90.5
    130             ucAddr = (Address << 1) & 0x7E;
   \   000004   E9           MOV     A,R1
   \   000005   C3           CLR     C
   \   000006   33           RLC     A
   \   000007   547E         ANL     A,#0x7e
   \   000009   FB           MOV     R3,A
    131             for (i = 8; i > 0; i--)
   \   00000A   7808         MOV     R0,#0x8
    132             {
    133               if ((ucAddr & 0x80) == 0x80)
   \                     ??WriteRawRC_0:
   \   00000C   EB           MOV     A,R3
   \   00000D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000F   5004         JNC     ??WriteRawRC_1
    134                 SI522_1;
   \   000011   D296         SETB    0x90.6
   \   000013   8002         SJMP    ??WriteRawRC_2
    135               else
    136                 SI522_0;
   \                     ??WriteRawRC_1:
   \   000015   C296         CLR     0x90.6
    137               SCK522_1;
   \                     ??WriteRawRC_2:
   \   000017   D295         SETB    0x90.5
    138               ucAddr <<= 1;
   \   000019   C3           CLR     C
   \   00001A   33           RLC     A
   \   00001B   FB           MOV     R3,A
    139               SCK522_0;
   \   00001C   C295         CLR     0x90.5
    140             }
   \   00001E   18           DEC     R0
   \   00001F   E8           MOV     A,R0
   \   000020   70EA         JNZ     ??WriteRawRC_0
    141             for (i = 8; i > 0; i--)
   \   000022   7808         MOV     R0,#0x8
    142             {
    143               if ((value & 0x80) == 0x80)
   \                     ??WriteRawRC_3:
   \   000024   EA           MOV     A,R2
   \   000025   A2E7         MOV     C,0xE0 /* A   */.7
   \   000027   5004         JNC     ??WriteRawRC_4
    144                 SI522_1;
   \   000029   D296         SETB    0x90.6
   \   00002B   8002         SJMP    ??WriteRawRC_5
    145               else
    146                 SI522_0;
   \                     ??WriteRawRC_4:
   \   00002D   C296         CLR     0x90.6
    147               
    148               SCK522_1;
   \                     ??WriteRawRC_5:
   \   00002F   D295         SETB    0x90.5
    149               value <<= 1;
   \   000031   C3           CLR     C
   \   000032   33           RLC     A
   \   000033   FA           MOV     R2,A
    150               SCK522_0;
   \   000034   C295         CLR     0x90.5
    151             }
   \   000036   18           DEC     R0
   \   000037   E8           MOV     A,R0
   \   000038   70EA         JNZ     ??WriteRawRC_3
    152             SCK522_0;
   \   00003A   80..         SJMP    ?Subroutine0
   \   00003C                REQUIRE _A_P1
    153             NSS522_1;
    154          }
    155          
    156          //******************************************************************/
    157          //功    能：置RC522寄存器位
    158          //参数说明：reg[IN]:寄存器地址
    159          //          mask[IN]:置位值
    160          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    161          void SetBitMask(uint8 reg,uint8 mask)  
   \                     SetBitMask:
    162          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   12....       LCALL   ?Subroutine8 & 0xFFFF
    163            uint8 tmp;
    164            
    165            tmp = ReadRawRC(reg) | mask;
    166            WriteRawRC(reg, tmp);  // set bit mask
   \                     ??CrossCallReturnLabel_57:
   \   00000B   4F           ORL     A,R7
   \   00000C                REQUIRE ?Subroutine2
   \   00000C                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   FA           MOV     R2,A
   \   000001   EE           MOV     A,R6
   \   000002   F9           MOV     R1,A
   \   000003   12....       LCALL   ??WriteRawRC?relay
    167          }
   \   000006   7F01         MOV     R7,#0x1
   \   000008   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   FF           MOV     R7,A
   \   000001                ; Setup parameters for call to function WriteRawRC
   \   000001                ; Setup parameters for call to function ReadRawRC
   \   000001                ; Setup parameters for call to function ReadRawRC
   \   000001                REQUIRE ??Subroutine27_0
   \   000001                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   12....       LCALL   ??ReadRawRC?relay
   \   000003   E9           MOV     A,R1
   \   000004   22           RET
    168          
    169          //******************************************************************/
    170          //功    能：清RC522寄存器位
    171          //参数说明：reg[IN]:寄存器地址
    172          //          mask[IN]:清位值
    173          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void ClearBitMask(uint8 reg,uint8 mask)  
   \                     ClearBitMask:
    175          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    176            uint8 tmp;
    177            
    178            tmp = ReadRawRC(reg) & (~mask);
    179            WriteRawRC(reg, tmp);  // clear bit mask
   \   000007                ; Setup parameters for call to function WriteRawRC
   \   000007   EA           MOV     A,R2
   \   000008   F4           CPL     A
   \   000009   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000C   5F           ANL     A,R7
   \   00000D   80..         SJMP    ?Subroutine2
    180          } 
    181          
    182          //******************************************************************/
    183          //功    能：复位RC522
    184          //返    回: 成功返回MI_OK
    185          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          uint8 PcdReset()
   \                     PcdReset:
    187          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    188              RF_POWER_ON;
   \   000004   00           NOP
    189              RST522_1;
   \   000005   D2A0         SETB    0xa0.0
    190              HalRc522Delay(1);
   \   000007                ; Setup parameters for call to function HalRc522Delay
   \   000007   7A01         MOV     R2,#0x1
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??HalRc522Delay?relay
    191              RST522_0;
   \   00000E   C2A0         CLR     0xa0.0
    192              HalRc522Delay(1);
   \   000010                ; Setup parameters for call to function HalRc522Delay
   \   000010   7A01         MOV     R2,#0x1
   \   000012   7B00         MOV     R3,#0x0
   \   000014   12....       LCALL   ??HalRc522Delay?relay
    193              RST522_1;
   \   000017   D2A0         SETB    0xa0.0
    194              HalRc522Delay(1);
   \   000019                ; Setup parameters for call to function HalRc522Delay
   \   000019   7A01         MOV     R2,#0x1
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??HalRc522Delay?relay
    195              WriteRawRC(CommandReg, PCD_RESETPHASE);
   \   000020                ; Setup parameters for call to function WriteRawRC
   \   000020   7A0F         MOV     R2,#0xf
   \   000022   7901         MOV     R1,#0x1
   \   000024   12....       LCALL   ??WriteRawRC?relay
    196              HalRc522Delay(1);
   \   000027                ; Setup parameters for call to function HalRc522Delay
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   ??HalRc522Delay?relay
    197              WriteRawRC(ModeReg, 0x3D);
   \   00002E                ; Setup parameters for call to function WriteRawRC
   \   00002E   7A3D         MOV     R2,#0x3d
   \   000030   7911         MOV     R1,#0x11
   \   000032   12....       LCALL   ??WriteRawRC?relay
    198              WriteRawRC(TReloadRegL, 30);
   \   000035                ; Setup parameters for call to function WriteRawRC
   \   000035   7A1E         MOV     R2,#0x1e
   \   000037   792D         MOV     R1,#0x2d
   \   000039   12....       LCALL   ??WriteRawRC?relay
    199              WriteRawRC(TReloadRegH, 0);
   \   00003C                ; Setup parameters for call to function WriteRawRC
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   792C         MOV     R1,#0x2c
   \   000040   12....       LCALL   ??WriteRawRC?relay
    200              WriteRawRC(TModeReg, 0x8D);
   \   000043                ; Setup parameters for call to function WriteRawRC
   \   000043   7A8D         MOV     R2,#-0x73
   \   000045   792A         MOV     R1,#0x2a
   \   000047   12....       LCALL   ??WriteRawRC?relay
    201              WriteRawRC(TPrescalerReg, 0x3E);   
   \   00004A                ; Setup parameters for call to function WriteRawRC
   \   00004A   7A3E         MOV     R2,#0x3e
   \   00004C   792B         MOV     R1,#0x2b
   \   00004E   12....       LCALL   ??WriteRawRC?relay
    202              return MI_OK; 
   \   000051   7900         MOV     R1,#0x0
   \   000053   80..         SJMP    ?Subroutine1
   \   000055                REQUIRE _A_P2
    203          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    204          
    205          //******************************************************************/
    206          //开启天线发射  
    207          //每次启动或关闭天线发射之间应至少有1ms的间隔
    208          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          void PcdAntennaOn()
   \                     PcdAntennaOn:
    210          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    211              uint8 i;
    212              
    213              WriteRawRC(TxASKReg,0x40);
   \   000004                ; Setup parameters for call to function WriteRawRC
   \   000004   7A40         MOV     R2,#0x40
   \   000006   7915         MOV     R1,#0x15
   \   000008   12....       LCALL   ??WriteRawRC?relay
    214              HalRc522Delay(10);
   \   00000B                ; Setup parameters for call to function HalRc522Delay
   \   00000B   7A0A         MOV     R2,#0xa
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??HalRc522Delay?relay
    215              i = ReadRawRC(TxControlReg);
    216              if (!(i & 0x03))
   \   000012                ; Setup parameters for call to function ReadRawRC
   \   000012   7914         MOV     R1,#0x14
   \   000014   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000017   5403         ANL     A,#0x3
   \   000019   7007         JNZ     ??PcdAntennaOn_0
    217                  SetBitMask(TxControlReg, 0x03);
   \   00001B                ; Setup parameters for call to function SetBitMask
   \   00001B   7A03         MOV     R2,#0x3
   \   00001D   7914         MOV     R1,#0x14
   \   00001F   12....       LCALL   ??SetBitMask?relay
    218              
    219              i = ReadRawRC(TxASKReg);
   \                     ??PcdAntennaOn_0:
   \   000022                ; Setup parameters for call to function ReadRawRC
   \   000022   7915         MOV     R1,#0x15
   \   000024   12....       LCALL   ??ReadRawRC?relay
    220          }
   \   000027   80..         SJMP    ?Subroutine1
    221          
    222          //******************************************************************/
    223          //开启天线发射  测试使用
    224          //每次启动或关闭天险发射之间应至少有1ms的间隔
    225          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          void PcdAntennaTestOn()
   \                     PcdAntennaTestOn:
    227          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    228              RST522_1;
   \   000004   D2A0         SETB    0xa0.0
    229              HalRc522Delay(15); // 2010.10.09 ???? FOR DEBUG
   \   000006                ; Setup parameters for call to function HalRc522Delay
   \   000006   7A0F         MOV     R2,#0xf
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   12....       LCALL   ??HalRc522Delay?relay
    230          //  HalRc522Delay(5); // 2010.10.09 ???? FOR DEBUG
    231            
    232            WriteRawRC(TxControlReg,0x02);
   \   00000D                ; Setup parameters for call to function WriteRawRC
   \   00000D   7A02         MOV     R2,#0x2
   \   00000F   7914         MOV     R1,#0x14
   \   000011   12....       LCALL   ??WriteRawRC?relay
    233            
    234          /*
    235            HalRc522Delay(1); 
    236            SetBitMask(TxControlReg, 0x03);// FOR DEBUG 
    237          */
    238          }
   \   000014                REQUIRE ?Subroutine1
   \   000014                REQUIRE _A_P2
   \   000014                ; // Fall through to label ?Subroutine1
    239          
    240          
    241          //******************************************************************/
    242          //关闭天线发射
    243          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          void PcdAntennaOff()
   \                     PcdAntennaOff:
    245          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    246              ClearBitMask(TxControlReg, 0x03);
   \   000004                ; Setup parameters for call to function ClearBitMask
   \   000004   7A03         MOV     R2,#0x3
   \   000006   7914         MOV     R1,#0x14
   \   000008   12....       LCALL   ??ClearBitMask?relay
    247          }
   \   00000B   80..         SJMP    ?Subroutine1
    248          
    249          //******************************************************************/
    250          //功    能：通过RC522和ISO14443卡通讯
    251          //参数说明：Command[IN]:RC522命令字
    252          //          pInData[IN]:通过RC522发送到卡片的数据
    253          //          InLenByte[IN]:发送数据的字节长度
    254          //          pOutData[OUT]:接收到的卡片返回数据
    255          //          *pOutLenBit[OUT]:返回数据的位长度
    256          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          uint8 PcdComMF522(uint8 Command  ,uint8 *pInData , 
   \                     PcdComMF522:
    258                           uint8 InLenByte,uint8 *pOutData, 
    259                           unsigned int  *pOutLenBit)
    260          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 10,R2
   \   000009   8B..         MOV     ?V0 + 11,R3
   \   00000B   8C..         MOV     ?V0 + 4,R4
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 12,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 13,A
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 1,A
    261              uint8 status   = MI_ERR;
   \   000025   75..FE       MOV     ?V0 + 3,#-0x2
    262              uint8 irqEn   = 0x00;
   \   000028   75..00       MOV     ?V0 + 5,#0x0
    263              uint8 waitFor = 0x00;
   \   00002B   75..00       MOV     ?V0 + 6,#0x0
    264              uint8 lastBits;
    265              uint8 n;
    266              unsigned int  i;
    267              
    268              switch (Command)
   \   00002E   E9           MOV     A,R1
   \   00002F   24F4         ADD     A,#-0xc
   \   000031   600C         JZ      ??PcdComMF522_0
   \   000033   24FE         ADD     A,#-0x2
   \   000035   700E         JNZ     ??PcdComMF522_1
    269              {
    270              case PCD_AUTHENT:
    271                irqEn   = 0x12;
   \   000037   75..12       MOV     ?V0 + 5,#0x12
    272                waitFor = 0x10;
   \   00003A   75..10       MOV     ?V0 + 6,#0x10
    273                break;
   \   00003D   8006         SJMP    ??PcdComMF522_1
    274              case PCD_TRANSCEIVE:
    275                irqEn   = 0x77;
   \                     ??PcdComMF522_0:
   \   00003F   75..77       MOV     ?V0 + 5,#0x77
    276                waitFor = 0x30;
   \   000042   75..30       MOV     ?V0 + 6,#0x30
    277                break;
    278              default:
    279                break;
    280              }
    281              WriteRawRC(ComIEnReg,irqEn|0x80); //
   \                     ??PcdComMF522_1:
   \   000045                ; Setup parameters for call to function WriteRawRC
   \   000045   7480         MOV     A,#-0x80
   \   000047   45..         ORL     A,?V0 + 5
   \   000049   FA           MOV     R2,A
   \   00004A   7902         MOV     R1,#0x2
   \   00004C   12....       LCALL   ??WriteRawRC?relay
    282              ClearBitMask(ComIrqReg,0x80);
   \   00004F                ; Setup parameters for call to function ClearBitMask
   \   00004F   7A80         MOV     R2,#-0x80
   \   000051   7904         MOV     R1,#0x4
   \   000053   12....       LCALL   ?Subroutine6 & 0xFFFF
    283              WriteRawRC(CommandReg,PCD_IDLE);
    284              SetBitMask(FIFOLevelReg,0x80); // 清空FIFO 
    285              
    286              for(i = 0; i < InLenByte; i++)
   \                     ??CrossCallReturnLabel_0:
   \   000056   7E00         MOV     R6,#0x0
   \   000058   7F00         MOV     R7,#0x0
   \   00005A   8019         SJMP    ??PcdComMF522_2
    287                  WriteRawRC(FIFODataReg, pInData[i]); // 数据写入FIFO 
   \                     ??PcdComMF522_3:
   \   00005C                ; Setup parameters for call to function WriteRawRC
   \   00005C   E5..         MOV     A,?V0 + 10
   \   00005E   2E           ADD     A,R6
   \   00005F   F582         MOV     DPL,A
   \   000061   E5..         MOV     A,?V0 + 11
   \   000063   3F           ADDC    A,R7
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7909         MOV     R1,#0x9
   \   00006A   12....       LCALL   ??WriteRawRC?relay
   \   00006D   EE           MOV     A,R6
   \   00006E   2401         ADD     A,#0x1
   \   000070   0E           INC     R6
   \   000071   EF           MOV     A,R7
   \   000072   3400         ADDC    A,#0x0
   \   000074   FF           MOV     R7,A
   \                     ??PcdComMF522_2:
   \   000075   85....       MOV     ?V0 + 8,?V0 + 4
   \   000078   C3           CLR     C
   \   000079   EE           MOV     A,R6
   \   00007A   95..         SUBB    A,?V0 + 8
   \   00007C   EF           MOV     A,R7
   \   00007D   9400         SUBB    A,#0x0
   \   00007F   40DB         JC      ??PcdComMF522_3
    288              
    289              WriteRawRC(CommandReg, Command); // 命令写入命令寄存器
   \   000081                ; Setup parameters for call to function WriteRawRC
   \   000081   AA..         MOV     R2,?V0 + 2
   \   000083   7901         MOV     R1,#0x1
   \   000085   12....       LCALL   ??WriteRawRC?relay
    290              if(Command == PCD_TRANSCEIVE)
   \   000088   740C         MOV     A,#0xc
   \   00008A   65..         XRL     A,?V0 + 2
   \   00008C   7007         JNZ     ??PcdComMF522_4
    291                  SetBitMask(BitFramingReg,0x80); // 开始发送     
   \   00008E                ; Setup parameters for call to function SetBitMask
   \   00008E   7A80         MOV     R2,#-0x80
   \   000090   790D         MOV     R1,#0xd
   \   000092   12....       LCALL   ??SetBitMask?relay
    292              
    293              i = 25000; //根据时钟频率调整，操作M1卡最大等待时间25ms
   \                     ??PcdComMF522_4:
   \   000095   7EA8         MOV     R6,#-0x58
   \   000097   7F61         MOV     R7,#0x61
    294              do 
    295              {
    296                  n = ReadRawRC(ComIrqReg);
   \                     ??PcdComMF522_5:
   \   000099                ; Setup parameters for call to function ReadRawRC
   \   000099   7904         MOV     R1,#0x4
   \   00009B   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00009E   F5..         MOV     ?V0 + 8,A
    297                  i--;
    298              }
    299              while ((i != 0) && !(n & 0x01) && !(n & waitFor));
   \   0000A0   EE           MOV     A,R6
   \   0000A1   24FF         ADD     A,#-0x1
   \   0000A3   1E           DEC     R6
   \   0000A4   EF           MOV     A,R7
   \   0000A5   34FF         ADDC    A,#-0x1
   \   0000A7   FF           MOV     R7,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   4F           ORL     A,R7
   \   0000AA   6009         JZ      ??PcdComMF522_6
   \   0000AC   E9           MOV     A,R1
   \   0000AD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AF   4004         JC      ??PcdComMF522_6
   \   0000B1   55..         ANL     A,?V0 + 6
   \   0000B3   60E4         JZ      ??PcdComMF522_5
    300              
    301              ClearBitMask(BitFramingReg, 0x80);
   \                     ??PcdComMF522_6:
   \   0000B5                ; Setup parameters for call to function ClearBitMask
   \   0000B5   7A80         MOV     R2,#-0x80
   \   0000B7   790D         MOV     R1,#0xd
   \   0000B9   12....       LCALL   ??ClearBitMask?relay
    302              
    303              if(i!=0)
   \   0000BC   EE           MOV     A,R6
   \   0000BD   4F           ORL     A,R7
   \   0000BE   7003         JNZ     $+5
   \   0000C0   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
    304              {
    305                  if(!(ReadRawRC(ErrorReg)&0x1B))
   \   0000C3                ; Setup parameters for call to function ReadRawRC
   \   0000C3   7906         MOV     R1,#0x6
   \   0000C5   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000C8   541B         ANL     A,#0x1b
   \   0000CA   6003         JZ      $+5
   \   0000CC   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
    306                  {
    307                      status = MI_OK;
   \   0000CF   75..00       MOV     ?V0 + 3,#0x0
    308                      if (n&irqEn&0x01)
   \   0000D2   E5..         MOV     A,?V0 + 5
   \   0000D4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D6   C0D0         PUSH    PSW
   \   0000D8   E5..         MOV     A,?V0 + 8
   \   0000DA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DC   92F0         MOV     B.0,C
   \   0000DE   12....       LCALL   ?POP_BIT_ISP
   \   0000E1   1581         DEC     SP
   \   0000E3   82F0         ANL     C,B.0
   \   0000E5   5003         JNC     ??PcdComMF522_8
    309                          status = MI_NOTAGERR;
   \   0000E7   75..FF       MOV     ?V0 + 3,#-0x1
    310                      
    311                      if(Command==PCD_TRANSCEIVE)
   \                     ??PcdComMF522_8:
   \   0000EA   740C         MOV     A,#0xc
   \   0000EC   65..         XRL     A,?V0 + 2
   \   0000EE   6003         JZ      $+5
   \   0000F0   02....       LJMP    ??PcdComMF522_7 & 0xFFFF
    312                      {
    313                          n = ReadRawRC(FIFOLevelReg);
   \   0000F3                ; Setup parameters for call to function ReadRawRC
   \   0000F3   790A         MOV     R1,#0xa
   \   0000F5   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000F8   F5..         MOV     ?V0 + 8,A
    314                          lastBits = ReadRawRC(ControlReg) & 0x07;
   \   0000FA                ; Setup parameters for call to function ReadRawRC
   \   0000FA   790C         MOV     R1,#0xc
   \   0000FC   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000FF   5407         ANL     A,#0x7
   \   000101   F5..         MOV     ?V0 + 10,A
    315                          
    316                          if(lastBits)
   \   000103   85....       MOV     ?V0 + 6,?V0 + 8
   \   000106   6028         JZ      ??PcdComMF522_9
    317                            *pOutLenBit = (n-1)*8 + lastBits;
   \   000108   E5..         MOV     A,?V0 + 6
   \   00010A   24FF         ADD     A,#-0x1
   \   00010C   F5..         MOV     ?V0 + 6,A
   \   00010E   E4           CLR     A
   \   00010F   34FF         ADDC    A,#-0x1
   \   000111   F5..         MOV     ?V0 + 7,A
   \   000113   7403         MOV     A,#0x3
   \   000115   78..         MOV     R0,#?V0 + 6
   \   000117   12....       LCALL   ?S_SHL
   \   00011A   E5..         MOV     A,?V0 + 6
   \   00011C   25..         ADD     A,?V0 + 10
   \   00011E   F8           MOV     R0,A
   \   00011F   E5..         MOV     A,?V0 + 7
   \   000121   3400         ADDC    A,#0x0
   \   000123   F9           MOV     R1,A
   \   000124   85..82       MOV     DPL,?V0 + 0
   \   000127   85..83       MOV     DPH,?V0 + 1
   \   00012A   E8           MOV     A,R0
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   E9           MOV     A,R1
   \   00012E   8016         SJMP    ??PcdComMF522_10
    318                          else
    319                            *pOutLenBit = n*8;
   \                     ??PcdComMF522_9:
   \   000130   75..00       MOV     ?V0 + 7,#0x0
   \   000133   7403         MOV     A,#0x3
   \   000135   78..         MOV     R0,#?V0 + 6
   \   000137   12....       LCALL   ?S_SHL
   \   00013A   85..82       MOV     DPL,?V0 + 0
   \   00013D   85..83       MOV     DPH,?V0 + 1
   \   000140   E5..         MOV     A,?V0 + 6
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   E5..         MOV     A,?V0 + 7
   \                     ??PcdComMF522_10:
   \   000146   F0           MOVX    @DPTR,A
    320                          
    321                          if(n==0)
   \   000147   E5..         MOV     A,?V0 + 8
   \   000149   7005         JNZ     ??PcdComMF522_11
    322                            n = 1;
   \   00014B   75..01       MOV     ?V0 + 8,#0x1
   \   00014E   8008         SJMP    ??PcdComMF522_12
    323                          
    324                          if(n>MAXRLEN)
   \                     ??PcdComMF522_11:
   \   000150   C3           CLR     C
   \   000151   9413         SUBB    A,#0x13
   \   000153   4003         JC      ??PcdComMF522_12
    325                            n = MAXRLEN;
   \   000155   75..12       MOV     ?V0 + 8,#0x12
    326                          
    327                          for (i=0; i<n; i++)
   \                     ??PcdComMF522_12:
   \   000158   7E00         MOV     R6,#0x0
   \   00015A   7F00         MOV     R7,#0x0
   \   00015C   8019         SJMP    ??PcdComMF522_13
    328                              pOutData[i] = ReadRawRC(FIFODataReg); 
   \                     ??PcdComMF522_14:
   \   00015E                ; Setup parameters for call to function ReadRawRC
   \   00015E   7909         MOV     R1,#0x9
   \   000160   12....       LCALL   ??ReadRawRC?relay
   \   000163   E5..         MOV     A,?V0 + 12
   \   000165   2E           ADD     A,R6
   \   000166   F582         MOV     DPL,A
   \   000168   E5..         MOV     A,?V0 + 13
   \   00016A   3F           ADDC    A,R7
   \   00016B   F583         MOV     DPH,A
   \   00016D   E9           MOV     A,R1
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   EE           MOV     A,R6
   \   000170   2401         ADD     A,#0x1
   \   000172   0E           INC     R6
   \   000173   EF           MOV     A,R7
   \   000174   3400         ADDC    A,#0x0
   \   000176   FF           MOV     R7,A
   \                     ??PcdComMF522_13:
   \   000177   85....       MOV     ?V0 + 0,?V0 + 8
   \   00017A   C3           CLR     C
   \   00017B   EE           MOV     A,R6
   \   00017C   95..         SUBB    A,?V0 + 0
   \   00017E   EF           MOV     A,R7
   \   00017F   9400         SUBB    A,#0x0
   \   000181   40DB         JC      ??PcdComMF522_14
    329                      }
    330                  }
    331                  else
    332                    status = MI_ERR;        
    333              }
    334              
    335              SetBitMask(ControlReg, 0x80);// stop timer now
   \                     ??PcdComMF522_7:
   \   000183                ; Setup parameters for call to function SetBitMask
   \   000183   7A80         MOV     R2,#-0x80
   \   000185   790C         MOV     R1,#0xc
   \   000187   12....       LCALL   ??SetBitMask?relay
    336              WriteRawRC(CommandReg, PCD_IDLE); 
   \   00018A                ; Setup parameters for call to function WriteRawRC
   \   00018A   7A00         MOV     R2,#0x0
   \   00018C   7901         MOV     R1,#0x1
   \   00018E   12....       LCALL   ??WriteRawRC?relay
    337              return status;
   \   000191   A9..         MOV     R1,?V0 + 3
   \   000193   7F0E         MOV     R7,#0xe
   \   000195   02....       LJMP    ?BANKED_LEAVE_XDATA
    338          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??ClearBitMask?relay
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003                ; Setup parameters for call to function WriteRawRC
   \   000003   7A00         MOV     R2,#0x0
   \   000005   7901         MOV     R1,#0x1
   \   000007   12....       LCALL   ??WriteRawRC?relay
   \   00000A                ; Setup parameters for call to function SetBitMask
   \   00000A                ; Setup parameters for call to function SetBitMask
   \   00000A   7A80         MOV     R2,#-0x80
   \   00000C   790A         MOV     R1,#0xa
   \   00000E   12....       LCALL   ??SetBitMask?relay
   \   000011   22           RET
    339          
    340          //******************************************************************/
    341          //功    能：寻卡                                                    /
    342          //参数说明: req_code[IN]:寻卡方式                                   /
    343          //                0x52 = 寻感应区内所有符合14443A标准的卡           /
    344          //                0x26 = 寻未进入休眠状态的卡                       /
    345          //          pTagType[OUT]：卡片类型代码                             /
    346          //                0x4400 = Mifare_UltraLight                        /
    347          //                0x0400 = Mifare_One(S50)                          /
    348          //                0x0200 = Mifare_One(S70)                          /
    349          //                0x0800 = Mifare_Pro(X)                            /
    350          //                0x4403 = Mifare_DESFire                           /
    351          //返    回: 成功返回MI_OK                                           /
    352          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          uint8 PcdRequest(uint8 req_code, uint8 *pTagType)
   \                     PcdRequest:
    354          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
    355            uint8 status;  
    356            unsigned int  unLen;
    357            uint8 ucComMF522Buf[MAXRLEN]; 
    358          
    359            ClearBitMask(Status2Reg,0x08);
   \   000010                ; Setup parameters for call to function ClearBitMask
   \   000010   7A08         MOV     R2,#0x8
   \   000012   7908         MOV     R1,#0x8
   \   000014   12....       LCALL   ??ClearBitMask?relay
    360            WriteRawRC(BitFramingReg,0x07);
   \   000017                ; Setup parameters for call to function WriteRawRC
   \   000017   7A07         MOV     R2,#0x7
   \   000019   790D         MOV     R1,#0xd
   \   00001B   12....       LCALL   ??WriteRawRC?relay
    361            SetBitMask(TxControlReg,0x03);
   \   00001E                ; Setup parameters for call to function SetBitMask
   \   00001E   7A03         MOV     R2,#0x3
   \   000020   7914         MOV     R1,#0x14
   \   000022   12....       LCALL   ??SetBitMask?relay
    362           
    363            ucComMF522Buf[0] = req_code;
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E5..         MOV     A,?V0 + 2
   \   00002C   12....       LCALL   ?Subroutine16 & 0xFFFF
    364          
    365            status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 1, ucComMF522Buf, &unLen);
   \                     ??CrossCallReturnLabel_21:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C01         MOV     R4,#0x1
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   E9           MOV     A,R1
    366            
    367            if ((status == MI_OK) && (unLen == 0x10))
   \   000050   7028         JNZ     ??PcdRequest_0
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6410         XRL     A,#0x10
   \   00005B   7002         JNZ     ??PcdRequest_1
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \                     ??PcdRequest_1:
   \   00005F   7019         JNZ     ??PcdRequest_0
    368            {    
    369              *pTagType     = ucComMF522Buf[0];
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   F0           MOVX    @DPTR,A
    370              *(pTagType + 1) = ucComMF522Buf[1];
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   E0           MOVX    A,@DPTR
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   F0           MOVX    @DPTR,A
   \   000078   8002         SJMP    ??PcdRequest_2
    371            }
    372            else
    373              status = MI_ERR;
   \                     ??PcdRequest_0:
   \   00007A   79FE         MOV     R1,#-0x2
    374            return status;
   \                     ??PcdRequest_2:
   \   00007C                REQUIRE ?Subroutine3
   \   00007C                ; // Fall through to label ?Subroutine3
    375          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7414         MOV     A,#0x14
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F03         MOV     R7,#0x3
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function PcdComMF522
   \   000001                ; Setup parameters for call to function PcdComMF522
   \   000001                ; Setup parameters for call to function PcdComMF522
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   8582..       MOV     ?V0 + 0,DPL
   \   00000A   8583..       MOV     ?V0 + 1,DPH
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   790C         MOV     R1,#0xc
   \   000006                REQUIRE ??Subroutine24_0
   \   000006                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL   ??PcdComMF522?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    376          
    377          //******************************************************************
    378          //功    能：防冲撞                                                  
    379          //参数说明: pSnr[OUT]:卡片序列号，4字节                             
    380          //返    回: 成功返回MI_OK                                           
    381          //******************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          uint8 PcdAnticoll(uint8 *pSnr)
   \                     PcdAnticoll:
    383          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    384              uint8 status;
    385              uint8 i, snr_check=0;
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
    386              unsigned int unLen;
    387              uint8 ucComMF522Buf[MAXRLEN]; 
    388              
    389              ClearBitMask(Status2Reg, 0x08);
   \   000011                ; Setup parameters for call to function ClearBitMask
   \   000011   7A08         MOV     R2,#0x8
   \   000013   7908         MOV     R1,#0x8
   \   000015   12....       LCALL   ??ClearBitMask?relay
    390              WriteRawRC(BitFramingReg, 0x00);
   \   000018                ; Setup parameters for call to function WriteRawRC
   \   000018   7A00         MOV     R2,#0x0
   \   00001A   790D         MOV     R1,#0xd
   \   00001C   12....       LCALL   ??WriteRawRC?relay
    391              ClearBitMask(CollReg, 0x80);
   \   00001F                ; Setup parameters for call to function ClearBitMask
   \   00001F   7A80         MOV     R2,#-0x80
   \   000021   790E         MOV     R1,#0xe
   \   000023   12....       LCALL   ??ClearBitMask?relay
    392           
    393              ucComMF522Buf[0] = PICC_ANTICOLL1;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7493         MOV     A,#-0x6d
   \   00002D   F0           MOVX    @DPTR,A
    394              ucComMF522Buf[1] = 0x20;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7420         MOV     A,#0x20
   \   000035   12....       LCALL   ?Subroutine16 & 0xFFFF
    395          
    396              status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 2, ucComMF522Buf, &unLen);
   \                     ??CrossCallReturnLabel_22:
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   8582..       MOV     ?V0 + 0,DPL
   \   000043   8583..       MOV     ?V0 + 1,DPH
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C02         MOV     R4,#0x2
   \   00004D   7406         MOV     A,#0x6
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   F5..         MOV     ?V0 + 0,A
    397          
    398              if (status == MI_OK)
   \   00005B   7065         JNZ     ??PcdAnticoll_0
    399              {
    400              	 for (i = 0; i < (unLen/8 - 1); i++)
   \   00005D   75..00       MOV     ?V0 + 6,#0x0
   \   000060   8024         SJMP    ??PcdAnticoll_1
    401                   {   
    402                       *(pSnr+i)  = ucComMF522Buf[i];
   \                     ??PcdAnticoll_2:
   \   000062   85..82       MOV     DPL,?V0 + 6
   \   000065   AA82         MOV     R2,DPL
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   E582         MOV     A,DPL
   \   00006E   2A           ADD     A,R2
   \   00006F   F8           MOV     R0,A
   \   000070   E583         MOV     A,DPH
   \   000072   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000075   C0E0         PUSH    A
   \   000077   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
    403                       snr_check ^= ucComMF522Buf[i];
   \   00007D   8882         MOV     DPL,R0
   \   00007F   8983         MOV     DPH,R1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   62..         XRL     ?V0 + 2,A
    404                   }
   \   000084   05..         INC     ?V0 + 6
   \                     ??PcdAnticoll_1:
   \   000086   85....       MOV     ?V0 + 4,?V0 + 6
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F5..         MOV     ?V0 + 8,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0 + 9,A
   \   000096   7403         MOV     A,#0x3
   \   000098   78..         MOV     R0,#?V0 + 8
   \   00009A   12....       LCALL   ?US_SHR
   \   00009D   E5..         MOV     A,?V0 + 8
   \   00009F   24FF         ADD     A,#-0x1
   \   0000A1   F8           MOV     R0,A
   \   0000A2   E5..         MOV     A,?V0 + 9
   \   0000A4   34FF         ADDC    A,#-0x1
   \   0000A6   F9           MOV     R1,A
   \   0000A7   C3           CLR     C
   \   0000A8   E5..         MOV     A,?V0 + 4
   \   0000AA   98           SUBB    A,R0
   \   0000AB   E4           CLR     A
   \   0000AC   99           SUBB    A,R1
   \   0000AD   40B3         JC      ??PcdAnticoll_2
    405                   if (snr_check != ucComMF522Buf[i])
   \   0000AF   7402         MOV     A,#0x2
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E582         MOV     A,DPL
   \   0000B6   25..         ADD     A,?V0 + 6
   \   0000B8   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000BB   65..         XRL     A,?V0 + 2
   \   0000BD   6003         JZ      ??PcdAnticoll_0
    406                   {   
    407                       status = MI_ERR;    
   \   0000BF   75..FE       MOV     ?V0 + 0,#-0x2
    408                   }
    409              }
    410              
    411              SetBitMask(CollReg, 0x80);
   \                     ??PcdAnticoll_0:
   \   0000C2                ; Setup parameters for call to function SetBitMask
   \   0000C2   7A80         MOV     R2,#-0x80
   \   0000C4   790E         MOV     R1,#0xe
   \   0000C6   12....       LCALL   ??SetBitMask?relay
    412              return status;
   \   0000C9   A9..         MOV     R1,?V0 + 0
   \   0000CB   7414         MOV     A,#0x14
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   7F0A         MOV     R7,#0xa
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
    413          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV     A,R6
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine26_0
   \   000004                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    414          
    415          //*********************************************************************/
    416          //功    能：选定卡片
    417          //参数说明: pSnr[IN]:卡片序列号，4字节
    418          //返    回: 成功返回MI_OK
    419          //********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    420          uint8 PcdSelect(uint8 *pSnr)
   \                     PcdSelect:
    421          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    422              uint8 status;
    423              uint8 i;
    424              unsigned int  unLen;
    425              uint8 ucComMF522Buf[MAXRLEN]; 
    426              
    427              ucComMF522Buf[0] = PICC_ANTICOLL1;
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7493         MOV     A,#-0x6d
   \   000011   F0           MOVX    @DPTR,A
    428              ucComMF522Buf[1] = 0x70;
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7470         MOV     A,#0x70
   \   000019   F0           MOVX    @DPTR,A
    429              ucComMF522Buf[6] = 0;
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
    430              for (i=0; i<4; i++)
   \   000021   FE           MOV     R6,A
    431              {
    432              	ucComMF522Buf[i+2] = *(pSnr+i);
   \                     ??PcdSelect_0:
   \   000022   8E82         MOV     DPL,R6
   \   000024   AC82         MOV     R4,DPL
   \   000026   EA           MOV     A,R2
   \   000027   2C           ADD     A,R4
   \   000028   F8           MOV     R0,A
   \   000029   EB           MOV     A,R3
   \   00002A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00002D   C0E0         PUSH    A
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E582         MOV     A,DPL
   \   000036   2C           ADD     A,R4
   \   000037   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
    433              	ucComMF522Buf[6]  ^= *(pSnr+i);
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7408         MOV     A,#0x8
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   68           XRL     A,R0
   \   00004A   F0           MOVX    @DPTR,A
    434              }
   \   00004B   0E           INC     R6
   \   00004C   EE           MOV     A,R6
   \   00004D   C3           CLR     C
   \   00004E   9404         SUBB    A,#0x4
   \   000050   40D0         JC      ??PcdSelect_0
    435              CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
   \   000052                ; Setup parameters for call to function CalulateCRC
   \   000052   7409         MOV     A,#0x9
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   AC82         MOV     R4,DPL
   \   000059   AD83         MOV     R5,DPH
   \   00005B   7907         MOV     R1,#0x7
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   12....       LCALL   ??CalulateCRC?relay
    436            
    437              ClearBitMask(Status2Reg,0x08);
   \   000069                ; Setup parameters for call to function ClearBitMask
   \   000069   7A08         MOV     R2,#0x8
   \   00006B   7908         MOV     R1,#0x8
   \   00006D   12....       LCALL   ??ClearBitMask?relay
    438          
    439              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
   \   000070                ; Setup parameters for call to function PcdComMF522
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   8582..       MOV     ?V0 + 0,DPL
   \   000079   8583..       MOV     ?V0 + 1,DPH
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   8582..       MOV     ?V0 + 0,DPL
   \   000089   8583..       MOV     ?V0 + 1,DPH
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7C09         MOV     R4,#0x9
   \   000093   7406         MOV     A,#0x6
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   E9           MOV     A,R1
    440              
    441              if ((status == MI_OK) && (unLen == 0x18))
   \   00009F   700F         JNZ     ??PcdSelect_1
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   6418         XRL     A,#0x18
   \   0000AA   7002         JNZ     ??PcdSelect_2
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \                     ??PcdSelect_2:
   \   0000AE   6002         JZ      ??PcdSelect_3
    442              {   status = MI_OK;  }
    443              else
    444              {   status = MI_ERR;    }
   \                     ??PcdSelect_1:
   \   0000B0   79FE         MOV     R1,#-0x2
    445          
    446              return status;
   \                     ??PcdSelect_3:
   \   0000B2   02....       LJMP    ??Subroutine22_0 & 0xFFFF
    447          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   7414         MOV     A,#0x14
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine23_0
   \   000005                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    448          
    449          //******************************************************************/
    450          //功    能：验证卡片密码
    451          //参数说明: auth_mode[IN]: 密码验证模式
    452          //                 0x60 = 验证A密钥
    453          //                 0x61 = 验证B密钥 
    454          //          addr[IN]：块地址
    455          //          pKey[IN]：密码
    456          //          pSnr[IN]：卡片序列号，4字节
    457          //返    回: 成功返回MI_OK
    458          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          uint8 PcdAuthState(uint8 auth_mode,uint8 addr,
   \                     PcdAuthState:
    460                            uint8 *pKey,uint8 *pSnr    )
    461          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   741E         MOV     A,#0x1e
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
    462              uint8 status;
    463              unsigned int  unLen;
    464              uint8 i, ucComMF522Buf[MAXRLEN]; 
    465          
    466              ucComMF522Buf[0] = auth_mode;
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EE           MOV     A,R6
   \   00001C   F0           MOVX    @DPTR,A
    467              ucComMF522Buf[1] = addr;
   \   00001D   7403         MOV     A,#0x3
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EA           MOV     A,R2
   \   000023   F0           MOVX    @DPTR,A
    468              for (i=0; i<6; i++)
   \   000024   75..00       MOV     ?V0 + 0,#0x0
    469              {    ucComMF522Buf[i+2] = *(pKey+i);   }
   \                     ??PcdAuthState_0:
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   EC           MOV     A,R4
   \   00002D   2A           ADD     A,R2
   \   00002E   F582         MOV     DPL,A
   \   000030   ED           MOV     A,R5
   \   000031   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000034   C0E0         PUSH    A
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00003E   D0E0         POP     A
   \   000040   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000043   40E2         JC      ??PcdAuthState_0
    470              for (i=0; i<6; i++)
   \   000045   75..00       MOV     ?V0 + 0,#0x0
    471              {    ucComMF522Buf[i+8] = *(pSnr+i);   }
   \                     ??PcdAuthState_1:
   \   000048   85..82       MOV     DPL,?V0 + 0
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   E8           MOV     A,R0
   \   00004E   2A           ADD     A,R2
   \   00004F   F582         MOV     DPL,A
   \   000051   E9           MOV     A,R1
   \   000052   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000055   C0E0         PUSH    A
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00006A   40DC         JC      ??PcdAuthState_1
    472              
    473              status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
   \   00006C                ; Setup parameters for call to function PcdComMF522
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   8582..       MOV     ?V0 + 0,DPL
   \   000075   8583..       MOV     ?V0 + 1,DPH
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   8582..       MOV     ?V0 + 0,DPL
   \   000085   8583..       MOV     ?V0 + 1,DPH
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   7C0C         MOV     R4,#0xc
   \   00008F   7406         MOV     A,#0x6
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   AA82         MOV     R2,DPL
   \   000096   AB83         MOV     R3,DPH
   \   000098   790E         MOV     R1,#0xe
   \   00009A   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   F5..         MOV     ?V0 + 0,A
    474              if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
   \   0000A3   7009         JNZ     ??PcdAuthState_2
   \   0000A5                ; Setup parameters for call to function ReadRawRC
   \   0000A5   7908         MOV     R1,#0x8
   \   0000A7   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000AA   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000AC   4003         JC      ??PcdAuthState_3
    475              {   status = MI_ERR;   }
   \                     ??PcdAuthState_2:
   \   0000AE   75..FE       MOV     ?V0 + 0,#-0x2
    476              
    477              return status;
   \                     ??PcdAuthState_3:
   \   0000B1   A9..         MOV     R1,?V0 + 0
   \   0000B3   80..         SJMP    ??Subroutine22_0
    478          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   05..         INC     ?V0 + 0
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   C3           CLR     C
   \   000006   9406         SUBB    A,#0x6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003                REQUIRE ??Subroutine21_0
   \   000003                ; // Fall through to label ??Subroutine21_0
    479          
    480          //******************************************************************/
    481          //功    能：读取M1卡一块数据
    482          //参数说明: addr[IN]：块地址
    483          //          pData[OUT]：读出的数据，16字节
    484          //返    回: 成功返回MI_OK
    485          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          uint8 PcdRead(uint8 addr,uint8 *pData)
   \                     PcdRead:
    487          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    488              uint8 status;
    489              unsigned int  unLen;
    490              uint8 i,ucComMF522Buf[MAXRLEN]; 
    491          
    492              ucComMF522Buf[0] = PICC_READ;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7430         MOV     A,#0x30
   \   000015   F0           MOVX    @DPTR,A
    493              ucComMF522Buf[1] = addr;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    494              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);   
   \   00001D                ; Setup parameters for call to function CalulateCRC
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   7902         MOV     R1,#0x2
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine13 & 0xFFFF
    495              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,
    496                                   ucComMF522Buf,&unLen           );
   \                     ??CrossCallReturnLabel_13:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C04         MOV     R4,#0x4
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   E9           MOV     A,R1
    497              if ((status == MI_OK) && (unLen == 0x90))
   \   000050   7031         JNZ     ??PcdRead_0
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6490         XRL     A,#0x90
   \   00005B   7002         JNZ     ??PcdRead_1
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \                     ??PcdRead_1:
   \   00005F   7022         JNZ     ??PcdRead_0
    498              {
    499                  for (i=0; i<16; i++)
   \   000061   7800         MOV     R0,#0x0
    500                      *(pData+i) = ucComMF522Buf[i];   
   \                     ??PcdRead_2:
   \   000063   8882         MOV     DPL,R0
   \   000065   AA82         MOV     R2,DPL
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   E582         MOV     A,DPL
   \   00006E   2A           ADD     A,R2
   \   00006F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000072   C0E0         PUSH    A
   \   000074   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   08           INC     R0
   \   00007B   E8           MOV     A,R0
   \   00007C   C3           CLR     C
   \   00007D   9410         SUBB    A,#0x10
   \   00007F   5004         JNC     ??PcdRead_3
   \   000081   80E0         SJMP    ??PcdRead_2
    501              }
    502              else
    503                status = MI_ERR;       
   \                     ??PcdRead_0:
   \   000083   79FE         MOV     R1,#-0x2
    504              return status;
   \                     ??PcdRead_3:
   \   000085   02....       LJMP    ?Subroutine3 & 0xFFFF
    505          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??CalulateCRC?relay
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007                ; Setup parameters for call to function PcdComMF522
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   8582..       MOV     ?V0 + 0,DPL
   \   000006   8583..       MOV     ?V0 + 1,DPH
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET
    506          
    507          //******************************************************************/
    508          //功    能：读取M1卡一块数据
    509          //参数说明: addr[IN]：块地址
    510          //          pData[OUT]：读出的数据，16字节
    511          //返    回: 成功返回MI_OK
    512          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          uint8 Read_Block(uint8 Block,uint8 *Buf)
   \                     Read_Block:
    514          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
    515            uint8 result;
    516            result = PcdAuthState(0x60,Block,Password_Buffer,UID);
   \   00000B                ; Setup parameters for call to function PcdAuthState
   \   00000B   75....       MOV     ?V0 + 2,#UID & 0xff
   \   00000E   75....       MOV     ?V0 + 3,#(UID >> 8) & 0xff
   \   000011   78..         MOV     R0,#?V0 + 2
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C..         MOV     R4,#Password_Buffer & 0xff
   \   000018   7D..         MOV     R5,#(Password_Buffer >> 8) & 0xff
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   7960         MOV     R1,#0x60
   \   00001E   12....       LCALL   ??PcdAuthState?relay
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   \   000026   E9           MOV     A,R1
    517            if(result!=MI_OK)
   \   000027   704B         JNZ     ??Read_Block_0
    518              return result;
    519            result = PcdRead(Block,Buf);
   \   000029                ; Setup parameters for call to function PcdRead
   \   000029   AA..         MOV     R2,?V0 + 0
   \   00002B   AB..         MOV     R3,?V0 + 1
   \   00002D   EE           MOV     A,R6
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??PcdRead?relay
   \   000032   E9           MOV     A,R1
    520          //  return result; // 2011.01.03
    521            
    522            if(result!=MI_OK)     return   result;
   \   000033   703F         JNZ     ??Read_Block_0
    523            if(Block!=0x00&&des_on)
   \   000035   EE           MOV     A,R6
   \   000036   603A         JZ      ??Read_Block_1
   \   000038   90....       MOV     DPTR,#des_on
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6034         JZ      ??Read_Block_1
    524            {
    525              Des_Decrypt((uint8 *)Buf    ,KK,(uint8 *)Buf    );
   \   00003E                ; Setup parameters for call to function Des_Decrypt
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C..         MOV     R4,#KK & 0xff
   \   000045   7D..         MOV     R5,#(KK >> 8) & 0xff
   \   000047   AA..         MOV     R2,?V0 + 0
   \   000049   AB..         MOV     R3,?V0 + 1
   \   00004B   12....       LCALL   ??Des_Decrypt?relay
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    526              Des_Decrypt((uint8 *)&Buf[8],KK,(uint8 *)&Buf[8]);  
   \   000053   E5..         MOV     A,?V0 + 0
   \   000055   2408         ADD     A,#0x8
   \   000057   FA           MOV     R2,A
   \   000058   E5..         MOV     A,?V0 + 1
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   FB           MOV     R3,A
   \   00005D                ; Setup parameters for call to function Des_Decrypt
   \   00005D   8A..         MOV     ?V0 + 0,R2
   \   00005F   8B..         MOV     ?V0 + 1,R3
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7C..         MOV     R4,#KK & 0xff
   \   000068   7D..         MOV     R5,#(KK >> 8) & 0xff
   \   00006A   12....       LCALL   ??Des_Decrypt?relay
   \   00006D   7402         MOV     A,#0x2
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    527            }
    528            return SUCCESS; 
   \                     ??Read_Block_1:
   \   000072   7900         MOV     R1,#0x0
   \                     ??Read_Block_0:
   \   000074   02....       LJMP    ??Subroutine25_0 & 0xFFFF
    529          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    530          
    531          //******************************************************************/
    532          //功    能：写数据到M1卡一块
    533          //参数说明: addr[IN]：块地址
    534          //          pData[IN]：写入的数据，16字节
    535          //返    回: 成功返回MI_OK
    536          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          uint8 PcdWrite(uint8 addr,uint8 *pData)
   \                     PcdWrite:
    538          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    539            uint8 status;
    540            unsigned int  unLen;
    541            uint8 i,ucComMF522Buf[MAXRLEN]; 
    542              
    543            ucComMF522Buf[0] = PICC_WRITE;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   74A0         MOV     A,#-0x60
   \   000015   F0           MOVX    @DPTR,A
    544            ucComMF522Buf[1] = addr;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    545            CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
   \   00001D                ; Setup parameters for call to function CalulateCRC
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AC82         MOV     R4,DPL
   \   000024   AD83         MOV     R5,DPH
   \   000026   7902         MOV     R1,#0x2
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine14 & 0xFFFF
    546            status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,
    547                                 ucComMF522Buf,&unLen          );
    548            if(  ( status != MI_OK)||(unLen != 4)
    549               ||((ucComMF522Buf[0]&0x0F)!= 0x0A))
   \                     ??CrossCallReturnLabel_18:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 2,DPL
   \   00003A   8583..       MOV     ?V0 + 3,DPH
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C04         MOV     R4,#0x4
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   E9           MOV     A,R1
   \   000050   7019         JNZ     ??PcdWrite_0
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6404         XRL     A,#0x4
   \   00005B   7002         JNZ     ??PcdWrite_1
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \                     ??PcdWrite_1:
   \   00005F   700A         JNZ     ??PcdWrite_0
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000069   6004         JZ      ??PcdWrite_2
    550              status = MI_ERR;           
   \                     ??PcdWrite_0:
   \   00006B   79FE         MOV     R1,#-0x2
   \   00006D   8071         SJMP    ??PcdWrite_3
    551            if (status == MI_OK)
    552            {
    553              for (i=0; i<16; i++)
   \                     ??PcdWrite_2:
   \   00006F   7A00         MOV     R2,#0x0
    554                ucComMF522Buf[i] = *(pData+i);  
   \                     ??PcdWrite_4:
   \   000071   8A82         MOV     DPL,R2
   \   000073   A882         MOV     R0,DPL
   \   000075   EE           MOV     A,R6
   \   000076   28           ADD     A,R0
   \   000077   F582         MOV     DPL,A
   \   000079   EF           MOV     A,R7
   \   00007A   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00007D   C0E0         PUSH    A
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   0A           INC     R2
   \   00008B   EA           MOV     A,R2
   \   00008C   C3           CLR     C
   \   00008D   9410         SUBB    A,#0x10
   \   00008F   40E0         JC      ??PcdWrite_4
    555              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
   \   000091                ; Setup parameters for call to function CalulateCRC
   \   000091   7412         MOV     A,#0x12
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   AC82         MOV     R4,DPL
   \   000098   AD83         MOV     R5,DPH
   \   00009A   7910         MOV     R1,#0x10
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL   ?Subroutine14 & 0xFFFF
    556              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,
    557                                   18,ucComMF522Buf,&unLen     );
   \                     ??CrossCallReturnLabel_19:
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   8582..       MOV     ?V0 + 2,DPL
   \   0000AF   8583..       MOV     ?V0 + 3,DPH
   \   0000B2   78..         MOV     R0,#?V0 + 2
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   7C12         MOV     R4,#0x12
   \   0000B9   7406         MOV     A,#0x6
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV     A,R1
    558              if(  (status != MI_OK)||(unLen != 4 )
    559                 ||((ucComMF522Buf[0]&0x0F)!= 0x0A))
   \   0000C5   70A4         JNZ     ??PcdWrite_0
   \   0000C7   85..82       MOV     DPL,?XSP + 0
   \   0000CA   85..83       MOV     DPH,?XSP + 1
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   6404         XRL     A,#0x4
   \   0000D0   7002         JNZ     ??PcdWrite_5
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \                     ??PcdWrite_5:
   \   0000D4   7095         JNZ     ??PcdWrite_0
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   12....       LCALL   ?Subroutine10 & 0xFFFF
    560                status = MI_ERR;   
    561            }    
   \                     ??CrossCallReturnLabel_5:
   \   0000DE   708B         JNZ     ??PcdWrite_0
    562            return status;
   \                     ??PcdWrite_3:
   \   0000E0                REQUIRE ?Subroutine5
   \   0000E0                ; // Fall through to label ?Subroutine5
    563          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7414         MOV     A,#0x14
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine25_0
   \   000005                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   78..         MOV     R0,#?V0 + 2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   540F         ANL     A,#0xf
   \   000003   640A         XRL     A,#0xa
   \   000005   22           RET
    564          //******************************************************************/
    565          //功    能：写数据到M1卡一块
    566          //参数说明: addr[IN]：块地址
    567          //          pData[IN]：写入的数据，16字节
    568          //返    回: 成功返回MI_OK
    569          //******************************************************************/
    570          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    571          uint8 Write_Block(uint8 Block)
   \                     Write_Block:
    572          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    573            uint8 result;
    574            if(des_on)
   \   000007   90....       MOV     DPTR,#des_on
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6036         JZ      ??Write_Block_0
    575            {
    576              Des_Encrypt((uint8 *)RF_Buffer    ,KK,
    577                          (uint8 *)RF_Buffer        );// for debug
   \   00000D                ; Setup parameters for call to function Des_Encrypt
   \   00000D   75....       MOV     ?V0 + 0,#RF_Buffer & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(RF_Buffer >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   7C..         MOV     R4,#KK & 0xff
   \   00001A   7D..         MOV     R5,#(KK >> 8) & 0xff
   \   00001C   7A..         MOV     R2,#RF_Buffer & 0xff
   \   00001E   7B..         MOV     R3,#(RF_Buffer >> 8) & 0xff
   \   000020   12....       LCALL   ??Des_Encrypt?relay
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
    578              Des_Encrypt((uint8 *)&RF_Buffer[8],KK,
    579                          (uint8 *)&RF_Buffer[8]    );// for debug  
   \   000028                ; Setup parameters for call to function Des_Encrypt
   \   000028   75....       MOV     ?V0 + 0,#(RF_Buffer + 8) & 0xff
   \   00002B   75....       MOV     ?V0 + 1,#((RF_Buffer + 8) >> 8) & 0xff
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C..         MOV     R4,#KK & 0xff
   \   000035   7D..         MOV     R5,#(KK >> 8) & 0xff
   \   000037   7A..         MOV     R2,#(RF_Buffer + 8) & 0xff
   \   000039   7B..         MOV     R3,#((RF_Buffer + 8) >> 8) & 0xff
   \   00003B   12....       LCALL   ??Des_Encrypt?relay
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    580            }
    581            result = PcdAuthState(0x60,Block,Password_Buffer,UID);
   \                     ??Write_Block_0:
   \   000043                ; Setup parameters for call to function PcdAuthState
   \   000043   75....       MOV     ?V0 + 0,#UID & 0xff
   \   000046   75....       MOV     ?V0 + 1,#(UID >> 8) & 0xff
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7C..         MOV     R4,#Password_Buffer & 0xff
   \   000050   7D..         MOV     R5,#(Password_Buffer >> 8) & 0xff
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   7960         MOV     R1,#0x60
   \   000056   12....       LCALL   ??PcdAuthState?relay
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   E9           MOV     A,R1
    582            if(result!=MI_OK)
   \   00005F   7009         JNZ     ??Write_Block_1
    583              return result;  
    584            result = PcdWrite(Block,RF_Buffer);
    585            return result;  
   \   000061                ; Setup parameters for call to function PcdWrite
   \   000061   7A..         MOV     R2,#RF_Buffer & 0xff
   \   000063   7B..         MOV     R3,#(RF_Buffer >> 8) & 0xff
   \   000065   EE           MOV     A,R6
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   ??PcdWrite?relay
   \                     ??Write_Block_1:
   \   00006A   02....       LJMP    ??Subroutine23_0 & 0xFFFF
    586          }
    587          
    588          //******************************************************************/
    589          //功    能：扣款和充值
    590          //参数说明: dd_mode[IN]：命令字
    591          //               0xC0 = 扣款
    592          //               0xC1 = 充值
    593          //          addr[IN]：钱包地址
    594          //          pValue[IN]：4字节增(减)值，低位在前
    595          //返    回: 成功返回MI_OK
    596          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          uint8 PcdValue(uint8 dd_mode,uint8 addr,uint8 *pValue)
   \                     PcdValue:
    598          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
    599              uint8 status;
    600              unsigned int  unLen;
    601              uint8 i,ucComMF522Buf[MAXRLEN]; 
    602              
    603              ucComMF522Buf[0] = dd_mode;
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E9           MOV     A,R1
   \   000016   F0           MOVX    @DPTR,A
    604              ucComMF522Buf[1] = addr;
   \   000017   7403         MOV     A,#0x3
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   EA           MOV     A,R2
   \   00001D   F0           MOVX    @DPTR,A
    605              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
   \   00001E                ; Setup parameters for call to function CalulateCRC
   \   00001E   7404         MOV     A,#0x4
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AC82         MOV     R4,DPL
   \   000025   AD83         MOV     R5,DPH
   \   000027   7902         MOV     R1,#0x2
   \   000029   E9           MOV     A,R1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine14 & 0xFFFF
    606           
    607              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
    608          
    609              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
   \                     ??CrossCallReturnLabel_20:
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   8582..       MOV     ?V0 + 2,DPL
   \   00003B   8583..       MOV     ?V0 + 3,DPH
   \   00003E   78..         MOV     R0,#?V0 + 2
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C04         MOV     R4,#0x4
   \   000045   7406         MOV     A,#0x6
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   E9           MOV     A,R1
   \   000051   7019         JNZ     ??PcdValue_0
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6404         XRL     A,#0x4
   \   00005C   7002         JNZ     ??PcdValue_1
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \                     ??PcdValue_1:
   \   000060   700A         JNZ     ??PcdValue_0
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00006A   6005         JZ      ??PcdValue_2
    610              {   status = MI_ERR;   }
   \                     ??PcdValue_0:
   \   00006C   79FE         MOV     R1,#-0x2
    611                  
    612              if (status == MI_OK)
    613              {
    614                  for (i=0; i<16; i++)
    615                  {    ucComMF522Buf[i] = *(pValue+i);   }
    616                  CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
    617                  unLen = 0;
    618                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
    619                  if (status != MI_ERR)
    620                  {    status = MI_OK;    }
    621              }
    622              
    623              if (status == MI_OK)
   \   00006E   02....       LJMP    ??PcdValue_3 & 0xFFFF
   \                     ??PcdValue_2:
   \   000071   7A00         MOV     R2,#0x0
   \                     ??PcdValue_4:
   \   000073   8A82         MOV     DPL,R2
   \   000075   A882         MOV     R0,DPL
   \   000077   E5..         MOV     A,?V0 + 0
   \   000079   28           ADD     A,R0
   \   00007A   F582         MOV     DPL,A
   \   00007C   E5..         MOV     A,?V0 + 1
   \   00007E   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000081   C0E0         PUSH    A
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   0A           INC     R2
   \   00008F   EA           MOV     A,R2
   \   000090   C3           CLR     C
   \   000091   9410         SUBB    A,#0x10
   \   000093   40DE         JC      ??PcdValue_4
   \   000095                ; Setup parameters for call to function CalulateCRC
   \   000095   7406         MOV     A,#0x6
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   AC82         MOV     R4,DPL
   \   00009C   AD83         MOV     R5,DPH
   \   00009E   7904         MOV     R1,#0x4
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000A8   E4           CLR     A
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   7404         MOV     A,#0x4
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   8582..       MOV     ?V0 + 0,DPL
   \   0000B9   8583..       MOV     ?V0 + 1,DPH
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   7C06         MOV     R4,#0x6
   \   0000C3   EC           MOV     A,R4
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   74FE         MOV     A,#-0x2
   \   0000CF   69           XRL     A,R1
   \   0000D0   6066         JZ      ??PcdValue_3
    624              {
    625                  ucComMF522Buf[0] = PICC_TRANSFER;
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   74B0         MOV     A,#-0x50
   \   0000D9   F0           MOVX    @DPTR,A
    626                  ucComMF522Buf[1] = addr;
   \   0000DA   7403         MOV     A,#0x3
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   EE           MOV     A,R6
   \   0000E0   F0           MOVX    @DPTR,A
    627                  CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
   \   0000E1                ; Setup parameters for call to function CalulateCRC
   \   0000E1   7404         MOV     A,#0x4
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   AC82         MOV     R4,DPL
   \   0000E8   AD83         MOV     R5,DPH
   \   0000EA   7902         MOV     R1,#0x2
   \   0000EC   E9           MOV     A,R1
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL   ?Subroutine13 & 0xFFFF
    628             
    629                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
   \                     ??CrossCallReturnLabel_14:
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F6   7404         MOV     A,#0x4
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   8582..       MOV     ?V0 + 0,DPL
   \   0000FE   8583..       MOV     ?V0 + 1,DPH
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7C04         MOV     R4,#0x4
   \   000108   7406         MOV     A,#0x6
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   E9           MOV     A,R1
    630          
    631                  if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
   \   000114   6003         JZ      $+5
   \   000116   02....       LJMP    ??PcdValue_0 & 0xFFFF
   \   000119   85..82       MOV     DPL,?XSP + 0
   \   00011C   85..83       MOV     DPH,?XSP + 1
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   6404         XRL     A,#0x4
   \   000122   7002         JNZ     ??PcdValue_5
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \                     ??PcdValue_5:
   \   000126   6003         JZ      $+5
   \   000128   02....       LJMP    ??PcdValue_0 & 0xFFFF
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   12....       LCALL   ?Subroutine10 & 0xFFFF
    632                  {   status = MI_ERR;   }
    633              }
   \                     ??CrossCallReturnLabel_7:
   \   000133   6003         JZ      $+5
   \   000135   02....       LJMP    ??PcdValue_0 & 0xFFFF
    634              return status;
   \                     ??PcdValue_3:
   \   000138   02....       LJMP    ?Subroutine5 & 0xFFFF
    635          }
    636          
    637          //******************************************************************/
    638          //功    能：备份钱包
    639          //参数说明: sourceaddr[IN]：源地址
    640          //          goaladdr[IN]：目标地址
    641          //返    回: 成功返回MI_OK
    642          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          uint8 PcdBakValue(uint8 sourceaddr, uint8 goaladdr)
   \                     PcdBakValue:
    644          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    645              uint8 status;
    646              unsigned int  unLen;
    647              uint8 ucComMF522Buf[MAXRLEN]; 
    648          
    649              ucComMF522Buf[0] = PICC_RESTORE;
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   74C2         MOV     A,#-0x3e
   \   000013   F0           MOVX    @DPTR,A
    650              ucComMF522Buf[1] = sourceaddr;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
    651              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
   \   00001B                ; Setup parameters for call to function CalulateCRC
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   AC82         MOV     R4,DPL
   \   000022   AD83         MOV     R5,DPH
   \   000024   7902         MOV     R1,#0x2
   \   000026   E9           MOV     A,R1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine13 & 0xFFFF
    652           
    653              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
    654          
    655              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
   \                     ??CrossCallReturnLabel_15:
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   8582..       MOV     ?V0 + 0,DPL
   \   000038   8583..       MOV     ?V0 + 1,DPH
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7C04         MOV     R4,#0x4
   \   000042   7406         MOV     A,#0x6
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   E9           MOV     A,R1
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??PcdBakValue_0 & 0xFFFF
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6404         XRL     A,#0x4
   \   00005C   7002         JNZ     ??PcdBakValue_1
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \                     ??PcdBakValue_1:
   \   000060   6003         JZ      $+5
   \   000062   02....       LJMP    ??PcdBakValue_0 & 0xFFFF
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00006D   6003         JZ      $+5
   \   00006F   02....       LJMP    ??PcdBakValue_0 & 0xFFFF
    656              {   status = MI_ERR;   }
    657              
    658              if (status == MI_OK)
    659              {
    660                  ucComMF522Buf[0] = 0;
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    661                  ucComMF522Buf[1] = 0;
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
    662                  ucComMF522Buf[2] = 0;
   \   00007B   7404         MOV     A,#0x4
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
    663                  ucComMF522Buf[3] = 0;
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E4           CLR     A
   \   000088   F0           MOVX    @DPTR,A
    664                  CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
   \   000089                ; Setup parameters for call to function CalulateCRC
   \   000089   7406         MOV     A,#0x6
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   AC82         MOV     R4,DPL
   \   000090   AD83         MOV     R5,DPH
   \   000092   7904         MOV     R1,#0x4
   \   000094   7402         MOV     A,#0x2
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   12....       LCALL   ?Subroutine13 & 0xFFFF
    665           
    666                  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
    667                  if (status != MI_ERR)
   \                     ??CrossCallReturnLabel_16:
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   8582..       MOV     ?V0 + 0,DPL
   \   0000A7   8583..       MOV     ?V0 + 1,DPH
   \   0000AA   78..         MOV     R0,#?V0 + 0
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AF   7C06         MOV     R4,#0x6
   \   0000B1   EC           MOV     A,R4
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV     A,R1
   \   0000BC   64FE         XRL     A,#0xfe
   \   0000BE   605D         JZ      ??PcdBakValue_0
    668                  {    status = MI_OK;    }
    669              }
    670              
    671              if (status != MI_OK)
    672              {    return MI_ERR;   }
    673              
    674              ucComMF522Buf[0] = PICC_TRANSFER;
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   74B0         MOV     A,#-0x50
   \   0000C7   F0           MOVX    @DPTR,A
    675              ucComMF522Buf[1] = goaladdr;
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   EF           MOV     A,R7
   \   0000CE   F0           MOVX    @DPTR,A
    676          
    677              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
   \   0000CF                ; Setup parameters for call to function CalulateCRC
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   AC82         MOV     R4,DPL
   \   0000D6   AD83         MOV     R5,DPH
   \   0000D8   7902         MOV     R1,#0x2
   \   0000DA   E9           MOV     A,R1
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL   ?Subroutine13 & 0xFFFF
    678           
    679              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
   \                     ??CrossCallReturnLabel_17:
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   7404         MOV     A,#0x4
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   8582..       MOV     ?V0 + 0,DPL
   \   0000EC   8583..       MOV     ?V0 + 1,DPH
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   7C04         MOV     R4,#0x4
   \   0000F6   7406         MOV     A,#0x6
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   E9           MOV     A,R1
    680          
    681              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
   \   000102   7019         JNZ     ??PcdBakValue_0
   \   000104   85..82       MOV     DPL,?XSP + 0
   \   000107   85..83       MOV     DPH,?XSP + 1
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   6404         XRL     A,#0x4
   \   00010D   7002         JNZ     ??PcdBakValue_2
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \                     ??PcdBakValue_2:
   \   000111   700A         JNZ     ??PcdBakValue_0
   \   000113   7402         MOV     A,#0x2
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00011B   6002         JZ      ??PcdBakValue_3
    682              {   status = MI_ERR;   }
   \                     ??PcdBakValue_0:
   \   00011D   79FE         MOV     R1,#-0x2
    683          
    684              return status;
   \                     ??PcdBakValue_3:
   \   00011F   02....       LJMP    ??Subroutine22_0 & 0xFFFF
    685          }
    686          
    687          
    688          //******************************************************************/
    689          //功    能：命令卡片进入休眠状态
    690          //返    回: 成功返回MI_OK
    691          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7450         MOV     A,#0x50
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019                ; Setup parameters for call to function CalulateCRC
   \   000019                ; Setup parameters for call to function CalulateCRC
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7902         MOV     R1,#0x2
   \   000024   E9           MOV     A,R1
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   8582..       MOV     ?V0 + 0,DPL
   \   000036   8583..       MOV     ?V0 + 1,DPH
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7C04         MOV     R4,#0x4
   \   000040   7406         MOV     A,#0x6
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B                REQUIRE ??Subroutine22_0
   \   00004B                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    692          uint8 PcdHalt(void)
   \                     PcdHalt:
   \   000000   02....       LJMP    ?Subroutine4 & 0xFFFF
    693          {
    694              uint8 status;
    695              unsigned int  unLen;
    696              uint8 ucComMF522Buf[MAXRLEN]; 
    697          
    698              ucComMF522Buf[0] = PICC_HALT;
    699              ucComMF522Buf[1] = 0;
    700              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
    701           
    702              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
    703              return status;
    704          //    return MI_OK;
    705          }
    706          
    707          //******************************************************************/
    708          //功    能：命令卡片进入休眠状态
    709          //返    回: 成功返回MI_OK
    710          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          uint8 MIF_Halt(void)
   \                     MIF_Halt:
   \   000000   02....       LJMP    ?Subroutine4 & 0xFFFF
    712          {
    713              uint8 status;
    714              unsigned int  unLen;
    715              uint8 ucComMF522Buf[MAXRLEN]; 
    716          
    717              ucComMF522Buf[0] = PICC_HALT;
    718              ucComMF522Buf[1] = 0;
    719              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
    720           
    721              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
    722              return status;  
    723          }
    724          
    725          
    726          
    727          //******************************************************************/
    728          //用MF522计算CRC16函数
    729          //******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    730          void CalulateCRC(uint8 *pIndata,uint8 len,uint8 *pOutData)
   \                     CalulateCRC:
    731          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 5,R1
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
    732              uint8 i,n;
    733              ClearBitMask(DivIrqReg,0x04);
   \   00000F                ; Setup parameters for call to function ClearBitMask
   \   00000F   7A04         MOV     R2,#0x4
   \   000011   7905         MOV     R1,#0x5
   \   000013   12....       LCALL   ?Subroutine6 & 0xFFFF
    734              WriteRawRC(CommandReg,PCD_IDLE);
    735              SetBitMask(FIFOLevelReg,0x80);
    736              for (i=0; i<len; i++)
   \                     ??CrossCallReturnLabel_1:
   \   000016   75..00       MOV     ?V0 + 4,#0x0
   \   000019   8014         SJMP    ??CalulateCRC_0
    737              {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
   \                     ??CalulateCRC_1:
   \   00001B                ; Setup parameters for call to function WriteRawRC
   \   00001B   85....       MOV     ?V0 + 2,?V0 + 4
   \   00001E   EE           MOV     A,R6
   \   00001F   25..         ADD     A,?V0 + 2
   \   000021   F582         MOV     DPL,A
   \   000023   EF           MOV     A,R7
   \   000024   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000027   FA           MOV     R2,A
   \   000028   7909         MOV     R1,#0x9
   \   00002A   12....       LCALL   ??WriteRawRC?relay
   \   00002D   05..         INC     ?V0 + 4
   \                     ??CalulateCRC_0:
   \   00002F   E5..         MOV     A,?V0 + 4
   \   000031   C3           CLR     C
   \   000032   95..         SUBB    A,?V0 + 5
   \   000034   40E5         JC      ??CalulateCRC_1
    738              WriteRawRC(CommandReg, PCD_CALCCRC);
   \   000036                ; Setup parameters for call to function WriteRawRC
   \   000036   7A03         MOV     R2,#0x3
   \   000038   7901         MOV     R1,#0x1
   \   00003A   12....       LCALL   ??WriteRawRC?relay
    739              i = 0xFF;
   \   00003D   75..FF       MOV     ?V0 + 4,#-0x1
    740              do 
    741              {
    742                  n = ReadRawRC(DivIrqReg);
   \                     ??CalulateCRC_2:
   \   000040                ; Setup parameters for call to function ReadRawRC
   \   000040   7905         MOV     R1,#0x5
   \   000042   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000045   F8           MOV     R0,A
    743                  i--;
    744              }
    745              while ((i!=0) && !(n&0x04));
   \   000046   15..         DEC     ?V0 + 4
   \   000048   E5..         MOV     A,?V0 + 4
   \   00004A   6005         JZ      ??CalulateCRC_3
   \   00004C   E8           MOV     A,R0
   \   00004D   A2E2         MOV     C,0xE0 /* A   */.2
   \   00004F   50EF         JNC     ??CalulateCRC_2
    746              pOutData[0] = ReadRawRC(CRCResultRegL);
   \                     ??CalulateCRC_3:
   \   000051                ; Setup parameters for call to function ReadRawRC
   \   000051   7922         MOV     R1,#0x22
   \   000053   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000056   F0           MOVX    @DPTR,A
    747              pOutData[1] = ReadRawRC(CRCResultRegM);
   \   000057                ; Setup parameters for call to function ReadRawRC
   \   000057   7921         MOV     R1,#0x21
   \   000059   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
    748          }
   \   00005E   7F06         MOV     R7,#0x6
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ??ReadRawRC?relay
   \   000003   E9           MOV     A,R1
   \   000004   85..82       MOV     DPL,?V0 + 0
   \   000007   85..83       MOV     DPH,?V0 + 1
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalRc522Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalRc522Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalRc522Delay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalRc522Delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadRawRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadRawRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteRawRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteRawRC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetBitMask?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetBitMask

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ClearBitMask?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ClearBitMask

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAntennaOn?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAntennaOn

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAntennaTestOn?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAntennaTestOn

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAntennaOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAntennaOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdComMF522?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdComMF522

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAnticoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAnticoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdSelect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdSelect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdAuthState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdAuthState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Read_Block?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Read_Block

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Write_Block?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Write_Block

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdBakValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdBakValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PcdHalt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PcdHalt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MIF_Halt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MIF_Halt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CalulateCRC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CalulateCRC
    749          

   Maximum stack usage in bytes:

     Function           ISTACK PSTACK XSTACK
     --------           ------ ------ ------
     CalulateCRC            1      0     46
       -> ClearBitMask      0      0     28
       -> WriteRawRC        0      0     28
       -> SetBitMask        0      0     28
       -> WriteRawRC        0      0     28
       -> WriteRawRC        0      0     28
       -> ReadRawRC         0      0     28
       -> ReadRawRC         0      0     28
       -> ReadRawRC         0      0     28
     ClearBitMask           0      0     47
       -> ReadRawRC         0      0     18
       -> WriteRawRC        0      0     18
     HalRc522Delay          0      0      0
     HalRc522Init           0      0      0
     MIF_Halt               0      0     34
       -> CalulateCRC       0      0     60
       -> PcdComMF522       0      0     68
     PcdAntennaOff          2      0      0
       -> ClearBitMask      4      0      0
     PcdAntennaOn           2      0      0
       -> WriteRawRC        4      0      0
       -> HalRc522Delay     4      0      0
       -> ReadRawRC         4      0      0
       -> SetBitMask        4      0      0
       -> ReadRawRC         4      0      0
     PcdAntennaTestOn       2      0      0
       -> HalRc522Delay     4      0      0
       -> WriteRawRC        4      0      0
     PcdAnticoll            1      0     42
       -> ClearBitMask      0      0     76
       -> WriteRawRC        0      0     76
       -> ClearBitMask      0      0     76
       -> PcdComMF522       0      0     84
       -> SetBitMask        0      0     76
     PcdAuthState           1      0     48
       -> PcdComMF522       0      0     68
       -> ReadRawRC         0      0     60
     PcdBakValue            1      0     34
       -> CalulateCRC       0      0     60
       -> PcdComMF522       0      0     68
       -> CalulateCRC       0      0     60
       -> PcdComMF522       0      0     68
       -> CalulateCRC       0      0     60
       -> PcdComMF522       0      0     68
     PcdComMF522            1      0     64
       -> WriteRawRC        0      0     44
       -> ClearBitMask      0      0     44
       -> WriteRawRC        0      0     44
       -> SetBitMask        0      0     44
       -> WriteRawRC        0      0     44
       -> WriteRawRC        0      0     44
       -> SetBitMask        0      0     44
       -> ReadRawRC         0      0     44
       -> ClearBitMask      0      0     44
       -> ReadRawRC         0      0     44
       -> ReadRawRC         0      0     44
       -> ReadRawRC         0      0     44
       -> ReadRawRC         0      0     44
       -> SetBitMask        0      0     44
       -> WriteRawRC        0      0     44
     PcdHalt                0      0     34
       -> CalulateCRC       0      0     60
       -> PcdComMF522       0      0     68
     PcdRead                1      0     47
       -> CalulateCRC       0      0     62
       -> PcdComMF522       0      0     70
     PcdRequest             1      0     35
       -> ClearBitMask      0      0     62
       -> WriteRawRC        0      0     62
       -> SetBitMask        0      0     62
       -> PcdComMF522       0      0     70
     PcdReset               2      0      0
       -> HalRc522Delay     4      0      0
       -> HalRc522Delay     4      0      0
       -> HalRc522Delay     4      0      0
       -> WriteRawRC        4      0      0
       -> HalRc522Delay     4      0      0
       -> WriteRawRC        4      0      0
       -> WriteRawRC        4      0      0
       -> WriteRawRC        4      0      0
       -> WriteRawRC        4      0      0
       -> WriteRawRC        4      0      0
     PcdSelect              1      0     34
       -> CalulateCRC       0      0     60
       -> ClearBitMask      0      0     60
       -> PcdComMF522       0      0     68
     PcdValue               1      0     36
       -> CalulateCRC       0      0     64
       -> PcdComMF522       0      0     72
       -> CalulateCRC       0      0     64
       -> PcdComMF522       0      0     72
       -> CalulateCRC       0      0     64
       -> PcdComMF522       0      0     72
     PcdWrite               1      0     46
       -> CalulateCRC       0      0     64
       -> PcdComMF522       0      0     72
       -> CalulateCRC       0      0     64
       -> PcdComMF522       0      0     72
     ReadRawRC              0      0     30
     Read_Block             0      0     14
       -> PcdAuthState      0      0     28
       -> PcdRead           0      0     24
       -> Des_Decrypt       0      0     28
       -> Des_Decrypt       0      0     28
     SetBitMask             0      0     47
       -> ReadRawRC         0      0     18
       -> WriteRawRC        0      0     18
     WriteRawRC             0      0     38
     Write_Block            0      0     12
       -> Des_Encrypt       0      0     24
       -> Des_Encrypt       0      0     24
       -> PcdAuthState      0      0     24
       -> PcdWrite          0      0     20


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_P1                       1
     _A_P2                       1
     P1DIR                       1
     P2DIR                       1
     HalRc522Init               16
     HalRc522Delay              27
     ReadRawRC                  55
     ?Subroutine0                7
     WriteRawRC                 60
     SetBitMask                 12
     ?Subroutine2               11
     ?Subroutine8                1
     ??Subroutine27_0            5
     ClearBitMask               15
     PcdReset                   85
     ?Subroutine1                7
     PcdAntennaOn               41
     PcdAntennaTestOn           20
     PcdAntennaOff              13
     PcdComMF522               408
     ?Subroutine6               18
     PcdRequest                124
     ?Subroutine3               10
     ?Subroutine16              16
     ?Subroutine15               6
     ??Subroutine24_0            6
     PcdAnticoll               213
     ?Subroutine12               9
     ?Subroutine18              10
     ?Subroutine9                4
     ??Subroutine26_0            6
     PcdSelect                 181
     ??Subroutine21_0           11
     ??Subroutine22_0            5
     ??Subroutine23_0            5
     PcdAuthState              181
     ?Subroutine17               9
     ?Subroutine11               3
     PcdRead                   136
     ?Subroutine20              14
     ?Subroutine13              12
     Read_Block                119
     ??Subroutine25_0            5
     PcdWrite                  224
     ?Subroutine5                5
     ?Subroutine19              12
     ?Subroutine14              12
     ?Subroutine10               6
     Write_Block               109
     PcdValue                  315
     PcdBakValue               290
     ?Subroutine4               75
     PcdHalt                     3
     MIF_Halt                    3
     CalulateCRC                99
     ?Subroutine7               11
     ??HalRc522Init?relay        6
     ??HalRc522Delay?relay       6
     ??ReadRawRC?relay           6
     ??WriteRawRC?relay          6
     ??SetBitMask?relay          6
     ??ClearBitMask?relay        6
     ??PcdReset?relay            6
     ??PcdAntennaOn?relay        6
     ??PcdAntennaTestOn?relay    6
     ??PcdAntennaOff?relay       6
     ??PcdComMF522?relay         6
     ??PcdRequest?relay          6
     ??PcdAnticoll?relay         6
     ??PcdSelect?relay           6
     ??PcdAuthState?relay        6
     ??PcdRead?relay             6
     ??Read_Block?relay          6
     ??PcdWrite?relay            6
     ??Write_Block?relay         6
     ??PcdValue?relay            6
     ??PcdBakValue?relay         6
     ??PcdHalt?relay             6
     ??MIF_Halt?relay            6
     ??CalulateCRC?relay         6

 
 3 050 bytes in segment BANKED_CODE
   144 bytes in segment BANK_RELAYS
     4 bytes in segment SFR_AN
 
 3 194 bytes of CODE memory
     0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
