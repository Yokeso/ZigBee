///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        25/Mar/2021  12:45:16 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\毕设\CC2530-smart_home\Components\hal\target\C /
//                          C2530SB\hal_BH1750.c                              /
//    Command line       =  -f D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\Tools\CC2530DB /
//                          \f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func      /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\毕设\CC2530-smart_home\ /
//                          Projects\zstack\Utilities\Smart_home\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO   /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\毕设\CC2530-smart_home\ /
//                          Components\hal\target\CC2530SB\hal_BH1750.c -D    /
//                          HAL_UART=TRUE -D HAL_UART_TEST -D xPOWER_SAVING   /
//                          -D xREFLECTOR -lC D:\毕设\CC2530-smart_home\Proje /
//                          cts\zstack\Utilities\Smart_home\CC2530DB\EndDevic /
//                          eSBD203\List\ -lA D:\毕设\CC2530-smart_home\Proje /
//                          cts\zstack\Utilities\Smart_home\CC2530DB\EndDevic /
//                          eSBD203\List\ --diag_suppress Pe001,Pa010 -o      /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\EndDeviceSBD203\Obj\ -e    /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\Source\ -I              /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\ZMain\TI2530DB\   /
//                          -I D:\毕设\CC2530-smart_home\Projects\zstack\Util /
//                          ities\Smart_home\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\include\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\hal\target\CC2530SB\ -I        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\include\ -I D:\毕设\CC2530-smart_home\Project /
//                          s\zstack\Utilities\Smart_home\CC2530DB\..\..\..\. /
//                          .\..\Components\mac\high_level\ -I                /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\ -I               /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\ -I D:\毕设\CC2530-smart_home\Projects\zstack\ /
//                          Utilities\Smart_home\CC2530DB\..\..\..\..\..\Comp /
//                          onents\osal\include\ -I                           /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          services\saddr\ -I D:\毕设\CC2530-smart_home\Proj /
//                          ects\zstack\Utilities\Smart_home\CC2530DB\..\..\. /
//                          .\..\..\Components\services\sdata\ -I             /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\af\ -I D:\毕设\CC2530-smart_home\Projects\z /
//                          stack\Utilities\Smart_home\CC2530DB\..\..\..\..\. /
//                          .\Components\stack\nwk\ -I                        /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sapi\ -I D:\毕设\CC2530-smart_home\Projects /
//                          \zstack\Utilities\Smart_home\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\ -I                      /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sys\ -I D:\毕设\CC2530-smart_home\Projects\ /
//                          zstack\Utilities\Smart_home\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\zdo\ -I                       /
//                          D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\ -I D:\毕设\CC2530-smart_home\Projects\zstac /
//                          k\Utilities\Smart_home\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\ -Ohz                           /
//    List file          =  D:\毕设\CC2530-smart_home\Projects\zstack\Utiliti /
//                          es\Smart_home\CC2530DB\EndDeviceSBD203\List\hal_B /
//                          H1750.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_BH1750

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?FLT_DIV
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?UL_TO_FLT
        EXTERN ?V0

        PUBLIC ??BH1750_ConvertLight?relay
        FUNCTION ??BH1750_ConvertLight?relay,0203H
        PUBLIC ??BH1750_Init?relay
        FUNCTION ??BH1750_Init?relay,0203H
        PUBLIC ??I2C_DelayNus?relay
        FUNCTION ??I2C_DelayNus?relay,0203H
        PUBLIC ??I2C_Read?relay
        FUNCTION ??I2C_Read?relay,0203H
        PUBLIC ??I2C_Start?relay
        FUNCTION ??I2C_Start?relay,0203H
        PUBLIC ??I2C_Stop?relay
        FUNCTION ??I2C_Stop?relay,0203H
        PUBLIC ??I2C_Write?relay
        FUNCTION ??I2C_Write?relay,0203H
        PUBLIC BH1750_ConvertLight
        FUNCTION BH1750_ConvertLight,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC BH1750_Init
        FUNCTION BH1750_Init,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C_DelayNus
        FUNCTION I2C_DelayNus,080203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC I2C_Read
        FUNCTION I2C_Read,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC I2C_Start
        FUNCTION I2C_Start,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C_Stop
        FUNCTION I2C_Stop,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C_Write
        FUNCTION I2C_Write,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK P1DIR
        PUBWEAK _A_IEN0
        PUBWEAK _A_P1
        PUBWEAK __Constant_3f99999a
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
BH1750_ConvertLight SYMBOL "BH1750_ConvertLight"
??BH1750_ConvertLight?relay SYMBOL "?relay", BH1750_ConvertLight
BH1750_Init         SYMBOL "BH1750_Init"
??BH1750_Init?relay SYMBOL "?relay", BH1750_Init
I2C_DelayNus        SYMBOL "I2C_DelayNus"
??I2C_DelayNus?relay SYMBOL "?relay", I2C_DelayNus
I2C_Read            SYMBOL "I2C_Read"
??I2C_Read?relay    SYMBOL "?relay", I2C_Read
I2C_Start           SYMBOL "I2C_Start"
??I2C_Start?relay   SYMBOL "?relay", I2C_Start
I2C_Stop            SYMBOL "I2C_Stop"
??I2C_Stop?relay    SYMBOL "?relay", I2C_Stop
I2C_Write           SYMBOL "I2C_Write"
??I2C_Write?relay   SYMBOL "?relay", I2C_Write

// D:\毕设\CC2530-smart_home\Components\hal\target\CC2530SB\hal_BH1750.c
//    1 /*****************************************************************************
//    2 *
//    3 * 文 件 名：hal_BH1750.c
//    4 
//    5 * 作    者: 南京安宸博研电子科技有限公司
//    6 
//    7 * 创建时间: 2019.04.01
//    8 
//    9 * 修改时间: 2019.04.21
//   10 
//   11 * IAR 版本: IAR for 8051 V8.10.1
//   12 
//   13 * 测试平台: Sensor MotherBoard V2.3
//   14 
//   15 * 说    明: 1. 设置I2C接口涉及的相关GPIO.
//   16 *           2. 利用GPIO口模拟I2C总线的读写等操作.
//   17 *                               
//   18 *****************************************************************************/
//   19 
//   20 #include "iocc2530.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   21 #include "hal_types.h"
//   22 #include "hal_mcu.h"
//   23 
//   24 // 功能函数的宏定义
//   25 #define st(x)                             do { x } while (__LINE__ == -1)
//   26 #define HAL_IO_SET(port, pin, val)        HAL_IO_SET_PREP(port, pin, val)
//   27 #define HAL_IO_SET_PREP(port, pin, val)   st( P##port##_##pin## = val; )
//   28 #define HAL_IO_GET(port, pin)             HAL_IO_GET_PREP( port,pin)
//   29 #define HAL_IO_GET_PREP(port, pin)        (P##port##_##pin)
//   30 
//   31 // I2C总线相关GPIO口宏定义, 针对MCU而言
//   32 #define SET_SDA_PIN_OUTPUT     (P1DIR |=0x10  )
//   33 #define SET_SDA_PIN_INPUT      (P1DIR &=~0x10 )
//   34 #define SET_SCL_PIN_OUTPUT     (P1DIR |=0x04  )
//   35 #define SET_DVI_PIN_OUTPUT     (P1DIR |=0x08  )
//   36 
//   37 #define SET_SCL_LOW             HAL_IO_SET(1,2,0)
//   38 #define SET_SCL_HIGH            HAL_IO_SET(1,2,1)
//   39 #define SET_SDA_LOW             HAL_IO_SET(1,4,0)
//   40 #define SET_SDA_HIGH            HAL_IO_SET(1,4,1)
//   41 #define SET_DVI_LOW             HAL_IO_SET(1,3,0)
//   42 #define SET_DVI_HIGH            HAL_IO_SET(1,3,1)
//   43 
//   44 #define GET_SDA_DATA            HAL_IO_GET(1,4)
//   45 
//   46 // ADDR引脚接地, 最低位为读写位
//   47 #define BH1750_ADDR     0x46
//   48 #define READ_CMD        0x01
//   49 
//   50 // BH1750操作命令
//   51 #define POWER_DOWN      0x00    // 断电
//   52 #define POWER_ON        0x01    // 上电
//   53 #define RESET           0x07    // 复位
//   54 #define CON_HR_MODE     0x10    // 连续H分辨率, 1lx分辨率, 测量时间一120ms
//   55 #define CON_HR_MODE2    0x11    // 连续H分辨率2, 0.5lx分辨率, 测量时间为120ms
//   56 #define CON_LR_MODE     0x13    // 连续低分辨, 4lx分辨率, 测量时间一16ms
//   57 // 一次测量后, 自动处于断电模式
//   58 #define ONCE_HR_MODE    0x20    // 一次H分辨率, 1lx分辨率, 测量时间一120ms
//   59 #define ONCE_HR_MODE2   0x21    // 一次H分辨率2, 0.5lx分辨率, 测量时间为120ms
//   60 #define ONCE_LR_MODE    0x23    // 一次L分辨率模式4lx分辨率, 测量时间一16ms
//   61 
//   62 /*****************************************************************************
//   63  * @fn          I2C_DelayNus
//   64  *
//   65  * @brief       裸机条件下、时钟频率为32MHz时实现N个微秒的延时(不精确).
//   66  *
//   67  * @param       n--延时长度
//   68  *
//   69  * @return      none
//   70  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   71 void I2C_DelayNus(uint16 cnt)
I2C_DelayNus:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function I2C_DelayNus
        CODE
//   72 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??I2C_DelayNus_0
//   73     while (cnt--)
//   74     {
//   75         asm("NOP");  
??I2C_DelayNus_1:
        NOP
//   76         asm("NOP");
        NOP
//   77         asm("NOP");
        NOP
//   78     }
??I2C_DelayNus_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??I2C_DelayNus_1
//   79 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   80 
//   81 /*****************************************************************************
//   82  * @fn          I2C_Start
//   83  *
//   84  * @brief       启动I2C, 占用总线, 数据在时钟高电平的时候从高往低跃变.
//   85  *
//   86  * @param       none
//   87  *
//   88  * @return      none
//   89  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   90 void I2C_Start(void)
I2C_Start:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function I2C_Start
        CODE
//   91 {
        FUNCALL I2C_Start, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   92     SET_SDA_PIN_OUTPUT;
        ORL     0xfe,#0x10
//   93     SET_SDA_HIGH;
        SETB    0x90.4
//   94     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        LCALL   ?Subroutine2 & 0xFFFF
//   95     SET_SCL_HIGH;
//   96     I2C_DelayNus(10);
//   97     SET_SDA_LOW;
??CrossCallReturnLabel_2:
        CLR     0x90.4
        CFI EndBlock cfiBlock1
//   98     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        REQUIRE ?Subroutine0
        REQUIRE P1DIR
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0
//   99     SET_SCL_LOW;
//  100     I2C_DelayNus(10);
//  101 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
        CLR     0x90.2
        ; Setup parameters for call to function I2C_DelayNus
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        CFI EndBlock cfiBlock2
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//  102 
//  103 /*****************************************************************************
//  104  * @fn          I2C_Stop
//  105  *
//  106  * @brief       结束I2C, 释放总线, 数据在时钟高电平的时候从低往高跃变.
//  107  *
//  108  * @param       none
//  109  *
//  110  * @return      none
//  111  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 void I2C_Stop(void)
I2C_Stop:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function I2C_Stop
        CODE
//  113 {
        FUNCALL I2C_Stop, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Stop, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Stop, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Stop, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Stop, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  114     SET_SDA_PIN_OUTPUT ;
        ORL     0xfe,#0x10
//  115     SET_SCL_LOW ;
        CLR     0x90.2
//  116     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  117     SET_SDA_LOW ;
        CLR     0x90.4
//  118     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        LCALL   ?Subroutine2 & 0xFFFF
//  119     SET_SCL_HIGH ;
//  120     I2C_DelayNus(10);
//  121     SET_SDA_HIGH ;
??CrossCallReturnLabel_3:
        SETB    0x90.4
//  122     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock4
        REQUIRE P1DIR
        REQUIRE _A_P1
//  123     SET_SCL_LOW ;
//  124     I2C_DelayNus(10);
//  125 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_3
        CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond10) CFA_SP SP+-5
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_4
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_0
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_1
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
        SETB    0x90.2
        ; Setup parameters for call to function I2C_DelayNus
        ; Setup parameters for call to function I2C_DelayNus
        ; Setup parameters for call to function I2C_DelayNus
        ; Setup parameters for call to function I2C_DelayNus
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
//  126 
//  127 /*****************************************************************************
//  128  * @fn          I2C_Write
//  129  *
//  130  * @brief       发送字节并且判断是否收到ACK(低电平), 高位先发送.
//  131  *
//  132  * @param       none
//  133  *
//  134  * @return      0: 收到ACK; 1: 未收到ACK.
//  135  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  136 uint8 I2C_Write(uint8 val)                 
I2C_Write:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function I2C_Write
        CODE
//  137 {
        FUNCALL I2C_Write, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Write, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  138     uint8 tmpData, rtnData;
//  139     uint8 cnt;
//  140     halIntState_t intState;
//  141     
//  142     tmpData = 0x80;
        MOV     ?V0 + 0,#-0x80
//  143     SET_SDA_PIN_OUTPUT;
        ORL     0xfe,#0x10
//  144 
//  145     // 循环发送8位数据   
//  146     for(cnt=0; cnt<8; cnt++)
        MOV     R6,#0x8
//  147     {
//  148         if(val & tmpData)
??I2C_Write_0:
        MOV     A,R7
        ANL     A,?V0 + 0
        JZ      ??I2C_Write_1
//  149         {
//  150             SET_SDA_HIGH;
        SETB    0x90.4
        SJMP    ??I2C_Write_2
//  151         }
//  152         else
//  153         {
//  154             SET_SDA_LOW;
??I2C_Write_1:
        CLR     0x90.4
//  155         }
//  156         I2C_DelayNus(10);
??I2C_Write_2:
        ; Setup parameters for call to function I2C_DelayNus
        LCALL   ?Subroutine1 & 0xFFFF
//  157         SET_SCL_HIGH ; 
//  158         I2C_DelayNus(10);
//  159         SET_SCL_LOW ;
//  160         I2C_DelayNus(10);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  161         tmpData = tmpData>>1;   // 右移一位             
        MOV     A,?V0 + 0
        CLR     C
        RRC     A
        MOV     ?V0 + 0,A
//  162      }
        DEC     R6
        MOV     A,R6
        JNZ     ??I2C_Write_0
//  163 
//  164     // 接收并判别ACK信号
//  165     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  166     HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  167     SET_SDA_PIN_INPUT;
        ANL     0xfe,#0xef
//  168     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        LCALL   ?Subroutine2 & 0xFFFF
//  169     SET_SCL_HIGH; 
//  170     I2C_DelayNus(10);
//  171     if(GET_SDA_DATA)
??CrossCallReturnLabel_4:
        MOV     A,0x90
        MOV     ?V0 + 0,A
//  172     {
//  173         rtnData = 1; // 未收到ACK信号
//  174     }
//  175     else
//  176     {
//  177         rtnData = 0; // 收到ACK信号
//  178     }
//  179     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  180     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  181     SET_SCL_LOW;
        CLR     0x90.2
//  182 
//  183     return(rtnData); 
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.4
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
        REQUIRE P1DIR
        REQUIRE _A_P1
        REQUIRE _A_IEN0
//  184 }
//  185 
//  186 /*****************************************************************************
//  187  * @fn          I2C_Read
//  188  *
//  189  * @brief       MCU读取一个字节，根据mode参数, 发送ACK(低电平)或NACK(高电平).
//  190  *
//  191  * @param       mode : 1--数据读取未结束, 0--结束数据读取.
//  192  *
//  193  * @return      读取的数据
//  194  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  195 uint8 I2C_Read(uint8 mode)
I2C_Read:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function I2C_Read
        CODE
//  196 {
        FUNCALL I2C_Read, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Read, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  197     uint8 cnt;
//  198     uint8 val, tmpData;
//  199     halIntState_t intState;
//  200     
//  201     val = 0;
        MOV     ?V0 + 0,#0x0
//  202     tmpData = 0x80;
        MOV     ?V0 + 1,#-0x80
//  203     SET_SDA_HIGH;
        SETB    0x90.4
//  204     // 循环读取8位数据
//  205     for(cnt=0; cnt<8; cnt++)
        MOV     R6,#0x8
//  206     {       
//  207         SET_SCL_HIGH;
??I2C_Read_0:
        SETB    0x90.2
//  208         HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 2,A
        CLR     0xa8.7
//  209         SET_SDA_PIN_INPUT;
        ANL     0xfe,#0xef
//  210         I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  211         if(GET_SDA_DATA)
        MOV     C,0x90.4
        JNC     ??I2C_Read_1
//  212         {
//  213             val |= tmpData;
        MOV     A,?V0 + 1
        ORL     ?V0 + 0,A
//  214         }
//  215         HAL_EXIT_CRITICAL_SECTION(intState);
??I2C_Read_1:
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  216         tmpData = tmpData>>1;
        MOV     A,?V0 + 1
        CLR     C
        RRC     A
        MOV     ?V0 + 1,A
//  217         I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  218         SET_SCL_LOW ;
        CLR     0x90.2
//  219         I2C_DelayNus(10);                    
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  220     }
        DEC     R6
        MOV     A,R6
        JNZ     ??I2C_Read_0
//  221     // MCU发送ACK或NACK信号
//  222     SET_SDA_PIN_OUTPUT;
        ORL     0xfe,#0x10
//  223     if(mode)
        MOV     A,R7
        JZ      ??I2C_Read_2
//  224     {
//  225         SET_SDA_LOW;
        CLR     0x90.4
        SJMP    ??I2C_Read_3
//  226     }
//  227     else
//  228     {
//  229         SET_SDA_HIGH;
??I2C_Read_2:
        SETB    0x90.4
//  230     }
//  231     I2C_DelayNus(10);
??I2C_Read_3:
        ; Setup parameters for call to function I2C_DelayNus
        LCALL   ?Subroutine1 & 0xFFFF
//  232     SET_SCL_HIGH ;
//  233     I2C_DelayNus(10);
//  234     SET_SCL_LOW ;   // 置时钟线为空闲状态
//  235     SET_SDA_HIGH;   // 置数据线为空闲状态
??CrossCallReturnLabel_1:
        SETB    0x90.4
//  236     
//  237     return val;
        MOV     R1,?V0 + 0
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock16
        REQUIRE _A_P1
        REQUIRE _A_IEN0
        REQUIRE P1DIR
//  238 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        CLR     0x90.2
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  239 
//  240 /*********************************************************************
//  241  * @fn      BH1750_Init
//  242  *
//  243  * @brief   BH1750初始化
//  244  *
//  245  * @param   none
//  246  *
//  247  * @return  none
//  248  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  249 void BH1750_Init(void)
BH1750_Init:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function BH1750_Init
        CODE
//  250 {
        FUNCALL BH1750_Init, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_Init, I2C_DelayNus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  251     SET_SCL_PIN_OUTPUT;
        ORL     0xfe,#0x4
//  252     SET_DVI_PIN_OUTPUT;
        ORL     0xfe,#0x8
//  253     // 复位芯片
//  254     SET_DVI_LOW;
        CLR     0x90.3
//  255     I2C_DelayNus(10);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??I2C_DelayNus?relay
//  256     SET_DVI_HIGH;
        SETB    0x90.3
//  257     I2C_DelayNus(100);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0x64
        LJMP    ??Subroutine5_0 & 0xFFFF
        CFI EndBlock cfiBlock20
        REQUIRE P1DIR
        REQUIRE _A_P1
//  258 }
//  259 
//  260 /*********************************************************************
//  261  * @fn      BH1750_ConvertLight
//  262  *
//  263  * @brief   读取BH1750光照信息
//  264  *
//  265  * @param   none
//  266  *
//  267  * @return  光照度值(1~65535lx)
//  268  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  269 uint16 BH1750_ConvertLight(void)
BH1750_ConvertLight:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function BH1750_ConvertLight
        CODE
//  270 {        
        FUNCALL BH1750_ConvertLight, BH1750_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_DelayNus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BH1750_ConvertLight, I2C_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  271     uint8 tmpData;
//  272     uint16 lightData = 0;
//  273     
//  274     // 初始化BH1750及其相关引脚
//  275     BH1750_Init();
        ; Setup parameters for call to function BH1750_Init
        LCALL   ??BH1750_Init?relay
//  276     
//  277     // 启动总线
//  278     I2C_Start();
        ; Setup parameters for call to function I2C_Start
        LCALL   ?Subroutine3 & 0xFFFF
//  279     if(I2C_Write(BH1750_ADDR))
??CrossCallReturnLabel_5:
        JZ      ??BH1750_ConvertLight_0
//  280     {
//  281         return(0);  // 未收到ACK, 返回０
??BH1750_ConvertLight_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??BH1750_ConvertLight_2
//  282     }
//  283     // 上电
//  284     if(I2C_Write(POWER_ON))
??BH1750_ConvertLight_0:
        ; Setup parameters for call to function I2C_Write
        MOV     R1,#0x1
        LCALL   ??I2C_Write?relay
        MOV     A,R1
        JNZ     ??BH1750_ConvertLight_1
//  285     {
//  286          return(0);  // 未收到ACK, 返回０
//  287     }
//  288     I2C_Stop();
        ; Setup parameters for call to function I2C_Stop
        LCALL   ??I2C_Stop?relay
//  289     
//  290     // 开始测量
//  291     I2C_Start();
        ; Setup parameters for call to function I2C_Start
        LCALL   ?Subroutine3 & 0xFFFF
//  292     if(I2C_Write(BH1750_ADDR))
??CrossCallReturnLabel_6:
        JNZ     ??BH1750_ConvertLight_1
//  293     {
//  294         return(0);  // 未收到ACK, 返回０
//  295     }
//  296     // 设置为连续Ｈ分辨率模式
//  297     if(I2C_Write(CON_HR_MODE))
        ; Setup parameters for call to function I2C_Write
        MOV     R1,#0x10
        LCALL   ??I2C_Write?relay
        MOV     A,R1
        JNZ     ??BH1750_ConvertLight_1
//  298     {
//  299          return(0);  // 未收到ACK, 返回０
//  300     }
//  301     I2C_Stop();
        ; Setup parameters for call to function I2C_Stop
        LCALL   ??I2C_Stop?relay
//  302 
//  303     // 转换时间120ms
//  304     I2C_DelayNus(20000);
        ; Setup parameters for call to function I2C_DelayNus
        MOV     R2,#0x20
        MOV     R3,#0x4e
        LCALL   ??I2C_DelayNus?relay
//  305     
//  306     I2C_Start();
        ; Setup parameters for call to function I2C_Start
        LCALL   ??I2C_Start?relay
//  307     if(I2C_Write(BH1750_ADDR + READ_CMD))
        ; Setup parameters for call to function I2C_Write
        MOV     R1,#0x47
        LCALL   ??I2C_Write?relay
        MOV     A,R1
        JNZ     ??BH1750_ConvertLight_1
//  308     {
//  309         return(0);  // 未收到ACK, 返回０
//  310     }
//  311     tmpData = I2C_Read(1);      // 高字节数据
        ; Setup parameters for call to function I2C_Read
        MOV     R1,#0x1
        LCALL   ??I2C_Read?relay
        MOV     A,R1
        MOV     R6,A
//  312     lightData = I2C_Read(0);    // 低字节数据
        ; Setup parameters for call to function I2C_Read
        MOV     R1,#0x0
        LCALL   ??I2C_Read?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  313     I2C_Stop();
        ; Setup parameters for call to function I2C_Stop
        LCALL   ??I2C_Stop?relay
//  314     
//  315     lightData = (uint16)(((tmpData << 8) | lightData) / 1.2);
//  316     return lightData;
        MOV     A,R6
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_3f99999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
??BH1750_ConvertLight_2:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
//  317 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ??I2C_Start?relay
        ; Setup parameters for call to function I2C_Write
        ; Setup parameters for call to function I2C_Write
        MOV     R1,#0x46
        LCALL   ??I2C_Write?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f99999a:
        DD 3F99999AH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_DelayNus?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_DelayNus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BH1750_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BH1750_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BH1750_ConvertLight?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BH1750_ConvertLight

        END
// 
// 468 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//   4 bytes in segment XDATA_ROM_C
// 
// 510 bytes of CODE  memory
//   0 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
